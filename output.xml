<?xml version="1.0" encoding="utf8"?>
<vulkan>
   <alias name="VkWin32SurfaceCreateFlagsKHR" type="VkFlags"/>
   <alias name="VkDebugUtilsMessengerCallbackDataFlagsEXT" type="VkFlags"/>
   <alias name="VkDebugUtilsMessengerCreateFlagsEXT" type="VkFlags"/>
   <alias name="VkDescriptorUpdateTemplateCreateFlags" type="VkFlags"/>
   <alias name="VkCommandPoolTrimFlags" type="VkFlags"/>
   <alias name="VkMemoryRequirements2KHR" type="VkMemoryRequirements2"/>
   <alias name="VkRenderPassCreateFlags" type="VkFlags"/>
   <alias name="VkFramebufferCreateFlags" type="VkFlags"/>
   <alias name="VkDescriptorPoolResetFlags" type="VkFlags"/>
   <alias name="VkPipelineLayoutCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineShaderStageCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineDynamicStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineColorBlendStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineDepthStencilStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineMultisampleStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineRasterizationStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineViewportStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineTessellationStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineInputAssemblyStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineVertexInputStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineCacheCreateFlags" type="VkFlags"/>
   <alias name="VkShaderModuleCreateFlags" type="VkFlags"/>
   <alias name="VkBufferViewCreateFlags" type="VkFlags"/>
   <alias name="VkQueryPoolCreateFlags" type="VkFlags"/>
   <alias name="VkEventCreateFlags" type="VkFlags"/>
   <alias name="VkSemaphoreCreateFlags" type="VkFlags"/>
   <alias name="VkMemoryMapFlags" type="VkFlags"/>
   <alias name="VkDeviceCreateFlags" type="VkFlags"/>
   <alias name="VkInstanceCreateFlags" type="VkFlags"/>
   <base name="VkBool32" type="uint32_t"/>
   <base name="VkFlags" type="uint32_t"/>
   <base name="VkDeviceSize" type="uint64_t"/>
   <base name="VkSampleMask" type="uint32_t"/>
   <bitmask flags="VkImageUsageFlagBits" name="VkImageUsageFlags"/>
   <bitmask flags="VkCompositeAlphaFlagBitsKHR" name="VkCompositeAlphaFlagsKHR"/>
   <bitmask flags="VkSurfaceTransformFlagBitsKHR" name="VkSurfaceTransformFlagsKHR"/>
   <bitmask flags="VkDeviceGroupPresentModeFlagBitsKHR" name="VkDeviceGroupPresentModeFlagsKHR"/>
   <bitmask flags="VkSwapchainCreateFlagBitsKHR" name="VkSwapchainCreateFlagsKHR"/>
   <bitmask flags="VkDebugUtilsMessageTypeFlagBitsEXT" name="VkDebugUtilsMessageTypeFlagsEXT"/>
   <bitmask flags="VkDebugUtilsMessageSeverityFlagBitsEXT" name="VkDebugUtilsMessageSeverityFlagsEXT"/>
   <bitmask flags="VkShaderStageFlagBits" name="VkShaderStageFlags"/>
   <bitmask flags="VkDescriptorSetLayoutCreateFlagBits" name="VkDescriptorSetLayoutCreateFlags"/>
   <bitmask flags="VkExternalSemaphoreFeatureFlagBits" name="VkExternalSemaphoreFeatureFlags"/>
   <bitmask flags="VkExternalSemaphoreHandleTypeFlagBits" name="VkExternalSemaphoreHandleTypeFlags"/>
   <bitmask flags="VkSemaphoreImportFlagBits" name="VkSemaphoreImportFlags"/>
   <bitmask flags="VkExternalFenceHandleTypeFlagBits" name="VkExternalFenceHandleTypeFlags"/>
   <bitmask flags="VkFenceImportFlagBits" name="VkFenceImportFlags"/>
   <bitmask flags="VkExternalFenceFeatureFlagBits" name="VkExternalFenceFeatureFlags"/>
   <bitmask flags="VkExternalMemoryHandleTypeFlagBits" name="VkExternalMemoryHandleTypeFlags"/>
   <bitmask flags="VkExternalMemoryFeatureFlagBits" name="VkExternalMemoryFeatureFlags"/>
   <bitmask flags="VkBufferUsageFlagBits" name="VkBufferUsageFlags"/>
   <bitmask flags="VkBufferCreateFlagBits" name="VkBufferCreateFlags"/>
   <bitmask flags="VkDeviceQueueCreateFlagBits" name="VkDeviceQueueCreateFlags"/>
   <bitmask flags="VkImageAspectFlagBits" name="VkImageAspectFlags"/>
   <bitmask flags="VkSparseImageFormatFlagBits" name="VkSparseImageFormatFlags"/>
   <bitmask flags="VkMemoryHeapFlagBits" name="VkMemoryHeapFlags"/>
   <bitmask flags="VkMemoryPropertyFlagBits" name="VkMemoryPropertyFlags"/>
   <bitmask flags="VkQueueFlagBits" name="VkQueueFlags"/>
   <bitmask flags="VkSampleCountFlagBits" name="VkSampleCountFlags"/>
   <bitmask flags="VkImageCreateFlagBits" name="VkImageCreateFlags"/>
   <bitmask flags="VkFormatFeatureFlagBits" name="VkFormatFeatureFlags"/>
   <bitmask flags="VkPeerMemoryFeatureFlagBits" name="VkPeerMemoryFeatureFlags"/>
   <bitmask flags="VkMemoryAllocateFlagBits" name="VkMemoryAllocateFlags"/>
   <bitmask flags="VkSubgroupFeatureFlagBits" name="VkSubgroupFeatureFlags"/>
   <bitmask flags="VkAccessFlagBits" name="VkAccessFlags"/>
   <bitmask flags="VkQueryResultFlagBits" name="VkQueryResultFlags"/>
   <bitmask flags="VkQueryControlFlagBits" name="VkQueryControlFlags"/>
   <bitmask flags="VkDependencyFlagBits" name="VkDependencyFlags"/>
   <bitmask flags="VkPipelineStageFlagBits" name="VkPipelineStageFlags"/>
   <bitmask flags="VkStencilFaceFlagBits" name="VkStencilFaceFlags"/>
   <bitmask flags="VkCommandBufferResetFlagBits" name="VkCommandBufferResetFlags"/>
   <bitmask flags="VkQueryPipelineStatisticFlagBits" name="VkQueryPipelineStatisticFlags"/>
   <bitmask flags="VkCommandBufferUsageFlagBits" name="VkCommandBufferUsageFlags"/>
   <bitmask flags="VkCommandPoolResetFlagBits" name="VkCommandPoolResetFlags"/>
   <bitmask flags="VkCommandPoolCreateFlagBits" name="VkCommandPoolCreateFlags"/>
   <bitmask flags="VkSubpassDescriptionFlagBits" name="VkSubpassDescriptionFlags"/>
   <bitmask flags="VkAttachmentDescriptionFlagBits" name="VkAttachmentDescriptionFlags"/>
   <bitmask flags="VkDescriptorPoolCreateFlagBits" name="VkDescriptorPoolCreateFlags"/>
   <bitmask flags="VkSamplerCreateFlagBits" name="VkSamplerCreateFlags"/>
   <bitmask flags="VkPipelineCreateFlagBits" name="VkPipelineCreateFlags"/>
   <bitmask flags="VkColorComponentFlagBits" name="VkColorComponentFlags"/>
   <bitmask flags="VkCullModeFlagBits" name="VkCullModeFlags"/>
   <bitmask flags="VkImageViewCreateFlagBits" name="VkImageViewCreateFlags"/>
   <bitmask flags="VkFenceCreateFlagBits" name="VkFenceCreateFlags"/>
   <bitmask flags="VkSparseMemoryBindFlagBits" name="VkSparseMemoryBindFlags"/>
   <command name="vkGetPhysicalDeviceWin32PresentationSupportKHR">
      <return-type>
         <type const="False">VkBool32</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="queueFamilyIndex">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCreateWin32SurfaceKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkWin32SurfaceCreateInfoKHR</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSurface">
         <pointer const="False">
            <type const="False">VkSurfaceKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSurfacePresentModesKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="surface">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pPresentModeCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pPresentModes">
         <pointer const="False">
            <type const="False">VkPresentModeKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSurfaceFormatsKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="surface">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pSurfaceFormatCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pSurfaceFormats">
         <pointer const="False">
            <type const="False">VkSurfaceFormatKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="surface">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pSurfaceCapabilities">
         <pointer const="False">
            <type const="False">VkSurfaceCapabilitiesKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSurfaceSupportKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="queueFamilyIndex">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="surface">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pSupported">
         <pointer const="False">
            <type const="False">VkBool32</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySurfaceKHR">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="surface">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAcquireNextImage2KHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAcquireInfo">
         <pointer const="False">
            <type const="True">VkAcquireNextImageInfoKHR</type>
         </pointer>
      </arg>
      <arg name="pImageIndex">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDevicePresentRectanglesKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="surface">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pRectCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pRects">
         <pointer const="False">
            <type const="False">VkRect2D</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetDeviceGroupSurfacePresentModesKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="surface">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pModes">
         <pointer const="False">
            <type const="False">VkDeviceGroupPresentModeFlagsKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetDeviceGroupPresentCapabilitiesKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pDeviceGroupPresentCapabilities">
         <pointer const="False">
            <type const="False">VkDeviceGroupPresentCapabilitiesKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkQueuePresentKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="queue">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="pPresentInfo">
         <pointer const="False">
            <type const="True">VkPresentInfoKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAcquireNextImageKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="swapchain">
         <type const="False">VkSwapchainKHR</type>
      </arg>
      <arg name="timeout">
         <type const="False">uint64_t</type>
      </arg>
      <arg name="semaphore">
         <type const="False">VkSemaphore</type>
      </arg>
      <arg name="fence">
         <type const="False">VkFence</type>
      </arg>
      <arg name="pImageIndex">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetSwapchainImagesKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="swapchain">
         <type const="False">VkSwapchainKHR</type>
      </arg>
      <arg name="pSwapchainImageCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pSwapchainImages">
         <pointer const="False">
            <type const="False">VkImage</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySwapchainKHR">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="swapchain">
         <type const="False">VkSwapchainKHR</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateSwapchainKHR">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkSwapchainCreateInfoKHR</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSwapchain">
         <pointer const="False">
            <type const="False">VkSwapchainKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkSubmitDebugUtilsMessageEXT">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="messageSeverity">
         <type const="False">VkDebugUtilsMessageSeverityFlagBitsEXT</type>
      </arg>
      <arg name="messageTypes">
         <type const="False">VkDebugUtilsMessageTypeFlagsEXT</type>
      </arg>
      <arg name="pCallbackData">
         <pointer const="False">
            <type const="True">VkDebugUtilsMessengerCallbackDataEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyDebugUtilsMessengerEXT">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="messenger">
         <type const="False">VkDebugUtilsMessengerEXT</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDebugUtilsMessengerEXT">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkDebugUtilsMessengerCreateInfoEXT</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pMessenger">
         <pointer const="False">
            <type const="False">VkDebugUtilsMessengerEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdInsertDebugUtilsLabelEXT">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pLabelInfo">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdEndDebugUtilsLabelEXT">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
   </command>
   <command name="vkCmdBeginDebugUtilsLabelEXT">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pLabelInfo">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkQueueInsertDebugUtilsLabelEXT">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="queue">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="pLabelInfo">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkQueueEndDebugUtilsLabelEXT">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="queue">
         <type const="False">VkQueue</type>
      </arg>
   </command>
   <command name="vkQueueBeginDebugUtilsLabelEXT">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="queue">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="pLabelInfo">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkSetDebugUtilsObjectTagEXT">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pTagInfo">
         <pointer const="False">
            <type const="True">VkDebugUtilsObjectTagInfoEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkSetDebugUtilsObjectNameEXT">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pNameInfo">
         <pointer const="False">
            <type const="True">VkDebugUtilsObjectNameInfoEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetDescriptorSetLayoutSupport">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayoutCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pSupport">
         <pointer const="False">
            <type const="False">VkDescriptorSetLayoutSupport</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceExternalSemaphoreProperties">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pExternalSemaphoreInfo">
         <pointer const="False">
            <type const="True">VkPhysicalDeviceExternalSemaphoreInfo</type>
         </pointer>
      </arg>
      <arg name="pExternalSemaphoreProperties">
         <pointer const="False">
            <type const="False">VkExternalSemaphoreProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceExternalFenceProperties">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pExternalFenceInfo">
         <pointer const="False">
            <type const="True">VkPhysicalDeviceExternalFenceInfo</type>
         </pointer>
      </arg>
      <arg name="pExternalFenceProperties">
         <pointer const="False">
            <type const="False">VkExternalFenceProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceExternalBufferProperties">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pExternalBufferInfo">
         <pointer const="False">
            <type const="True">VkPhysicalDeviceExternalBufferInfo</type>
         </pointer>
      </arg>
      <arg name="pExternalBufferProperties">
         <pointer const="False">
            <type const="False">VkExternalBufferProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkUpdateDescriptorSetWithTemplate">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorSet">
         <type const="False">VkDescriptorSet</type>
      </arg>
      <arg name="descriptorUpdateTemplate">
         <type const="False">VkDescriptorUpdateTemplate</type>
      </arg>
      <arg name="pData">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyDescriptorUpdateTemplate">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorUpdateTemplate">
         <type const="False">VkDescriptorUpdateTemplate</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDescriptorUpdateTemplate">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkDescriptorUpdateTemplateCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pDescriptorUpdateTemplate">
         <pointer const="False">
            <type const="False">VkDescriptorUpdateTemplate</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySamplerYcbcrConversion">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="ycbcrConversion">
         <type const="False">VkSamplerYcbcrConversion</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateSamplerYcbcrConversion">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkSamplerYcbcrConversionCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pYcbcrConversion">
         <pointer const="False">
            <type const="False">VkSamplerYcbcrConversion</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetDeviceQueue2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pQueueInfo">
         <pointer const="False">
            <type const="True">VkDeviceQueueInfo2</type>
         </pointer>
      </arg>
      <arg name="pQueue">
         <pointer const="False">
            <type const="False">VkQueue</type>
         </pointer>
      </arg>
   </command>
   <command name="vkTrimCommandPool">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="commandPool">
         <type const="False">VkCommandPool</type>
      </arg>
      <arg name="flags">
         <type const="False">VkCommandPoolTrimFlags</type>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSparseImageFormatProperties2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pFormatInfo">
         <pointer const="False">
            <type const="True">VkPhysicalDeviceSparseImageFormatInfo2</type>
         </pointer>
      </arg>
      <arg name="pPropertyCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties">
         <pointer const="False">
            <type const="False">VkSparseImageFormatProperties2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceMemoryProperties2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pMemoryProperties">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceMemoryProperties2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceQueueFamilyProperties2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pQueueFamilyPropertyCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pQueueFamilyProperties">
         <pointer const="False">
            <type const="False">VkQueueFamilyProperties2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceImageFormatProperties2">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pImageFormatInfo">
         <pointer const="False">
            <type const="True">VkPhysicalDeviceImageFormatInfo2</type>
         </pointer>
      </arg>
      <arg name="pImageFormatProperties">
         <pointer const="False">
            <type const="False">VkImageFormatProperties2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceFormatProperties2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="format">
         <type const="False">VkFormat</type>
      </arg>
      <arg name="pFormatProperties">
         <pointer const="False">
            <type const="False">VkFormatProperties2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceProperties2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pProperties">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceProperties2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceFeatures2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pFeatures">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceFeatures2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetImageSparseMemoryRequirements2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pInfo">
         <pointer const="False">
            <type const="True">VkImageSparseMemoryRequirementsInfo2</type>
         </pointer>
      </arg>
      <arg name="pSparseMemoryRequirementCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pSparseMemoryRequirements">
         <pointer const="False">
            <type const="False">VkSparseImageMemoryRequirements2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetBufferMemoryRequirements2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pInfo">
         <pointer const="False">
            <type const="True">VkBufferMemoryRequirementsInfo2</type>
         </pointer>
      </arg>
      <arg name="pMemoryRequirements">
         <pointer const="False">
            <type const="False">VkMemoryRequirements2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetImageMemoryRequirements2">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pInfo">
         <pointer const="False">
            <type const="True">VkImageMemoryRequirementsInfo2</type>
         </pointer>
      </arg>
      <arg name="pMemoryRequirements">
         <pointer const="False">
            <type const="False">VkMemoryRequirements2</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumeratePhysicalDeviceGroups">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pPhysicalDeviceGroupCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pPhysicalDeviceGroupProperties">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceGroupProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdDispatchBase">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="baseGroupX">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="baseGroupY">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="baseGroupZ">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="groupCountX">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="groupCountY">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="groupCountZ">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdSetDeviceMask">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="deviceMask">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkGetDeviceGroupPeerMemoryFeatures">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="heapIndex">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="localDeviceIndex">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="remoteDeviceIndex">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pPeerMemoryFeatures">
         <pointer const="False">
            <type const="False">VkPeerMemoryFeatureFlags</type>
         </pointer>
      </arg>
   </command>
   <command name="vkBindImageMemory2">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="bindInfoCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBindInfos">
         <pointer const="False">
            <type const="True">VkBindImageMemoryInfo</type>
         </pointer>
      </arg>
   </command>
   <command name="vkBindBufferMemory2">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="bindInfoCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBindInfos">
         <pointer const="False">
            <type const="True">VkBindBufferMemoryInfo</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateInstanceVersion">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="pApiVersion">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdExecuteCommands">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="commandBufferCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pCommandBuffers">
         <pointer const="False">
            <type const="True">VkCommandBuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdEndRenderPass">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
   </command>
   <command name="vkCmdNextSubpass">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="contents">
         <type const="False">VkSubpassContents</type>
      </arg>
   </command>
   <command name="vkCmdBeginRenderPass">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pRenderPassBegin">
         <pointer const="False">
            <type const="True">VkRenderPassBeginInfo</type>
         </pointer>
      </arg>
      <arg name="contents">
         <type const="False">VkSubpassContents</type>
      </arg>
   </command>
   <command name="vkCmdPushConstants">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="layout">
         <type const="False">VkPipelineLayout</type>
      </arg>
      <arg name="stageFlags">
         <type const="False">VkShaderStageFlags</type>
      </arg>
      <arg name="offset">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="size">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pValues">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdCopyQueryPoolResults">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="queryPool">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="firstQuery">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="queryCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="dstBuffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstOffset">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="stride">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="flags">
         <type const="False">VkQueryResultFlags</type>
      </arg>
   </command>
   <command name="vkCmdWriteTimestamp">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pipelineStage">
         <type const="False">VkPipelineStageFlagBits</type>
      </arg>
      <arg name="queryPool">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="query">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdResetQueryPool">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="queryPool">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="firstQuery">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="queryCount">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdEndQuery">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="queryPool">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="query">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdBeginQuery">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="queryPool">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="query">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="flags">
         <type const="False">VkQueryControlFlags</type>
      </arg>
   </command>
   <command name="vkCmdPipelineBarrier">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcStageMask">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
      <arg name="dstStageMask">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
      <arg name="dependencyFlags">
         <type const="False">VkDependencyFlags</type>
      </arg>
      <arg name="memoryBarrierCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pMemoryBarriers">
         <pointer const="False">
            <type const="True">VkMemoryBarrier</type>
         </pointer>
      </arg>
      <arg name="bufferMemoryBarrierCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBufferMemoryBarriers">
         <pointer const="False">
            <type const="True">VkBufferMemoryBarrier</type>
         </pointer>
      </arg>
      <arg name="imageMemoryBarrierCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pImageMemoryBarriers">
         <pointer const="False">
            <type const="True">VkImageMemoryBarrier</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdWaitEvents">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="eventCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pEvents">
         <pointer const="False">
            <type const="True">VkEvent</type>
         </pointer>
      </arg>
      <arg name="srcStageMask">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
      <arg name="dstStageMask">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
      <arg name="memoryBarrierCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pMemoryBarriers">
         <pointer const="False">
            <type const="True">VkMemoryBarrier</type>
         </pointer>
      </arg>
      <arg name="bufferMemoryBarrierCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBufferMemoryBarriers">
         <pointer const="False">
            <type const="True">VkBufferMemoryBarrier</type>
         </pointer>
      </arg>
      <arg name="imageMemoryBarrierCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pImageMemoryBarriers">
         <pointer const="False">
            <type const="True">VkImageMemoryBarrier</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdResetEvent">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="event">
         <type const="False">VkEvent</type>
      </arg>
      <arg name="stageMask">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
   </command>
   <command name="vkCmdSetEvent">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="event">
         <type const="False">VkEvent</type>
      </arg>
      <arg name="stageMask">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
   </command>
   <command name="vkCmdResolveImage">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcImage">
         <type const="False">VkImage</type>
      </arg>
      <arg name="srcImageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="dstImage">
         <type const="False">VkImage</type>
      </arg>
      <arg name="dstImageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="regionCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions">
         <pointer const="False">
            <type const="True">VkImageResolve</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdClearAttachments">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="attachmentCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pAttachments">
         <pointer const="False">
            <type const="True">VkClearAttachment</type>
         </pointer>
      </arg>
      <arg name="rectCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRects">
         <pointer const="False">
            <type const="True">VkClearRect</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdClearDepthStencilImage">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="image">
         <type const="False">VkImage</type>
      </arg>
      <arg name="imageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="pDepthStencil">
         <pointer const="False">
            <type const="True">VkClearDepthStencilValue</type>
         </pointer>
      </arg>
      <arg name="rangeCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRanges">
         <pointer const="False">
            <type const="True">VkImageSubresourceRange</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdClearColorImage">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="image">
         <type const="False">VkImage</type>
      </arg>
      <arg name="imageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="pColor">
         <pointer const="False">
            <type const="True">VkClearColorValue</type>
         </pointer>
      </arg>
      <arg name="rangeCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRanges">
         <pointer const="False">
            <type const="True">VkImageSubresourceRange</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdFillBuffer">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="dstBuffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstOffset">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="size">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="data">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdUpdateBuffer">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="dstBuffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstOffset">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="dataSize">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="pData">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdCopyImageToBuffer">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcImage">
         <type const="False">VkImage</type>
      </arg>
      <arg name="srcImageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="dstBuffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="regionCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions">
         <pointer const="False">
            <type const="True">VkBufferImageCopy</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdCopyBufferToImage">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcBuffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstImage">
         <type const="False">VkImage</type>
      </arg>
      <arg name="dstImageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="regionCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions">
         <pointer const="False">
            <type const="True">VkBufferImageCopy</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdBlitImage">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcImage">
         <type const="False">VkImage</type>
      </arg>
      <arg name="srcImageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="dstImage">
         <type const="False">VkImage</type>
      </arg>
      <arg name="dstImageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="regionCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions">
         <pointer const="False">
            <type const="True">VkImageBlit</type>
         </pointer>
      </arg>
      <arg name="filter">
         <type const="False">VkFilter</type>
      </arg>
   </command>
   <command name="vkCmdCopyImage">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcImage">
         <type const="False">VkImage</type>
      </arg>
      <arg name="srcImageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="dstImage">
         <type const="False">VkImage</type>
      </arg>
      <arg name="dstImageLayout">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="regionCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions">
         <pointer const="False">
            <type const="True">VkImageCopy</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdCopyBuffer">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcBuffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstBuffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="regionCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions">
         <pointer const="False">
            <type const="True">VkBufferCopy</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdDispatchIndirect">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="buffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="offset">
         <type const="False">VkDeviceSize</type>
      </arg>
   </command>
   <command name="vkCmdDispatch">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="groupCountX">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="groupCountY">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="groupCountZ">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdDrawIndexedIndirect">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="buffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="offset">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="drawCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="stride">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdDrawIndirect">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="buffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="offset">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="drawCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="stride">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdDrawIndexed">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="indexCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="instanceCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="firstIndex">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="vertexOffset">
         <type const="False">int32_t</type>
      </arg>
      <arg name="firstInstance">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdDraw">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="vertexCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="instanceCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="firstVertex">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="firstInstance">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdBindVertexBuffers">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="firstBinding">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="bindingCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBuffers">
         <pointer const="False">
            <type const="True">VkBuffer</type>
         </pointer>
      </arg>
      <arg name="pOffsets">
         <pointer const="False">
            <type const="True">VkDeviceSize</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdBindIndexBuffer">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="buffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="offset">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="indexType">
         <type const="False">VkIndexType</type>
      </arg>
   </command>
   <command name="vkCmdBindDescriptorSets">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pipelineBindPoint">
         <type const="False">VkPipelineBindPoint</type>
      </arg>
      <arg name="layout">
         <type const="False">VkPipelineLayout</type>
      </arg>
      <arg name="firstSet">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="descriptorSetCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDescriptorSets">
         <pointer const="False">
            <type const="True">VkDescriptorSet</type>
         </pointer>
      </arg>
      <arg name="dynamicOffsetCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDynamicOffsets">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdSetStencilReference">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="faceMask">
         <type const="False">VkStencilFaceFlags</type>
      </arg>
      <arg name="reference">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdSetStencilWriteMask">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="faceMask">
         <type const="False">VkStencilFaceFlags</type>
      </arg>
      <arg name="writeMask">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdSetStencilCompareMask">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="faceMask">
         <type const="False">VkStencilFaceFlags</type>
      </arg>
      <arg name="compareMask">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdSetDepthBounds">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="minDepthBounds">
         <type const="False">float</type>
      </arg>
      <arg name="maxDepthBounds">
         <type const="False">float</type>
      </arg>
   </command>
   <command name="vkCmdSetBlendConstants">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="blendConstants">
         <array length="4">
            <type const="True">float</type>
         </array>
      </arg>
   </command>
   <command name="vkCmdSetDepthBias">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="depthBiasConstantFactor">
         <type const="False">float</type>
      </arg>
      <arg name="depthBiasClamp">
         <type const="False">float</type>
      </arg>
      <arg name="depthBiasSlopeFactor">
         <type const="False">float</type>
      </arg>
   </command>
   <command name="vkCmdSetLineWidth">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="lineWidth">
         <type const="False">float</type>
      </arg>
   </command>
   <command name="vkCmdSetScissor">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="firstScissor">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="scissorCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pScissors">
         <pointer const="False">
            <type const="True">VkRect2D</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdSetViewport">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="firstViewport">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="viewportCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pViewports">
         <pointer const="False">
            <type const="True">VkViewport</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdBindPipeline">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pipelineBindPoint">
         <type const="False">VkPipelineBindPoint</type>
      </arg>
      <arg name="pipeline">
         <type const="False">VkPipeline</type>
      </arg>
   </command>
   <command name="vkResetCommandBuffer">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="flags">
         <type const="False">VkCommandBufferResetFlags</type>
      </arg>
   </command>
   <command name="vkEndCommandBuffer">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
   </command>
   <command name="vkBeginCommandBuffer">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="commandBuffer">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pBeginInfo">
         <pointer const="False">
            <type const="True">VkCommandBufferBeginInfo</type>
         </pointer>
      </arg>
   </command>
   <command name="vkFreeCommandBuffers">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="commandPool">
         <type const="False">VkCommandPool</type>
      </arg>
      <arg name="commandBufferCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pCommandBuffers">
         <pointer const="False">
            <type const="True">VkCommandBuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAllocateCommandBuffers">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAllocateInfo">
         <pointer const="False">
            <type const="True">VkCommandBufferAllocateInfo</type>
         </pointer>
      </arg>
      <arg name="pCommandBuffers">
         <pointer const="False">
            <type const="False">VkCommandBuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkResetCommandPool">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="commandPool">
         <type const="False">VkCommandPool</type>
      </arg>
      <arg name="flags">
         <type const="False">VkCommandPoolResetFlags</type>
      </arg>
   </command>
   <command name="vkDestroyCommandPool">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="commandPool">
         <type const="False">VkCommandPool</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateCommandPool">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkCommandPoolCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pCommandPool">
         <pointer const="False">
            <type const="False">VkCommandPool</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetRenderAreaGranularity">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="renderPass">
         <type const="False">VkRenderPass</type>
      </arg>
      <arg name="pGranularity">
         <pointer const="False">
            <type const="False">VkExtent2D</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyRenderPass">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="renderPass">
         <type const="False">VkRenderPass</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateRenderPass">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkRenderPassCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pRenderPass">
         <pointer const="False">
            <type const="False">VkRenderPass</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyFramebuffer">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="framebuffer">
         <type const="False">VkFramebuffer</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateFramebuffer">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkFramebufferCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pFramebuffer">
         <pointer const="False">
            <type const="False">VkFramebuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkUpdateDescriptorSets">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorWriteCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDescriptorWrites">
         <pointer const="False">
            <type const="True">VkWriteDescriptorSet</type>
         </pointer>
      </arg>
      <arg name="descriptorCopyCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDescriptorCopies">
         <pointer const="False">
            <type const="True">VkCopyDescriptorSet</type>
         </pointer>
      </arg>
   </command>
   <command name="vkFreeDescriptorSets">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorPool">
         <type const="False">VkDescriptorPool</type>
      </arg>
      <arg name="descriptorSetCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDescriptorSets">
         <pointer const="False">
            <type const="True">VkDescriptorSet</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAllocateDescriptorSets">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAllocateInfo">
         <pointer const="False">
            <type const="True">VkDescriptorSetAllocateInfo</type>
         </pointer>
      </arg>
      <arg name="pDescriptorSets">
         <pointer const="False">
            <type const="False">VkDescriptorSet</type>
         </pointer>
      </arg>
   </command>
   <command name="vkResetDescriptorPool">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorPool">
         <type const="False">VkDescriptorPool</type>
      </arg>
      <arg name="flags">
         <type const="False">VkDescriptorPoolResetFlags</type>
      </arg>
   </command>
   <command name="vkDestroyDescriptorPool">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorPool">
         <type const="False">VkDescriptorPool</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDescriptorPool">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkDescriptorPoolCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pDescriptorPool">
         <pointer const="False">
            <type const="False">VkDescriptorPool</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyDescriptorSetLayout">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorSetLayout">
         <type const="False">VkDescriptorSetLayout</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDescriptorSetLayout">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayoutCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSetLayout">
         <pointer const="False">
            <type const="False">VkDescriptorSetLayout</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySampler">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="sampler">
         <type const="False">VkSampler</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateSampler">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkSamplerCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSampler">
         <pointer const="False">
            <type const="False">VkSampler</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyPipelineLayout">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineLayout">
         <type const="False">VkPipelineLayout</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreatePipelineLayout">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkPipelineLayoutCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pPipelineLayout">
         <pointer const="False">
            <type const="False">VkPipelineLayout</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyPipeline">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipeline">
         <type const="False">VkPipeline</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateComputePipelines">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineCache">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="createInfoCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pCreateInfos">
         <pointer const="False">
            <type const="True">VkComputePipelineCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pPipelines">
         <pointer const="False">
            <type const="False">VkPipeline</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateGraphicsPipelines">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineCache">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="createInfoCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pCreateInfos">
         <pointer const="False">
            <type const="True">VkGraphicsPipelineCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pPipelines">
         <pointer const="False">
            <type const="False">VkPipeline</type>
         </pointer>
      </arg>
   </command>
   <command name="vkMergePipelineCaches">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="dstCache">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="srcCacheCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pSrcCaches">
         <pointer const="False">
            <type const="True">VkPipelineCache</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPipelineCacheData">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineCache">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="pDataSize">
         <pointer const="False">
            <type const="False">size_t</type>
         </pointer>
      </arg>
      <arg name="pData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyPipelineCache">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineCache">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreatePipelineCache">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkPipelineCacheCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pPipelineCache">
         <pointer const="False">
            <type const="False">VkPipelineCache</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyShaderModule">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="shaderModule">
         <type const="False">VkShaderModule</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateShaderModule">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkShaderModuleCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pShaderModule">
         <pointer const="False">
            <type const="False">VkShaderModule</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyImageView">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="imageView">
         <type const="False">VkImageView</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateImageView">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkImageViewCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pView">
         <pointer const="False">
            <type const="False">VkImageView</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetImageSubresourceLayout">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image">
         <type const="False">VkImage</type>
      </arg>
      <arg name="pSubresource">
         <pointer const="False">
            <type const="True">VkImageSubresource</type>
         </pointer>
      </arg>
      <arg name="pLayout">
         <pointer const="False">
            <type const="False">VkSubresourceLayout</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyImage">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image">
         <type const="False">VkImage</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateImage">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkImageCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pImage">
         <pointer const="False">
            <type const="False">VkImage</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyBufferView">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="bufferView">
         <type const="False">VkBufferView</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateBufferView">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkBufferViewCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pView">
         <pointer const="False">
            <type const="False">VkBufferView</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyBuffer">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="buffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateBuffer">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkBufferCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pBuffer">
         <pointer const="False">
            <type const="False">VkBuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetQueryPoolResults">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="queryPool">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="firstQuery">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="queryCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="dataSize">
         <type const="False">size_t</type>
      </arg>
      <arg name="pData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="stride">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="flags">
         <type const="False">VkQueryResultFlags</type>
      </arg>
   </command>
   <command name="vkDestroyQueryPool">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="queryPool">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateQueryPool">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkQueryPoolCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pQueryPool">
         <pointer const="False">
            <type const="False">VkQueryPool</type>
         </pointer>
      </arg>
   </command>
   <command name="vkResetEvent">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="event">
         <type const="False">VkEvent</type>
      </arg>
   </command>
   <command name="vkSetEvent">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="event">
         <type const="False">VkEvent</type>
      </arg>
   </command>
   <command name="vkGetEventStatus">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="event">
         <type const="False">VkEvent</type>
      </arg>
   </command>
   <command name="vkDestroyEvent">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="event">
         <type const="False">VkEvent</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateEvent">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkEventCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pEvent">
         <pointer const="False">
            <type const="False">VkEvent</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySemaphore">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="semaphore">
         <type const="False">VkSemaphore</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateSemaphore">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkSemaphoreCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSemaphore">
         <pointer const="False">
            <type const="False">VkSemaphore</type>
         </pointer>
      </arg>
   </command>
   <command name="vkWaitForFences">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="fenceCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pFences">
         <pointer const="False">
            <type const="True">VkFence</type>
         </pointer>
      </arg>
      <arg name="waitAll">
         <type const="False">VkBool32</type>
      </arg>
      <arg name="timeout">
         <type const="False">uint64_t</type>
      </arg>
   </command>
   <command name="vkGetFenceStatus">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="fence">
         <type const="False">VkFence</type>
      </arg>
   </command>
   <command name="vkResetFences">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="fenceCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pFences">
         <pointer const="False">
            <type const="True">VkFence</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyFence">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="fence">
         <type const="False">VkFence</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateFence">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkFenceCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pFence">
         <pointer const="False">
            <type const="False">VkFence</type>
         </pointer>
      </arg>
   </command>
   <command name="vkQueueBindSparse">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="queue">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="bindInfoCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBindInfo">
         <pointer const="False">
            <type const="True">VkBindSparseInfo</type>
         </pointer>
      </arg>
      <arg name="fence">
         <type const="False">VkFence</type>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSparseImageFormatProperties">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="format">
         <type const="False">VkFormat</type>
      </arg>
      <arg name="type">
         <type const="False">VkImageType</type>
      </arg>
      <arg name="samples">
         <type const="False">VkSampleCountFlagBits</type>
      </arg>
      <arg name="usage">
         <type const="False">VkImageUsageFlags</type>
      </arg>
      <arg name="tiling">
         <type const="False">VkImageTiling</type>
      </arg>
      <arg name="pPropertyCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties">
         <pointer const="False">
            <type const="False">VkSparseImageFormatProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetImageSparseMemoryRequirements">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image">
         <type const="False">VkImage</type>
      </arg>
      <arg name="pSparseMemoryRequirementCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pSparseMemoryRequirements">
         <pointer const="False">
            <type const="False">VkSparseImageMemoryRequirements</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetImageMemoryRequirements">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image">
         <type const="False">VkImage</type>
      </arg>
      <arg name="pMemoryRequirements">
         <pointer const="False">
            <type const="False">VkMemoryRequirements</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetBufferMemoryRequirements">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="buffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="pMemoryRequirements">
         <pointer const="False">
            <type const="False">VkMemoryRequirements</type>
         </pointer>
      </arg>
   </command>
   <command name="vkBindImageMemory">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image">
         <type const="False">VkImage</type>
      </arg>
      <arg name="memory">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="memoryOffset">
         <type const="False">VkDeviceSize</type>
      </arg>
   </command>
   <command name="vkBindBufferMemory">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="buffer">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="memory">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="memoryOffset">
         <type const="False">VkDeviceSize</type>
      </arg>
   </command>
   <command name="vkGetDeviceMemoryCommitment">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memory">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="pCommittedMemoryInBytes">
         <pointer const="False">
            <type const="False">VkDeviceSize</type>
         </pointer>
      </arg>
   </command>
   <command name="vkInvalidateMappedMemoryRanges">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memoryRangeCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pMemoryRanges">
         <pointer const="False">
            <type const="True">VkMappedMemoryRange</type>
         </pointer>
      </arg>
   </command>
   <command name="vkFlushMappedMemoryRanges">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memoryRangeCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pMemoryRanges">
         <pointer const="False">
            <type const="True">VkMappedMemoryRange</type>
         </pointer>
      </arg>
   </command>
   <command name="vkUnmapMemory">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memory">
         <type const="False">VkDeviceMemory</type>
      </arg>
   </command>
   <command name="vkMapMemory">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memory">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="offset">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="size">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="flags">
         <type const="False">VkMemoryMapFlags</type>
      </arg>
      <arg name="ppData">
         <pointer const="False">
            <pointer const="False">
               <type const="False">void</type>
            </pointer>
         </pointer>
      </arg>
   </command>
   <command name="vkFreeMemory">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memory">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAllocateMemory">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAllocateInfo">
         <pointer const="False">
            <type const="True">VkMemoryAllocateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pMemory">
         <pointer const="False">
            <type const="False">VkDeviceMemory</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDeviceWaitIdle">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
   </command>
   <command name="vkQueueWaitIdle">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="queue">
         <type const="False">VkQueue</type>
      </arg>
   </command>
   <command name="vkQueueSubmit">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="queue">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="submitCount">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pSubmits">
         <pointer const="False">
            <type const="True">VkSubmitInfo</type>
         </pointer>
      </arg>
      <arg name="fence">
         <type const="False">VkFence</type>
      </arg>
   </command>
   <command name="vkGetDeviceQueue">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="queueFamilyIndex">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="queueIndex">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pQueue">
         <pointer const="False">
            <type const="False">VkQueue</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateDeviceLayerProperties">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pPropertyCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties">
         <pointer const="False">
            <type const="False">VkLayerProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateInstanceLayerProperties">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="pPropertyCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties">
         <pointer const="False">
            <type const="False">VkLayerProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateDeviceExtensionProperties">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pLayerName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </arg>
      <arg name="pPropertyCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties">
         <pointer const="False">
            <type const="False">VkExtensionProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateInstanceExtensionProperties">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="pLayerName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </arg>
      <arg name="pPropertyCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties">
         <pointer const="False">
            <type const="False">VkExtensionProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyDevice">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDevice">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkDeviceCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pDevice">
         <pointer const="False">
            <type const="False">VkDevice</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetDeviceProcAddr">
      <return-type>
         <type const="False">PFN_vkVoidFunction</type>
      </return-type>
      <arg name="device">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetInstanceProcAddr">
      <return-type>
         <type const="False">PFN_vkVoidFunction</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceMemoryProperties">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pMemoryProperties">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceMemoryProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceQueueFamilyProperties">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pQueueFamilyPropertyCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pQueueFamilyProperties">
         <pointer const="False">
            <type const="False">VkQueueFamilyProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceProperties">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pProperties">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceImageFormatProperties">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="format">
         <type const="False">VkFormat</type>
      </arg>
      <arg name="type">
         <type const="False">VkImageType</type>
      </arg>
      <arg name="tiling">
         <type const="False">VkImageTiling</type>
      </arg>
      <arg name="usage">
         <type const="False">VkImageUsageFlags</type>
      </arg>
      <arg name="flags">
         <type const="False">VkImageCreateFlags</type>
      </arg>
      <arg name="pImageFormatProperties">
         <pointer const="False">
            <type const="False">VkImageFormatProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceFormatProperties">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="format">
         <type const="False">VkFormat</type>
      </arg>
      <arg name="pFormatProperties">
         <pointer const="False">
            <type const="False">VkFormatProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceFeatures">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pFeatures">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceFeatures</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumeratePhysicalDevices">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pPhysicalDeviceCount">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pPhysicalDevices">
         <pointer const="False">
            <type const="False">VkPhysicalDevice</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyInstance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="instance">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateInstance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="pCreateInfo">
         <pointer const="False">
            <type const="True">VkInstanceCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pInstance">
         <pointer const="False">
            <type const="False">VkInstance</type>
         </pointer>
      </arg>
   </command>
   <enum name="VkSystemAllocationScope">
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_COMMAND">0</entry>
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_OBJECT">1</entry>
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_CACHE">2</entry>
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_DEVICE">3</entry>
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE">4</entry>
   </enum>
   <enum name="VkInternalAllocationType">
      <entry name="VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE">0</entry>
   </enum>
   <enum name="VkStructureType">
      <entry name="VK_STRUCTURE_TYPE_APPLICATION_INFO">0</entry>
      <entry name="VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO">1</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO">2</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO">3</entry>
      <entry name="VK_STRUCTURE_TYPE_SUBMIT_INFO">4</entry>
      <entry name="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO">5</entry>
      <entry name="VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE">6</entry>
      <entry name="VK_STRUCTURE_TYPE_BIND_SPARSE_INFO">7</entry>
      <entry name="VK_STRUCTURE_TYPE_FENCE_CREATE_INFO">8</entry>
      <entry name="VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO">9</entry>
      <entry name="VK_STRUCTURE_TYPE_EVENT_CREATE_INFO">10</entry>
      <entry name="VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO">11</entry>
      <entry name="VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO">12</entry>
      <entry name="VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO">13</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO">14</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO">15</entry>
      <entry name="VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO">16</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO">17</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO">18</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO">19</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO">20</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO">21</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO">22</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO">23</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO">24</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO">25</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO">26</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO">27</entry>
      <entry name="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO">28</entry>
      <entry name="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO">29</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO">30</entry>
      <entry name="VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO">31</entry>
      <entry name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO">32</entry>
      <entry name="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO">33</entry>
      <entry name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO">34</entry>
      <entry name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET">35</entry>
      <entry name="VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET">36</entry>
      <entry name="VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO">37</entry>
      <entry name="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO">38</entry>
      <entry name="VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO">39</entry>
      <entry name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO">40</entry>
      <entry name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO">41</entry>
      <entry name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO">42</entry>
      <entry name="VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO">43</entry>
      <entry name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER">44</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER">45</entry>
      <entry name="VK_STRUCTURE_TYPE_MEMORY_BARRIER">46</entry>
      <entry name="VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO">47</entry>
      <entry name="VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO">48</entry>
      <entry name="VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR">1000001000</entry>
      <entry name="VK_STRUCTURE_TYPE_PRESENT_INFO_KHR">1000001001</entry>
      <entry name="VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR">1000009000</entry>
      <entry name="VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO">1000053000</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES">1000053001</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES">1000053002</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2">1000059000</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2">1000059001</entry>
      <entry name="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2">1000059002</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2">1000059003</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2">1000059004</entry>
      <entry name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2">1000059005</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2">1000059006</entry>
      <entry name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2">1000059007</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2">1000059008</entry>
      <entry name="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO">1000060000</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO">1000060003</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO">1000060004</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO">1000060005</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO">1000060006</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR">1000060007</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR">1000060008</entry>
      <entry name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR">1000060009</entry>
      <entry name="VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR">1000060010</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR">1000060011</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR">1000060012</entry>
      <entry name="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO">1000060013</entry>
      <entry name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO">1000060014</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES">1000063000</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES">1000070000</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO">1000070001</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO">1000071000</entry>
      <entry name="VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES">1000071001</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO">1000071002</entry>
      <entry name="VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES">1000071003</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES">1000071004</entry>
      <entry name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO">1000072000</entry>
      <entry name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO">1000072001</entry>
      <entry name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO">1000072002</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO">1000076000</entry>
      <entry name="VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES">1000076001</entry>
      <entry name="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO">1000077000</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES">1000083000</entry>
      <entry name="VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO">1000085000</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES">1000094000</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO">1000112000</entry>
      <entry name="VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES">1000112001</entry>
      <entry name="VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO">1000113000</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES">1000117000</entry>
      <entry name="VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO">1000117001</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO">1000117002</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO">1000117003</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES">1000120000</entry>
      <entry name="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS">1000127000</entry>
      <entry name="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO">1000127001</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT">1000128000</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT">1000128001</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT">1000128002</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT">1000128003</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT">1000128004</entry>
      <entry name="VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO">1000145000</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES">1000145001</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES">1000145002</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2">1000145003</entry>
      <entry name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2">1000146000</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2">1000146001</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2">1000146002</entry>
      <entry name="VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2">1000146003</entry>
      <entry name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2">1000146004</entry>
      <entry name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO">1000156000</entry>
      <entry name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO">1000156001</entry>
      <entry name="VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO">1000156002</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO">1000156003</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES">1000156004</entry>
      <entry name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES">1000156005</entry>
      <entry name="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO">1000157000</entry>
      <entry name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO">1000157001</entry>
      <entry name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES">1000168000</entry>
      <entry name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT">1000168001</entry>
   </enum>
   <enum name="VkResult">
      <entry name="VK_ERROR_INVALID_EXTERNAL_HANDLE">-1000072003</entry>
      <entry name="VK_ERROR_OUT_OF_POOL_MEMORY">-1000069000</entry>
      <entry name="VK_ERROR_OUT_OF_DATE_KHR">-1000001004</entry>
      <entry name="VK_ERROR_NATIVE_WINDOW_IN_USE_KHR">-1000000001</entry>
      <entry name="VK_ERROR_SURFACE_LOST_KHR">-1000000000</entry>
      <entry name="VK_ERROR_FRAGMENTED_POOL">-12</entry>
      <entry name="VK_ERROR_FORMAT_NOT_SUPPORTED">-11</entry>
      <entry name="VK_ERROR_TOO_MANY_OBJECTS">-10</entry>
      <entry name="VK_ERROR_INCOMPATIBLE_DRIVER">-9</entry>
      <entry name="VK_ERROR_FEATURE_NOT_PRESENT">-8</entry>
      <entry name="VK_ERROR_EXTENSION_NOT_PRESENT">-7</entry>
      <entry name="VK_ERROR_LAYER_NOT_PRESENT">-6</entry>
      <entry name="VK_ERROR_MEMORY_MAP_FAILED">-5</entry>
      <entry name="VK_ERROR_DEVICE_LOST">-4</entry>
      <entry name="VK_ERROR_INITIALIZATION_FAILED">-3</entry>
      <entry name="VK_ERROR_OUT_OF_DEVICE_MEMORY">-2</entry>
      <entry name="VK_ERROR_OUT_OF_HOST_MEMORY">-1</entry>
      <entry name="VK_SUCCESS">0</entry>
      <entry name="VK_NOT_READY">1</entry>
      <entry name="VK_TIMEOUT">2</entry>
      <entry name="VK_EVENT_SET">3</entry>
      <entry name="VK_EVENT_RESET">4</entry>
      <entry name="VK_INCOMPLETE">5</entry>
      <entry name="VK_SUBOPTIMAL_KHR">1000001003</entry>
   </enum>
   <enum name="VkPresentModeKHR">
      <entry name="VK_PRESENT_MODE_IMMEDIATE_KHR">0</entry>
      <entry name="VK_PRESENT_MODE_MAILBOX_KHR">1</entry>
      <entry name="VK_PRESENT_MODE_FIFO_KHR">2</entry>
      <entry name="VK_PRESENT_MODE_FIFO_RELAXED_KHR">3</entry>
   </enum>
   <enum name="VkColorSpaceKHR">
      <entry name="VK_COLOR_SPACE_SRGB_NONLINEAR_KHR">0</entry>
      <entry name="VK_COLORSPACE_SRGB_NONLINEAR_KHR">0</entry>
   </enum>
   <enum name="VkFormat">
      <entry name="VK_FORMAT_UNDEFINED">0</entry>
      <entry name="VK_FORMAT_R4G4_UNORM_PACK8">1</entry>
      <entry name="VK_FORMAT_R4G4B4A4_UNORM_PACK16">2</entry>
      <entry name="VK_FORMAT_B4G4R4A4_UNORM_PACK16">3</entry>
      <entry name="VK_FORMAT_R5G6B5_UNORM_PACK16">4</entry>
      <entry name="VK_FORMAT_B5G6R5_UNORM_PACK16">5</entry>
      <entry name="VK_FORMAT_R5G5B5A1_UNORM_PACK16">6</entry>
      <entry name="VK_FORMAT_B5G5R5A1_UNORM_PACK16">7</entry>
      <entry name="VK_FORMAT_A1R5G5B5_UNORM_PACK16">8</entry>
      <entry name="VK_FORMAT_R8_UNORM">9</entry>
      <entry name="VK_FORMAT_R8_SNORM">10</entry>
      <entry name="VK_FORMAT_R8_USCALED">11</entry>
      <entry name="VK_FORMAT_R8_SSCALED">12</entry>
      <entry name="VK_FORMAT_R8_UINT">13</entry>
      <entry name="VK_FORMAT_R8_SINT">14</entry>
      <entry name="VK_FORMAT_R8_SRGB">15</entry>
      <entry name="VK_FORMAT_R8G8_UNORM">16</entry>
      <entry name="VK_FORMAT_R8G8_SNORM">17</entry>
      <entry name="VK_FORMAT_R8G8_USCALED">18</entry>
      <entry name="VK_FORMAT_R8G8_SSCALED">19</entry>
      <entry name="VK_FORMAT_R8G8_UINT">20</entry>
      <entry name="VK_FORMAT_R8G8_SINT">21</entry>
      <entry name="VK_FORMAT_R8G8_SRGB">22</entry>
      <entry name="VK_FORMAT_R8G8B8_UNORM">23</entry>
      <entry name="VK_FORMAT_R8G8B8_SNORM">24</entry>
      <entry name="VK_FORMAT_R8G8B8_USCALED">25</entry>
      <entry name="VK_FORMAT_R8G8B8_SSCALED">26</entry>
      <entry name="VK_FORMAT_R8G8B8_UINT">27</entry>
      <entry name="VK_FORMAT_R8G8B8_SINT">28</entry>
      <entry name="VK_FORMAT_R8G8B8_SRGB">29</entry>
      <entry name="VK_FORMAT_B8G8R8_UNORM">30</entry>
      <entry name="VK_FORMAT_B8G8R8_SNORM">31</entry>
      <entry name="VK_FORMAT_B8G8R8_USCALED">32</entry>
      <entry name="VK_FORMAT_B8G8R8_SSCALED">33</entry>
      <entry name="VK_FORMAT_B8G8R8_UINT">34</entry>
      <entry name="VK_FORMAT_B8G8R8_SINT">35</entry>
      <entry name="VK_FORMAT_B8G8R8_SRGB">36</entry>
      <entry name="VK_FORMAT_R8G8B8A8_UNORM">37</entry>
      <entry name="VK_FORMAT_R8G8B8A8_SNORM">38</entry>
      <entry name="VK_FORMAT_R8G8B8A8_USCALED">39</entry>
      <entry name="VK_FORMAT_R8G8B8A8_SSCALED">40</entry>
      <entry name="VK_FORMAT_R8G8B8A8_UINT">41</entry>
      <entry name="VK_FORMAT_R8G8B8A8_SINT">42</entry>
      <entry name="VK_FORMAT_R8G8B8A8_SRGB">43</entry>
      <entry name="VK_FORMAT_B8G8R8A8_UNORM">44</entry>
      <entry name="VK_FORMAT_B8G8R8A8_SNORM">45</entry>
      <entry name="VK_FORMAT_B8G8R8A8_USCALED">46</entry>
      <entry name="VK_FORMAT_B8G8R8A8_SSCALED">47</entry>
      <entry name="VK_FORMAT_B8G8R8A8_UINT">48</entry>
      <entry name="VK_FORMAT_B8G8R8A8_SINT">49</entry>
      <entry name="VK_FORMAT_B8G8R8A8_SRGB">50</entry>
      <entry name="VK_FORMAT_A8B8G8R8_UNORM_PACK32">51</entry>
      <entry name="VK_FORMAT_A8B8G8R8_SNORM_PACK32">52</entry>
      <entry name="VK_FORMAT_A8B8G8R8_USCALED_PACK32">53</entry>
      <entry name="VK_FORMAT_A8B8G8R8_SSCALED_PACK32">54</entry>
      <entry name="VK_FORMAT_A8B8G8R8_UINT_PACK32">55</entry>
      <entry name="VK_FORMAT_A8B8G8R8_SINT_PACK32">56</entry>
      <entry name="VK_FORMAT_A8B8G8R8_SRGB_PACK32">57</entry>
      <entry name="VK_FORMAT_A2R10G10B10_UNORM_PACK32">58</entry>
      <entry name="VK_FORMAT_A2R10G10B10_SNORM_PACK32">59</entry>
      <entry name="VK_FORMAT_A2R10G10B10_USCALED_PACK32">60</entry>
      <entry name="VK_FORMAT_A2R10G10B10_SSCALED_PACK32">61</entry>
      <entry name="VK_FORMAT_A2R10G10B10_UINT_PACK32">62</entry>
      <entry name="VK_FORMAT_A2R10G10B10_SINT_PACK32">63</entry>
      <entry name="VK_FORMAT_A2B10G10R10_UNORM_PACK32">64</entry>
      <entry name="VK_FORMAT_A2B10G10R10_SNORM_PACK32">65</entry>
      <entry name="VK_FORMAT_A2B10G10R10_USCALED_PACK32">66</entry>
      <entry name="VK_FORMAT_A2B10G10R10_SSCALED_PACK32">67</entry>
      <entry name="VK_FORMAT_A2B10G10R10_UINT_PACK32">68</entry>
      <entry name="VK_FORMAT_A2B10G10R10_SINT_PACK32">69</entry>
      <entry name="VK_FORMAT_R16_UNORM">70</entry>
      <entry name="VK_FORMAT_R16_SNORM">71</entry>
      <entry name="VK_FORMAT_R16_USCALED">72</entry>
      <entry name="VK_FORMAT_R16_SSCALED">73</entry>
      <entry name="VK_FORMAT_R16_UINT">74</entry>
      <entry name="VK_FORMAT_R16_SINT">75</entry>
      <entry name="VK_FORMAT_R16_SFLOAT">76</entry>
      <entry name="VK_FORMAT_R16G16_UNORM">77</entry>
      <entry name="VK_FORMAT_R16G16_SNORM">78</entry>
      <entry name="VK_FORMAT_R16G16_USCALED">79</entry>
      <entry name="VK_FORMAT_R16G16_SSCALED">80</entry>
      <entry name="VK_FORMAT_R16G16_UINT">81</entry>
      <entry name="VK_FORMAT_R16G16_SINT">82</entry>
      <entry name="VK_FORMAT_R16G16_SFLOAT">83</entry>
      <entry name="VK_FORMAT_R16G16B16_UNORM">84</entry>
      <entry name="VK_FORMAT_R16G16B16_SNORM">85</entry>
      <entry name="VK_FORMAT_R16G16B16_USCALED">86</entry>
      <entry name="VK_FORMAT_R16G16B16_SSCALED">87</entry>
      <entry name="VK_FORMAT_R16G16B16_UINT">88</entry>
      <entry name="VK_FORMAT_R16G16B16_SINT">89</entry>
      <entry name="VK_FORMAT_R16G16B16_SFLOAT">90</entry>
      <entry name="VK_FORMAT_R16G16B16A16_UNORM">91</entry>
      <entry name="VK_FORMAT_R16G16B16A16_SNORM">92</entry>
      <entry name="VK_FORMAT_R16G16B16A16_USCALED">93</entry>
      <entry name="VK_FORMAT_R16G16B16A16_SSCALED">94</entry>
      <entry name="VK_FORMAT_R16G16B16A16_UINT">95</entry>
      <entry name="VK_FORMAT_R16G16B16A16_SINT">96</entry>
      <entry name="VK_FORMAT_R16G16B16A16_SFLOAT">97</entry>
      <entry name="VK_FORMAT_R32_UINT">98</entry>
      <entry name="VK_FORMAT_R32_SINT">99</entry>
      <entry name="VK_FORMAT_R32_SFLOAT">100</entry>
      <entry name="VK_FORMAT_R32G32_UINT">101</entry>
      <entry name="VK_FORMAT_R32G32_SINT">102</entry>
      <entry name="VK_FORMAT_R32G32_SFLOAT">103</entry>
      <entry name="VK_FORMAT_R32G32B32_UINT">104</entry>
      <entry name="VK_FORMAT_R32G32B32_SINT">105</entry>
      <entry name="VK_FORMAT_R32G32B32_SFLOAT">106</entry>
      <entry name="VK_FORMAT_R32G32B32A32_UINT">107</entry>
      <entry name="VK_FORMAT_R32G32B32A32_SINT">108</entry>
      <entry name="VK_FORMAT_R32G32B32A32_SFLOAT">109</entry>
      <entry name="VK_FORMAT_R64_UINT">110</entry>
      <entry name="VK_FORMAT_R64_SINT">111</entry>
      <entry name="VK_FORMAT_R64_SFLOAT">112</entry>
      <entry name="VK_FORMAT_R64G64_UINT">113</entry>
      <entry name="VK_FORMAT_R64G64_SINT">114</entry>
      <entry name="VK_FORMAT_R64G64_SFLOAT">115</entry>
      <entry name="VK_FORMAT_R64G64B64_UINT">116</entry>
      <entry name="VK_FORMAT_R64G64B64_SINT">117</entry>
      <entry name="VK_FORMAT_R64G64B64_SFLOAT">118</entry>
      <entry name="VK_FORMAT_R64G64B64A64_UINT">119</entry>
      <entry name="VK_FORMAT_R64G64B64A64_SINT">120</entry>
      <entry name="VK_FORMAT_R64G64B64A64_SFLOAT">121</entry>
      <entry name="VK_FORMAT_B10G11R11_UFLOAT_PACK32">122</entry>
      <entry name="VK_FORMAT_E5B9G9R9_UFLOAT_PACK32">123</entry>
      <entry name="VK_FORMAT_D16_UNORM">124</entry>
      <entry name="VK_FORMAT_X8_D24_UNORM_PACK32">125</entry>
      <entry name="VK_FORMAT_D32_SFLOAT">126</entry>
      <entry name="VK_FORMAT_S8_UINT">127</entry>
      <entry name="VK_FORMAT_D16_UNORM_S8_UINT">128</entry>
      <entry name="VK_FORMAT_D24_UNORM_S8_UINT">129</entry>
      <entry name="VK_FORMAT_D32_SFLOAT_S8_UINT">130</entry>
      <entry name="VK_FORMAT_BC1_RGB_UNORM_BLOCK">131</entry>
      <entry name="VK_FORMAT_BC1_RGB_SRGB_BLOCK">132</entry>
      <entry name="VK_FORMAT_BC1_RGBA_UNORM_BLOCK">133</entry>
      <entry name="VK_FORMAT_BC1_RGBA_SRGB_BLOCK">134</entry>
      <entry name="VK_FORMAT_BC2_UNORM_BLOCK">135</entry>
      <entry name="VK_FORMAT_BC2_SRGB_BLOCK">136</entry>
      <entry name="VK_FORMAT_BC3_UNORM_BLOCK">137</entry>
      <entry name="VK_FORMAT_BC3_SRGB_BLOCK">138</entry>
      <entry name="VK_FORMAT_BC4_UNORM_BLOCK">139</entry>
      <entry name="VK_FORMAT_BC4_SNORM_BLOCK">140</entry>
      <entry name="VK_FORMAT_BC5_UNORM_BLOCK">141</entry>
      <entry name="VK_FORMAT_BC5_SNORM_BLOCK">142</entry>
      <entry name="VK_FORMAT_BC6H_UFLOAT_BLOCK">143</entry>
      <entry name="VK_FORMAT_BC6H_SFLOAT_BLOCK">144</entry>
      <entry name="VK_FORMAT_BC7_UNORM_BLOCK">145</entry>
      <entry name="VK_FORMAT_BC7_SRGB_BLOCK">146</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK">147</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK">148</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK">149</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK">150</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK">151</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK">152</entry>
      <entry name="VK_FORMAT_EAC_R11_UNORM_BLOCK">153</entry>
      <entry name="VK_FORMAT_EAC_R11_SNORM_BLOCK">154</entry>
      <entry name="VK_FORMAT_EAC_R11G11_UNORM_BLOCK">155</entry>
      <entry name="VK_FORMAT_EAC_R11G11_SNORM_BLOCK">156</entry>
      <entry name="VK_FORMAT_ASTC_4x4_UNORM_BLOCK">157</entry>
      <entry name="VK_FORMAT_ASTC_4x4_SRGB_BLOCK">158</entry>
      <entry name="VK_FORMAT_ASTC_5x4_UNORM_BLOCK">159</entry>
      <entry name="VK_FORMAT_ASTC_5x4_SRGB_BLOCK">160</entry>
      <entry name="VK_FORMAT_ASTC_5x5_UNORM_BLOCK">161</entry>
      <entry name="VK_FORMAT_ASTC_5x5_SRGB_BLOCK">162</entry>
      <entry name="VK_FORMAT_ASTC_6x5_UNORM_BLOCK">163</entry>
      <entry name="VK_FORMAT_ASTC_6x5_SRGB_BLOCK">164</entry>
      <entry name="VK_FORMAT_ASTC_6x6_UNORM_BLOCK">165</entry>
      <entry name="VK_FORMAT_ASTC_6x6_SRGB_BLOCK">166</entry>
      <entry name="VK_FORMAT_ASTC_8x5_UNORM_BLOCK">167</entry>
      <entry name="VK_FORMAT_ASTC_8x5_SRGB_BLOCK">168</entry>
      <entry name="VK_FORMAT_ASTC_8x6_UNORM_BLOCK">169</entry>
      <entry name="VK_FORMAT_ASTC_8x6_SRGB_BLOCK">170</entry>
      <entry name="VK_FORMAT_ASTC_8x8_UNORM_BLOCK">171</entry>
      <entry name="VK_FORMAT_ASTC_8x8_SRGB_BLOCK">172</entry>
      <entry name="VK_FORMAT_ASTC_10x5_UNORM_BLOCK">173</entry>
      <entry name="VK_FORMAT_ASTC_10x5_SRGB_BLOCK">174</entry>
      <entry name="VK_FORMAT_ASTC_10x6_UNORM_BLOCK">175</entry>
      <entry name="VK_FORMAT_ASTC_10x6_SRGB_BLOCK">176</entry>
      <entry name="VK_FORMAT_ASTC_10x8_UNORM_BLOCK">177</entry>
      <entry name="VK_FORMAT_ASTC_10x8_SRGB_BLOCK">178</entry>
      <entry name="VK_FORMAT_ASTC_10x10_UNORM_BLOCK">179</entry>
      <entry name="VK_FORMAT_ASTC_10x10_SRGB_BLOCK">180</entry>
      <entry name="VK_FORMAT_ASTC_12x10_UNORM_BLOCK">181</entry>
      <entry name="VK_FORMAT_ASTC_12x10_SRGB_BLOCK">182</entry>
      <entry name="VK_FORMAT_ASTC_12x12_UNORM_BLOCK">183</entry>
      <entry name="VK_FORMAT_ASTC_12x12_SRGB_BLOCK">184</entry>
      <entry name="VK_FORMAT_G8B8G8R8_422_UNORM">1000156000</entry>
      <entry name="VK_FORMAT_B8G8R8G8_422_UNORM">1000156001</entry>
      <entry name="VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM">1000156002</entry>
      <entry name="VK_FORMAT_G8_B8R8_2PLANE_420_UNORM">1000156003</entry>
      <entry name="VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM">1000156004</entry>
      <entry name="VK_FORMAT_G8_B8R8_2PLANE_422_UNORM">1000156005</entry>
      <entry name="VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM">1000156006</entry>
      <entry name="VK_FORMAT_R10X6_UNORM_PACK16">1000156007</entry>
      <entry name="VK_FORMAT_R10X6G10X6_UNORM_2PACK16">1000156008</entry>
      <entry name="VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16">1000156009</entry>
      <entry name="VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16">1000156010</entry>
      <entry name="VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16">1000156011</entry>
      <entry name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16">1000156012</entry>
      <entry name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16">1000156013</entry>
      <entry name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16">1000156014</entry>
      <entry name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16">1000156015</entry>
      <entry name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16">1000156016</entry>
      <entry name="VK_FORMAT_R12X4_UNORM_PACK16">1000156017</entry>
      <entry name="VK_FORMAT_R12X4G12X4_UNORM_2PACK16">1000156018</entry>
      <entry name="VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16">1000156019</entry>
      <entry name="VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16">1000156020</entry>
      <entry name="VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16">1000156021</entry>
      <entry name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16">1000156022</entry>
      <entry name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16">1000156023</entry>
      <entry name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16">1000156024</entry>
      <entry name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16">1000156025</entry>
      <entry name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16">1000156026</entry>
      <entry name="VK_FORMAT_G16B16G16R16_422_UNORM">1000156027</entry>
      <entry name="VK_FORMAT_B16G16R16G16_422_UNORM">1000156028</entry>
      <entry name="VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM">1000156029</entry>
      <entry name="VK_FORMAT_G16_B16R16_2PLANE_420_UNORM">1000156030</entry>
      <entry name="VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM">1000156031</entry>
      <entry name="VK_FORMAT_G16_B16R16_2PLANE_422_UNORM">1000156032</entry>
      <entry name="VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM">1000156033</entry>
   </enum>
   <enum name="VkImageUsageFlagBits">
      <entry name="VK_IMAGE_USAGE_TRANSFER_SRC_BIT">1</entry>
      <entry name="VK_IMAGE_USAGE_TRANSFER_DST_BIT">2</entry>
      <entry name="VK_IMAGE_USAGE_SAMPLED_BIT">4</entry>
      <entry name="VK_IMAGE_USAGE_STORAGE_BIT">8</entry>
      <entry name="VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT">16</entry>
      <entry name="VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT">32</entry>
      <entry name="VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT">64</entry>
      <entry name="VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT">128</entry>
   </enum>
   <enum name="VkCompositeAlphaFlagBitsKHR">
      <entry name="VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR">1</entry>
      <entry name="VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR">2</entry>
      <entry name="VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR">4</entry>
      <entry name="VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR">8</entry>
   </enum>
   <enum name="VkSurfaceTransformFlagBitsKHR">
      <entry name="VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR">1</entry>
      <entry name="VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR">2</entry>
      <entry name="VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR">4</entry>
      <entry name="VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR">8</entry>
      <entry name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR">16</entry>
      <entry name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR">32</entry>
      <entry name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR">64</entry>
      <entry name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR">128</entry>
      <entry name="VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR">256</entry>
   </enum>
   <enum name="VkObjectType">
      <entry name="VK_OBJECT_TYPE_UNKNOWN">0</entry>
      <entry name="VK_OBJECT_TYPE_INSTANCE">1</entry>
      <entry name="VK_OBJECT_TYPE_PHYSICAL_DEVICE">2</entry>
      <entry name="VK_OBJECT_TYPE_DEVICE">3</entry>
      <entry name="VK_OBJECT_TYPE_QUEUE">4</entry>
      <entry name="VK_OBJECT_TYPE_SEMAPHORE">5</entry>
      <entry name="VK_OBJECT_TYPE_COMMAND_BUFFER">6</entry>
      <entry name="VK_OBJECT_TYPE_FENCE">7</entry>
      <entry name="VK_OBJECT_TYPE_DEVICE_MEMORY">8</entry>
      <entry name="VK_OBJECT_TYPE_BUFFER">9</entry>
      <entry name="VK_OBJECT_TYPE_IMAGE">10</entry>
      <entry name="VK_OBJECT_TYPE_EVENT">11</entry>
      <entry name="VK_OBJECT_TYPE_QUERY_POOL">12</entry>
      <entry name="VK_OBJECT_TYPE_BUFFER_VIEW">13</entry>
      <entry name="VK_OBJECT_TYPE_IMAGE_VIEW">14</entry>
      <entry name="VK_OBJECT_TYPE_SHADER_MODULE">15</entry>
      <entry name="VK_OBJECT_TYPE_PIPELINE_CACHE">16</entry>
      <entry name="VK_OBJECT_TYPE_PIPELINE_LAYOUT">17</entry>
      <entry name="VK_OBJECT_TYPE_RENDER_PASS">18</entry>
      <entry name="VK_OBJECT_TYPE_PIPELINE">19</entry>
      <entry name="VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT">20</entry>
      <entry name="VK_OBJECT_TYPE_SAMPLER">21</entry>
      <entry name="VK_OBJECT_TYPE_DESCRIPTOR_POOL">22</entry>
      <entry name="VK_OBJECT_TYPE_DESCRIPTOR_SET">23</entry>
      <entry name="VK_OBJECT_TYPE_FRAMEBUFFER">24</entry>
      <entry name="VK_OBJECT_TYPE_COMMAND_POOL">25</entry>
      <entry name="VK_OBJECT_TYPE_SURFACE_KHR">1000000000</entry>
      <entry name="VK_OBJECT_TYPE_SWAPCHAIN_KHR">1000001000</entry>
      <entry name="VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE">1000085000</entry>
      <entry name="VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT">1000128000</entry>
      <entry name="VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION">1000156000</entry>
   </enum>
   <enum name="VkSwapchainCreateFlagBitsKHR">
      <entry name="VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR">1</entry>
      <entry name="VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR">2</entry>
   </enum>
   <enum name="VkDeviceGroupPresentModeFlagBitsKHR">
      <entry name="VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR">1</entry>
      <entry name="VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR">2</entry>
      <entry name="VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR">4</entry>
      <entry name="VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR">8</entry>
   </enum>
   <enum name="VkSharingMode">
      <entry name="VK_SHARING_MODE_EXCLUSIVE">0</entry>
      <entry name="VK_SHARING_MODE_CONCURRENT">1</entry>
   </enum>
   <enum name="VkImageLayout">
      <entry name="VK_IMAGE_LAYOUT_UNDEFINED">0</entry>
      <entry name="VK_IMAGE_LAYOUT_GENERAL">1</entry>
      <entry name="VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL">2</entry>
      <entry name="VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL">3</entry>
      <entry name="VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL">4</entry>
      <entry name="VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL">5</entry>
      <entry name="VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL">6</entry>
      <entry name="VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL">7</entry>
      <entry name="VK_IMAGE_LAYOUT_PREINITIALIZED">8</entry>
      <entry name="VK_IMAGE_LAYOUT_PRESENT_SRC_KHR">1000001002</entry>
      <entry name="VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL">1000117000</entry>
      <entry name="VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL">1000117001</entry>
   </enum>
   <enum name="VkDebugUtilsMessageTypeFlagBitsEXT">
      <entry name="VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT">1</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT">2</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT">4</entry>
   </enum>
   <enum name="VkDebugUtilsMessageSeverityFlagBitsEXT">
      <entry name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT">1</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT">16</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT">256</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT">4096</entry>
   </enum>
   <enum name="VkShaderStageFlagBits">
      <entry name="VK_SHADER_STAGE_VERTEX_BIT">1</entry>
      <entry name="VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT">2</entry>
      <entry name="VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT">4</entry>
      <entry name="VK_SHADER_STAGE_GEOMETRY_BIT">8</entry>
      <entry name="VK_SHADER_STAGE_FRAGMENT_BIT">16</entry>
      <entry name="VK_SHADER_STAGE_ALL_GRAPHICS">31</entry>
      <entry name="VK_SHADER_STAGE_COMPUTE_BIT">32</entry>
      <entry name="VK_SHADER_STAGE_ALL">2147483647</entry>
   </enum>
   <enum name="VkDescriptorType">
      <entry name="VK_DESCRIPTOR_TYPE_SAMPLER">0</entry>
      <entry name="VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER">1</entry>
      <entry name="VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE">2</entry>
      <entry name="VK_DESCRIPTOR_TYPE_STORAGE_IMAGE">3</entry>
      <entry name="VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER">4</entry>
      <entry name="VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER">5</entry>
      <entry name="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER">6</entry>
      <entry name="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER">7</entry>
      <entry name="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC">8</entry>
      <entry name="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC">9</entry>
      <entry name="VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT">10</entry>
   </enum>
   <enum name="VkDescriptorSetLayoutCreateFlagBits"/>
   <enum name="VkExternalSemaphoreFeatureFlagBits">
      <entry name="VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT">1</entry>
      <entry name="VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT">2</entry>
   </enum>
   <enum name="VkExternalSemaphoreHandleTypeFlagBits">
      <entry name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT">1</entry>
      <entry name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT">2</entry>
      <entry name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT">4</entry>
      <entry name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT">8</entry>
      <entry name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT">16</entry>
   </enum>
   <enum name="VkSemaphoreImportFlagBits">
      <entry name="VK_SEMAPHORE_IMPORT_TEMPORARY_BIT">1</entry>
   </enum>
   <enum name="VkExternalFenceHandleTypeFlagBits">
      <entry name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT">1</entry>
      <entry name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT">2</entry>
      <entry name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT">4</entry>
      <entry name="VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT">8</entry>
   </enum>
   <enum name="VkFenceImportFlagBits">
      <entry name="VK_FENCE_IMPORT_TEMPORARY_BIT">1</entry>
   </enum>
   <enum name="VkExternalFenceFeatureFlagBits">
      <entry name="VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT">1</entry>
      <entry name="VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT">2</entry>
   </enum>
   <enum name="VkExternalMemoryHandleTypeFlagBits">
      <entry name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT">1</entry>
      <entry name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT">2</entry>
      <entry name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT">4</entry>
      <entry name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT">8</entry>
      <entry name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT">16</entry>
      <entry name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT">32</entry>
      <entry name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT">64</entry>
   </enum>
   <enum name="VkExternalMemoryFeatureFlagBits">
      <entry name="VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT">1</entry>
      <entry name="VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT">2</entry>
      <entry name="VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT">4</entry>
   </enum>
   <enum name="VkBufferUsageFlagBits">
      <entry name="VK_BUFFER_USAGE_TRANSFER_SRC_BIT">1</entry>
      <entry name="VK_BUFFER_USAGE_TRANSFER_DST_BIT">2</entry>
      <entry name="VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT">4</entry>
      <entry name="VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT">8</entry>
      <entry name="VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT">16</entry>
      <entry name="VK_BUFFER_USAGE_STORAGE_BUFFER_BIT">32</entry>
      <entry name="VK_BUFFER_USAGE_INDEX_BUFFER_BIT">64</entry>
      <entry name="VK_BUFFER_USAGE_VERTEX_BUFFER_BIT">128</entry>
      <entry name="VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT">256</entry>
   </enum>
   <enum name="VkBufferCreateFlagBits">
      <entry name="VK_BUFFER_CREATE_SPARSE_BINDING_BIT">1</entry>
      <entry name="VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT">2</entry>
      <entry name="VK_BUFFER_CREATE_SPARSE_ALIASED_BIT">4</entry>
      <entry name="VK_BUFFER_CREATE_PROTECTED_BIT">8</entry>
   </enum>
   <enum name="VkPipelineBindPoint">
      <entry name="VK_PIPELINE_BIND_POINT_GRAPHICS">0</entry>
      <entry name="VK_PIPELINE_BIND_POINT_COMPUTE">1</entry>
   </enum>
   <enum name="VkDescriptorUpdateTemplateType">
      <entry name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET">0</entry>
   </enum>
   <enum name="VkChromaLocation">
      <entry name="VK_CHROMA_LOCATION_COSITED_EVEN">0</entry>
      <entry name="VK_CHROMA_LOCATION_MIDPOINT">1</entry>
   </enum>
   <enum name="VkSamplerYcbcrRange">
      <entry name="VK_SAMPLER_YCBCR_RANGE_ITU_FULL">0</entry>
      <entry name="VK_SAMPLER_YCBCR_RANGE_ITU_NARROW">1</entry>
   </enum>
   <enum name="VkSamplerYcbcrModelConversion">
      <entry name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY">0</entry>
      <entry name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY">1</entry>
      <entry name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709">2</entry>
      <entry name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601">3</entry>
      <entry name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020">4</entry>
   </enum>
   <enum name="VkFilter">
      <entry name="VK_FILTER_NEAREST">0</entry>
      <entry name="VK_FILTER_LINEAR">1</entry>
   </enum>
   <enum name="VkComponentSwizzle">
      <entry name="VK_COMPONENT_SWIZZLE_IDENTITY">0</entry>
      <entry name="VK_COMPONENT_SWIZZLE_ZERO">1</entry>
      <entry name="VK_COMPONENT_SWIZZLE_ONE">2</entry>
      <entry name="VK_COMPONENT_SWIZZLE_R">3</entry>
      <entry name="VK_COMPONENT_SWIZZLE_G">4</entry>
      <entry name="VK_COMPONENT_SWIZZLE_B">5</entry>
      <entry name="VK_COMPONENT_SWIZZLE_A">6</entry>
   </enum>
   <enum name="VkImageAspectFlagBits">
      <entry name="VK_IMAGE_ASPECT_COLOR_BIT">1</entry>
      <entry name="VK_IMAGE_ASPECT_DEPTH_BIT">2</entry>
      <entry name="VK_IMAGE_ASPECT_STENCIL_BIT">4</entry>
      <entry name="VK_IMAGE_ASPECT_METADATA_BIT">8</entry>
      <entry name="VK_IMAGE_ASPECT_PLANE_0_BIT">16</entry>
      <entry name="VK_IMAGE_ASPECT_PLANE_1_BIT">32</entry>
      <entry name="VK_IMAGE_ASPECT_PLANE_2_BIT">64</entry>
   </enum>
   <enum name="VkFormatFeatureFlagBits">
      <entry name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT">1</entry>
      <entry name="VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT">2</entry>
      <entry name="VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT">4</entry>
      <entry name="VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT">8</entry>
      <entry name="VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT">16</entry>
      <entry name="VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT">32</entry>
      <entry name="VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT">64</entry>
      <entry name="VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT">128</entry>
      <entry name="VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT">256</entry>
      <entry name="VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT">512</entry>
      <entry name="VK_FORMAT_FEATURE_BLIT_SRC_BIT">1024</entry>
      <entry name="VK_FORMAT_FEATURE_BLIT_DST_BIT">2048</entry>
      <entry name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT">4096</entry>
      <entry name="VK_FORMAT_FEATURE_TRANSFER_SRC_BIT">16384</entry>
      <entry name="VK_FORMAT_FEATURE_TRANSFER_DST_BIT">32768</entry>
      <entry name="VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT">131072</entry>
      <entry name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT">262144</entry>
      <entry name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT">524288</entry>
      <entry name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT">1048576</entry>
      <entry name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT">2097152</entry>
      <entry name="VK_FORMAT_FEATURE_DISJOINT_BIT">4194304</entry>
      <entry name="VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT">8388608</entry>
   </enum>
   <enum name="VkImageCreateFlagBits">
      <entry name="VK_IMAGE_CREATE_SPARSE_BINDING_BIT">1</entry>
      <entry name="VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT">2</entry>
      <entry name="VK_IMAGE_CREATE_SPARSE_ALIASED_BIT">4</entry>
      <entry name="VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT">8</entry>
      <entry name="VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT">16</entry>
      <entry name="VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT">32</entry>
      <entry name="VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT">64</entry>
      <entry name="VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT">128</entry>
      <entry name="VK_IMAGE_CREATE_EXTENDED_USAGE_BIT">256</entry>
      <entry name="VK_IMAGE_CREATE_DISJOINT_BIT">512</entry>
      <entry name="VK_IMAGE_CREATE_ALIAS_BIT">1024</entry>
      <entry name="VK_IMAGE_CREATE_PROTECTED_BIT">2048</entry>
   </enum>
   <enum name="VkDeviceQueueCreateFlagBits">
      <entry name="VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT">1</entry>
   </enum>
   <enum name="VkCommandPoolCreateFlagBits">
      <entry name="VK_COMMAND_POOL_CREATE_TRANSIENT_BIT">1</entry>
      <entry name="VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT">2</entry>
      <entry name="VK_COMMAND_POOL_CREATE_PROTECTED_BIT">4</entry>
   </enum>
   <enum name="VkMemoryPropertyFlagBits">
      <entry name="VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT">1</entry>
      <entry name="VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT">2</entry>
      <entry name="VK_MEMORY_PROPERTY_HOST_COHERENT_BIT">4</entry>
      <entry name="VK_MEMORY_PROPERTY_HOST_CACHED_BIT">8</entry>
      <entry name="VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT">16</entry>
      <entry name="VK_MEMORY_PROPERTY_PROTECTED_BIT">32</entry>
   </enum>
   <enum name="VkQueueFlagBits">
      <entry name="VK_QUEUE_GRAPHICS_BIT">1</entry>
      <entry name="VK_QUEUE_COMPUTE_BIT">2</entry>
      <entry name="VK_QUEUE_TRANSFER_BIT">4</entry>
      <entry name="VK_QUEUE_SPARSE_BINDING_BIT">8</entry>
      <entry name="VK_QUEUE_PROTECTED_BIT">16</entry>
   </enum>
   <enum name="VkDependencyFlagBits">
      <entry name="VK_DEPENDENCY_BY_REGION_BIT">1</entry>
      <entry name="VK_DEPENDENCY_VIEW_LOCAL_BIT">2</entry>
      <entry name="VK_DEPENDENCY_DEVICE_GROUP_BIT">4</entry>
   </enum>
   <enum name="VkTessellationDomainOrigin">
      <entry name="VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT">0</entry>
      <entry name="VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT">1</entry>
   </enum>
   <enum name="VkPointClippingBehavior">
      <entry name="VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES">0</entry>
      <entry name="VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY">1</entry>
   </enum>
   <enum name="VkSparseImageFormatFlagBits">
      <entry name="VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT">1</entry>
      <entry name="VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT">2</entry>
      <entry name="VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT">4</entry>
   </enum>
   <enum name="VkImageTiling">
      <entry name="VK_IMAGE_TILING_OPTIMAL">0</entry>
      <entry name="VK_IMAGE_TILING_LINEAR">1</entry>
   </enum>
   <enum name="VkSampleCountFlagBits">
      <entry name="VK_SAMPLE_COUNT_1_BIT">1</entry>
      <entry name="VK_SAMPLE_COUNT_2_BIT">2</entry>
      <entry name="VK_SAMPLE_COUNT_4_BIT">4</entry>
      <entry name="VK_SAMPLE_COUNT_8_BIT">8</entry>
      <entry name="VK_SAMPLE_COUNT_16_BIT">16</entry>
      <entry name="VK_SAMPLE_COUNT_32_BIT">32</entry>
      <entry name="VK_SAMPLE_COUNT_64_BIT">64</entry>
   </enum>
   <enum name="VkImageType">
      <entry name="VK_IMAGE_TYPE_1D">0</entry>
      <entry name="VK_IMAGE_TYPE_2D">1</entry>
      <entry name="VK_IMAGE_TYPE_3D">2</entry>
   </enum>
   <enum name="VkMemoryHeapFlagBits">
      <entry name="VK_MEMORY_HEAP_DEVICE_LOCAL_BIT">1</entry>
      <entry name="VK_MEMORY_HEAP_MULTI_INSTANCE_BIT">2</entry>
   </enum>
   <enum name="VkPhysicalDeviceType">
      <entry name="VK_PHYSICAL_DEVICE_TYPE_OTHER">0</entry>
      <entry name="VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU">1</entry>
      <entry name="VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU">2</entry>
      <entry name="VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU">3</entry>
      <entry name="VK_PHYSICAL_DEVICE_TYPE_CPU">4</entry>
   </enum>
   <enum name="VkPipelineCreateFlagBits">
      <entry name="VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT">1</entry>
      <entry name="VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT">2</entry>
      <entry name="VK_PIPELINE_CREATE_DERIVATIVE_BIT">4</entry>
      <entry name="VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT">8</entry>
      <entry name="VK_PIPELINE_CREATE_DISPATCH_BASE">16</entry>
   </enum>
   <enum name="VkPeerMemoryFeatureFlagBits">
      <entry name="VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT">1</entry>
      <entry name="VK_PEER_MEMORY_FEATURE_COPY_DST_BIT">2</entry>
      <entry name="VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT">4</entry>
      <entry name="VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT">8</entry>
   </enum>
   <enum name="VkMemoryAllocateFlagBits">
      <entry name="VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT">1</entry>
   </enum>
   <enum name="VkSubgroupFeatureFlagBits">
      <entry name="VK_SUBGROUP_FEATURE_BASIC_BIT">1</entry>
      <entry name="VK_SUBGROUP_FEATURE_VOTE_BIT">2</entry>
      <entry name="VK_SUBGROUP_FEATURE_ARITHMETIC_BIT">4</entry>
      <entry name="VK_SUBGROUP_FEATURE_BALLOT_BIT">8</entry>
      <entry name="VK_SUBGROUP_FEATURE_SHUFFLE_BIT">16</entry>
      <entry name="VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT">32</entry>
      <entry name="VK_SUBGROUP_FEATURE_CLUSTERED_BIT">64</entry>
      <entry name="VK_SUBGROUP_FEATURE_QUAD_BIT">128</entry>
   </enum>
   <enum name="VkVendorId">
      <entry name="VK_VENDOR_ID_VIV">65537</entry>
      <entry name="VK_VENDOR_ID_VSI">65538</entry>
      <entry name="VK_VENDOR_ID_KAZAN">65539</entry>
   </enum>
   <enum name="VkAccessFlagBits">
      <entry name="VK_ACCESS_INDIRECT_COMMAND_READ_BIT">1</entry>
      <entry name="VK_ACCESS_INDEX_READ_BIT">2</entry>
      <entry name="VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT">4</entry>
      <entry name="VK_ACCESS_UNIFORM_READ_BIT">8</entry>
      <entry name="VK_ACCESS_INPUT_ATTACHMENT_READ_BIT">16</entry>
      <entry name="VK_ACCESS_SHADER_READ_BIT">32</entry>
      <entry name="VK_ACCESS_SHADER_WRITE_BIT">64</entry>
      <entry name="VK_ACCESS_COLOR_ATTACHMENT_READ_BIT">128</entry>
      <entry name="VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT">256</entry>
      <entry name="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT">512</entry>
      <entry name="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT">1024</entry>
      <entry name="VK_ACCESS_TRANSFER_READ_BIT">2048</entry>
      <entry name="VK_ACCESS_TRANSFER_WRITE_BIT">4096</entry>
      <entry name="VK_ACCESS_HOST_READ_BIT">8192</entry>
      <entry name="VK_ACCESS_HOST_WRITE_BIT">16384</entry>
      <entry name="VK_ACCESS_MEMORY_READ_BIT">32768</entry>
      <entry name="VK_ACCESS_MEMORY_WRITE_BIT">65536</entry>
   </enum>
   <enum name="VkSubpassContents">
      <entry name="VK_SUBPASS_CONTENTS_INLINE">0</entry>
      <entry name="VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS">1</entry>
   </enum>
   <enum name="VkQueryResultFlagBits">
      <entry name="VK_QUERY_RESULT_64_BIT">1</entry>
      <entry name="VK_QUERY_RESULT_WAIT_BIT">2</entry>
      <entry name="VK_QUERY_RESULT_WITH_AVAILABILITY_BIT">4</entry>
      <entry name="VK_QUERY_RESULT_PARTIAL_BIT">8</entry>
   </enum>
   <enum name="VkPipelineStageFlagBits">
      <entry name="VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT">1</entry>
      <entry name="VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT">2</entry>
      <entry name="VK_PIPELINE_STAGE_VERTEX_INPUT_BIT">4</entry>
      <entry name="VK_PIPELINE_STAGE_VERTEX_SHADER_BIT">8</entry>
      <entry name="VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT">16</entry>
      <entry name="VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT">32</entry>
      <entry name="VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT">64</entry>
      <entry name="VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT">128</entry>
      <entry name="VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT">256</entry>
      <entry name="VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT">512</entry>
      <entry name="VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT">1024</entry>
      <entry name="VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT">2048</entry>
      <entry name="VK_PIPELINE_STAGE_TRANSFER_BIT">4096</entry>
      <entry name="VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT">8192</entry>
      <entry name="VK_PIPELINE_STAGE_HOST_BIT">16384</entry>
      <entry name="VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT">32768</entry>
      <entry name="VK_PIPELINE_STAGE_ALL_COMMANDS_BIT">65536</entry>
   </enum>
   <enum name="VkQueryControlFlagBits">
      <entry name="VK_QUERY_CONTROL_PRECISE_BIT">1</entry>
   </enum>
   <enum name="VkIndexType">
      <entry name="VK_INDEX_TYPE_UINT16">0</entry>
      <entry name="VK_INDEX_TYPE_UINT32">1</entry>
   </enum>
   <enum name="VkStencilFaceFlagBits">
      <entry name="VK_STENCIL_FACE_FRONT_BIT">1</entry>
      <entry name="VK_STENCIL_FACE_BACK_BIT">2</entry>
      <entry name="VK_STENCIL_FRONT_AND_BACK">3</entry>
   </enum>
   <enum name="VkCommandBufferResetFlagBits">
      <entry name="VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT">1</entry>
   </enum>
   <enum name="VkQueryPipelineStatisticFlagBits">
      <entry name="VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT">1</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT">2</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT">4</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT">8</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT">16</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT">32</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT">64</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT">128</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT">256</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT">512</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT">1024</entry>
   </enum>
   <enum name="VkCommandBufferUsageFlagBits">
      <entry name="VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT">1</entry>
      <entry name="VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT">2</entry>
      <entry name="VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT">4</entry>
   </enum>
   <enum name="VkCommandBufferLevel">
      <entry name="VK_COMMAND_BUFFER_LEVEL_PRIMARY">0</entry>
      <entry name="VK_COMMAND_BUFFER_LEVEL_SECONDARY">1</entry>
   </enum>
   <enum name="VkCommandPoolResetFlagBits">
      <entry name="VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT">1</entry>
   </enum>
   <enum name="VkSubpassDescriptionFlagBits"/>
   <enum name="VkAttachmentStoreOp">
      <entry name="VK_ATTACHMENT_STORE_OP_STORE">0</entry>
      <entry name="VK_ATTACHMENT_STORE_OP_DONT_CARE">1</entry>
   </enum>
   <enum name="VkAttachmentLoadOp">
      <entry name="VK_ATTACHMENT_LOAD_OP_LOAD">0</entry>
      <entry name="VK_ATTACHMENT_LOAD_OP_CLEAR">1</entry>
      <entry name="VK_ATTACHMENT_LOAD_OP_DONT_CARE">2</entry>
   </enum>
   <enum name="VkAttachmentDescriptionFlagBits">
      <entry name="VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT">1</entry>
   </enum>
   <enum name="VkDescriptorPoolCreateFlagBits">
      <entry name="VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT">1</entry>
   </enum>
   <enum name="VkBorderColor">
      <entry name="VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK">0</entry>
      <entry name="VK_BORDER_COLOR_INT_TRANSPARENT_BLACK">1</entry>
      <entry name="VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK">2</entry>
      <entry name="VK_BORDER_COLOR_INT_OPAQUE_BLACK">3</entry>
      <entry name="VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE">4</entry>
      <entry name="VK_BORDER_COLOR_INT_OPAQUE_WHITE">5</entry>
   </enum>
   <enum name="VkCompareOp">
      <entry name="VK_COMPARE_OP_NEVER">0</entry>
      <entry name="VK_COMPARE_OP_LESS">1</entry>
      <entry name="VK_COMPARE_OP_EQUAL">2</entry>
      <entry name="VK_COMPARE_OP_LESS_OR_EQUAL">3</entry>
      <entry name="VK_COMPARE_OP_GREATER">4</entry>
      <entry name="VK_COMPARE_OP_NOT_EQUAL">5</entry>
      <entry name="VK_COMPARE_OP_GREATER_OR_EQUAL">6</entry>
      <entry name="VK_COMPARE_OP_ALWAYS">7</entry>
   </enum>
   <enum name="VkSamplerAddressMode">
      <entry name="VK_SAMPLER_ADDRESS_MODE_REPEAT">0</entry>
      <entry name="VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT">1</entry>
      <entry name="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE">2</entry>
      <entry name="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER">3</entry>
   </enum>
   <enum name="VkSamplerMipmapMode">
      <entry name="VK_SAMPLER_MIPMAP_MODE_NEAREST">0</entry>
      <entry name="VK_SAMPLER_MIPMAP_MODE_LINEAR">1</entry>
   </enum>
   <enum name="VkSamplerCreateFlagBits"/>
   <enum name="VkDynamicState">
      <entry name="VK_DYNAMIC_STATE_VIEWPORT">0</entry>
      <entry name="VK_DYNAMIC_STATE_SCISSOR">1</entry>
      <entry name="VK_DYNAMIC_STATE_LINE_WIDTH">2</entry>
      <entry name="VK_DYNAMIC_STATE_DEPTH_BIAS">3</entry>
      <entry name="VK_DYNAMIC_STATE_BLEND_CONSTANTS">4</entry>
      <entry name="VK_DYNAMIC_STATE_DEPTH_BOUNDS">5</entry>
      <entry name="VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK">6</entry>
      <entry name="VK_DYNAMIC_STATE_STENCIL_WRITE_MASK">7</entry>
      <entry name="VK_DYNAMIC_STATE_STENCIL_REFERENCE">8</entry>
   </enum>
   <enum name="VkColorComponentFlagBits">
      <entry name="VK_COLOR_COMPONENT_R_BIT">1</entry>
      <entry name="VK_COLOR_COMPONENT_G_BIT">2</entry>
      <entry name="VK_COLOR_COMPONENT_B_BIT">4</entry>
      <entry name="VK_COLOR_COMPONENT_A_BIT">8</entry>
   </enum>
   <enum name="VkBlendOp">
      <entry name="VK_BLEND_OP_ADD">0</entry>
      <entry name="VK_BLEND_OP_SUBTRACT">1</entry>
      <entry name="VK_BLEND_OP_REVERSE_SUBTRACT">2</entry>
      <entry name="VK_BLEND_OP_MIN">3</entry>
      <entry name="VK_BLEND_OP_MAX">4</entry>
   </enum>
   <enum name="VkBlendFactor">
      <entry name="VK_BLEND_FACTOR_ZERO">0</entry>
      <entry name="VK_BLEND_FACTOR_ONE">1</entry>
      <entry name="VK_BLEND_FACTOR_SRC_COLOR">2</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR">3</entry>
      <entry name="VK_BLEND_FACTOR_DST_COLOR">4</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR">5</entry>
      <entry name="VK_BLEND_FACTOR_SRC_ALPHA">6</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA">7</entry>
      <entry name="VK_BLEND_FACTOR_DST_ALPHA">8</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA">9</entry>
      <entry name="VK_BLEND_FACTOR_CONSTANT_COLOR">10</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR">11</entry>
      <entry name="VK_BLEND_FACTOR_CONSTANT_ALPHA">12</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA">13</entry>
      <entry name="VK_BLEND_FACTOR_SRC_ALPHA_SATURATE">14</entry>
      <entry name="VK_BLEND_FACTOR_SRC1_COLOR">15</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR">16</entry>
      <entry name="VK_BLEND_FACTOR_SRC1_ALPHA">17</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA">18</entry>
   </enum>
   <enum name="VkLogicOp">
      <entry name="VK_LOGIC_OP_CLEAR">0</entry>
      <entry name="VK_LOGIC_OP_AND">1</entry>
      <entry name="VK_LOGIC_OP_AND_REVERSE">2</entry>
      <entry name="VK_LOGIC_OP_COPY">3</entry>
      <entry name="VK_LOGIC_OP_AND_INVERTED">4</entry>
      <entry name="VK_LOGIC_OP_NO_OP">5</entry>
      <entry name="VK_LOGIC_OP_XOR">6</entry>
      <entry name="VK_LOGIC_OP_OR">7</entry>
      <entry name="VK_LOGIC_OP_NOR">8</entry>
      <entry name="VK_LOGIC_OP_EQUIVALENT">9</entry>
      <entry name="VK_LOGIC_OP_INVERT">10</entry>
      <entry name="VK_LOGIC_OP_OR_REVERSE">11</entry>
      <entry name="VK_LOGIC_OP_COPY_INVERTED">12</entry>
      <entry name="VK_LOGIC_OP_OR_INVERTED">13</entry>
      <entry name="VK_LOGIC_OP_NAND">14</entry>
      <entry name="VK_LOGIC_OP_SET">15</entry>
   </enum>
   <enum name="VkStencilOp">
      <entry name="VK_STENCIL_OP_KEEP">0</entry>
      <entry name="VK_STENCIL_OP_ZERO">1</entry>
      <entry name="VK_STENCIL_OP_REPLACE">2</entry>
      <entry name="VK_STENCIL_OP_INCREMENT_AND_CLAMP">3</entry>
      <entry name="VK_STENCIL_OP_DECREMENT_AND_CLAMP">4</entry>
      <entry name="VK_STENCIL_OP_INVERT">5</entry>
      <entry name="VK_STENCIL_OP_INCREMENT_AND_WRAP">6</entry>
      <entry name="VK_STENCIL_OP_DECREMENT_AND_WRAP">7</entry>
   </enum>
   <enum name="VkFrontFace">
      <entry name="VK_FRONT_FACE_COUNTER_CLOCKWISE">0</entry>
      <entry name="VK_FRONT_FACE_CLOCKWISE">1</entry>
   </enum>
   <enum name="VkCullModeFlagBits">
      <entry name="VK_CULL_MODE_NONE">0</entry>
      <entry name="VK_CULL_MODE_FRONT_BIT">1</entry>
      <entry name="VK_CULL_MODE_BACK_BIT">2</entry>
      <entry name="VK_CULL_MODE_FRONT_AND_BACK">3</entry>
   </enum>
   <enum name="VkPolygonMode">
      <entry name="VK_POLYGON_MODE_FILL">0</entry>
      <entry name="VK_POLYGON_MODE_LINE">1</entry>
      <entry name="VK_POLYGON_MODE_POINT">2</entry>
   </enum>
   <enum name="VkPrimitiveTopology">
      <entry name="VK_PRIMITIVE_TOPOLOGY_POINT_LIST">0</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_LINE_LIST">1</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP">2</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST">3</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP">4</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN">5</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY">6</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY">7</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY">8</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY">9</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_PATCH_LIST">10</entry>
   </enum>
   <enum name="VkVertexInputRate">
      <entry name="VK_VERTEX_INPUT_RATE_VERTEX">0</entry>
      <entry name="VK_VERTEX_INPUT_RATE_INSTANCE">1</entry>
   </enum>
   <enum name="VkImageViewType">
      <entry name="VK_IMAGE_VIEW_TYPE_1D">0</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_2D">1</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_3D">2</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_CUBE">3</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_1D_ARRAY">4</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_2D_ARRAY">5</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_CUBE_ARRAY">6</entry>
   </enum>
   <enum name="VkImageViewCreateFlagBits"/>
   <enum name="VkQueryType">
      <entry name="VK_QUERY_TYPE_OCCLUSION">0</entry>
      <entry name="VK_QUERY_TYPE_PIPELINE_STATISTICS">1</entry>
      <entry name="VK_QUERY_TYPE_TIMESTAMP">2</entry>
   </enum>
   <enum name="VkFenceCreateFlagBits">
      <entry name="VK_FENCE_CREATE_SIGNALED_BIT">1</entry>
   </enum>
   <enum name="VkSparseMemoryBindFlagBits">
      <entry name="VK_SPARSE_MEMORY_BIND_METADATA_BIT">1</entry>
   </enum>
   <enum name="VkPipelineCacheHeaderVersion">
      <entry name="VK_PIPELINE_CACHE_HEADER_VERSION_ONE">1</entry>
   </enum>
   <function-pointer name="PFN_vkInternalFreeNotification">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="pUserData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="size">
         <type const="False">size_t</type>
      </arg>
      <arg name="allocationType">
         <type const="False">VkInternalAllocationType</type>
      </arg>
      <arg name="allocationScope">
         <type const="False">VkSystemAllocationScope</type>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkInternalAllocationNotification">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="pUserData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="size">
         <type const="False">size_t</type>
      </arg>
      <arg name="allocationType">
         <type const="False">VkInternalAllocationType</type>
      </arg>
      <arg name="allocationScope">
         <type const="False">VkSystemAllocationScope</type>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkFreeFunction">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="pUserData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="pMemory">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkReallocationFunction">
      <return-type>
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </return-type>
      <arg name="pUserData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="pOriginal">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="size">
         <type const="False">size_t</type>
      </arg>
      <arg name="alignment">
         <type const="False">size_t</type>
      </arg>
      <arg name="allocationScope">
         <type const="False">VkSystemAllocationScope</type>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkAllocationFunction">
      <return-type>
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </return-type>
      <arg name="pUserData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="size">
         <type const="False">size_t</type>
      </arg>
      <arg name="alignment">
         <type const="False">size_t</type>
      </arg>
      <arg name="allocationScope">
         <type const="False">VkSystemAllocationScope</type>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkDebugUtilsMessengerCallbackEXT">
      <return-type>
         <type const="False">VkBool32</type>
      </return-type>
      <arg name="messageSeverity">
         <type const="False">VkDebugUtilsMessageSeverityFlagBitsEXT</type>
      </arg>
      <arg name="messageTypes">
         <type const="False">VkDebugUtilsMessageTypeFlagsEXT</type>
      </arg>
      <arg name="pCallbackData">
         <pointer const="False">
            <type const="True">VkDebugUtilsMessengerCallbackDataEXT</type>
         </pointer>
      </arg>
      <arg name="pUserData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkVoidFunction">
      <return-type>
         <type const="False">void</type>
      </return-type>
   </function-pointer>
   <handle name="VkPhysicalDevice" type="uintptr_t"/>
   <handle name="VkSurfaceKHR" type="uint64_t"/>
   <handle name="VkInstance" type="uintptr_t"/>
   <handle name="VkFence" type="uint64_t"/>
   <handle name="VkSemaphore" type="uint64_t"/>
   <handle name="VkSwapchainKHR" type="uint64_t"/>
   <handle name="VkDevice" type="uintptr_t"/>
   <handle name="VkQueue" type="uintptr_t"/>
   <handle name="VkImage" type="uint64_t"/>
   <handle name="VkDebugUtilsMessengerEXT" type="uint64_t"/>
   <handle name="VkCommandBuffer" type="uintptr_t"/>
   <handle name="VkSampler" type="uint64_t"/>
   <handle name="VkPipelineLayout" type="uint64_t"/>
   <handle name="VkDescriptorSetLayout" type="uint64_t"/>
   <handle name="VkDescriptorUpdateTemplate" type="uint64_t"/>
   <handle name="VkDescriptorSet" type="uint64_t"/>
   <handle name="VkSamplerYcbcrConversion" type="uint64_t"/>
   <handle name="VkCommandPool" type="uint64_t"/>
   <handle name="VkBuffer" type="uint64_t"/>
   <handle name="VkDeviceMemory" type="uint64_t"/>
   <handle name="VkFramebuffer" type="uint64_t"/>
   <handle name="VkRenderPass" type="uint64_t"/>
   <handle name="VkQueryPool" type="uint64_t"/>
   <handle name="VkEvent" type="uint64_t"/>
   <handle name="VkPipeline" type="uint64_t"/>
   <handle name="VkImageView" type="uint64_t"/>
   <handle name="VkBufferView" type="uint64_t"/>
   <handle name="VkDescriptorPool" type="uint64_t"/>
   <handle name="VkShaderModule" type="uint64_t"/>
   <handle name="VkPipelineCache" type="uint64_t"/>
   <integer-constant name="VK_KHR_WIN32_SURFACE_SPEC_VERSION" size="32">6</integer-constant>
   <integer-constant name="VK_KHR_SURFACE_SPEC_VERSION" size="32">25</integer-constant>
   <integer-constant name="VK_KHR_SWAPCHAIN_SPEC_VERSION" size="32">70</integer-constant>
   <integer-constant name="VK_EXT_DEBUG_UTILS_SPEC_VERSION" size="32">1</integer-constant>
   <integer-constant name="VK_QUEUE_FAMILY_EXTERNAL" size="32">4294967294</integer-constant>
   <integer-constant name="VK_LUID_SIZE" size="32">8</integer-constant>
   <integer-constant name="VK_MAX_DEVICE_GROUP_SIZE" size="32">32</integer-constant>
   <integer-constant name="VK_SUBPASS_EXTERNAL" size="32">4294967295</integer-constant>
   <integer-constant name="VK_QUEUE_FAMILY_IGNORED" size="32">4294967295</integer-constant>
   <integer-constant name="VK_FALSE" size="32">0</integer-constant>
   <integer-constant name="VK_TRUE" size="32">1</integer-constant>
   <integer-constant name="VK_ATTACHMENT_UNUSED" size="32">4294967295</integer-constant>
   <integer-constant name="VK_WHOLE_SIZE" size="64">18446744073709551615</integer-constant>
   <integer-constant name="VK_REMAINING_ARRAY_LAYERS" size="32">4294967295</integer-constant>
   <integer-constant name="VK_REMAINING_MIP_LEVELS" size="32">4294967295</integer-constant>
   <prelude-type name="uint32_t"/>
   <prelude-type name="uintptr_t"/>
   <prelude-type name="uint64_t"/>
   <prelude-type name="size_t"/>
   <prelude-type name="void"/>
   <prelude-type name="HWND"/>
   <prelude-type name="HINSTANCE"/>
   <prelude-type name="int32_t"/>
   <prelude-type name="char"/>
   <prelude-type name="float"/>
   <prelude-type name="uint8_t"/>
   <prelude-type name="VK_API_VERSION_1_1"/>
   <prelude-type name="VK_NULL_HANDLE"/>
   <prelude-type name="VK_HEADER_VERSION"/>
   <prelude-type name="VK_VERSION_PATCH"/>
   <prelude-type name="VK_VERSION_MINOR"/>
   <prelude-type name="VK_VERSION_MAJOR"/>
   <prelude-type name="VK_API_VERSION_1_0"/>
   <prelude-type name="VK_API_VERSION"/>
   <prelude-type name="vk_platform"/>
   <real-constant name="VK_LOD_CLAMP_NONE" size="32">1000.0</real-constant>
   <string-constant name="VK_KHR_WIN32_SURFACE_EXTENSION_NAME">VK_KHR_win32_surface</string-constant>
   <string-constant name="VK_KHR_SURFACE_EXTENSION_NAME">VK_KHR_surface</string-constant>
   <string-constant name="VK_KHR_SWAPCHAIN_EXTENSION_NAME">VK_KHR_swapchain</string-constant>
   <string-constant name="VK_EXT_DEBUG_UTILS_EXTENSION_NAME">VK_EXT_debug_utils</string-constant>
   <struct name="VkAllocationCallbacks">
      <member name="pUserData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="pfnAllocation">
         <type const="False">PFN_vkAllocationFunction</type>
      </member>
      <member name="pfnReallocation">
         <type const="False">PFN_vkReallocationFunction</type>
      </member>
      <member name="pfnFree">
         <type const="False">PFN_vkFreeFunction</type>
      </member>
      <member name="pfnInternalAllocation">
         <type const="False">PFN_vkInternalAllocationNotification</type>
      </member>
      <member name="pfnInternalFree">
         <type const="False">PFN_vkInternalFreeNotification</type>
      </member>
   </struct>
   <struct name="VkWin32SurfaceCreateInfoKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkWin32SurfaceCreateFlagsKHR</type>
      </member>
      <member name="hinstance">
         <type const="False">HINSTANCE</type>
      </member>
      <member name="hwnd">
         <type const="False">HWND</type>
      </member>
   </struct>
   <struct name="VkSurfaceFormatKHR">
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="colorSpace">
         <type const="False">VkColorSpaceKHR</type>
      </member>
   </struct>
   <struct name="VkSurfaceCapabilitiesKHR">
      <member name="minImageCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="currentExtent">
         <type const="False">VkExtent2D</type>
      </member>
      <member name="minImageExtent">
         <type const="False">VkExtent2D</type>
      </member>
      <member name="maxImageExtent">
         <type const="False">VkExtent2D</type>
      </member>
      <member name="maxImageArrayLayers">
         <type const="False">uint32_t</type>
      </member>
      <member name="supportedTransforms">
         <type const="False">VkSurfaceTransformFlagsKHR</type>
      </member>
      <member name="currentTransform">
         <type const="False">VkSurfaceTransformFlagBitsKHR</type>
      </member>
      <member name="supportedCompositeAlpha">
         <type const="False">VkCompositeAlphaFlagsKHR</type>
      </member>
      <member name="supportedUsageFlags">
         <type const="False">VkImageUsageFlags</type>
      </member>
   </struct>
   <struct name="VkExtent2D">
      <member name="width">
         <type const="False">uint32_t</type>
      </member>
      <member name="height">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkAcquireNextImageInfoKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="swapchain">
         <type const="False">VkSwapchainKHR</type>
      </member>
      <member name="timeout">
         <type const="False">uint64_t</type>
      </member>
      <member name="semaphore">
         <type const="False">VkSemaphore</type>
      </member>
      <member name="fence">
         <type const="False">VkFence</type>
      </member>
      <member name="deviceMask">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkRect2D">
      <member name="offset">
         <type const="False">VkOffset2D</type>
      </member>
      <member name="extent">
         <type const="False">VkExtent2D</type>
      </member>
   </struct>
   <struct name="VkOffset2D">
      <member name="x">
         <type const="False">int32_t</type>
      </member>
      <member name="y">
         <type const="False">int32_t</type>
      </member>
   </struct>
   <struct name="VkDeviceGroupPresentCapabilitiesKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="presentMask">
         <array length="32">
            <type const="False">uint32_t</type>
         </array>
      </member>
      <member name="modes">
         <type const="False">VkDeviceGroupPresentModeFlagsKHR</type>
      </member>
   </struct>
   <struct name="VkDeviceGroupSwapchainCreateInfoKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="modes">
         <type const="False">VkDeviceGroupPresentModeFlagsKHR</type>
      </member>
   </struct>
   <struct name="VkDeviceGroupPresentInfoKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="swapchainCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pDeviceMasks">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="mode">
         <type const="False">VkDeviceGroupPresentModeFlagBitsKHR</type>
      </member>
   </struct>
   <struct name="VkBindImageMemorySwapchainInfoKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="swapchain">
         <type const="False">VkSwapchainKHR</type>
      </member>
      <member name="imageIndex">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkImageSwapchainCreateInfoKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="swapchain">
         <type const="False">VkSwapchainKHR</type>
      </member>
   </struct>
   <struct name="VkPresentInfoKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="waitSemaphoreCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pWaitSemaphores">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
      <member name="swapchainCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pSwapchains">
         <pointer const="False">
            <type const="True">VkSwapchainKHR</type>
         </pointer>
      </member>
      <member name="pImageIndices">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="pResults">
         <pointer const="False">
            <type const="False">VkResult</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSwapchainCreateInfoKHR">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkSwapchainCreateFlagsKHR</type>
      </member>
      <member name="surface">
         <type const="False">VkSurfaceKHR</type>
      </member>
      <member name="minImageCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="imageFormat">
         <type const="False">VkFormat</type>
      </member>
      <member name="imageColorSpace">
         <type const="False">VkColorSpaceKHR</type>
      </member>
      <member name="imageExtent">
         <type const="False">VkExtent2D</type>
      </member>
      <member name="imageArrayLayers">
         <type const="False">uint32_t</type>
      </member>
      <member name="imageUsage">
         <type const="False">VkImageUsageFlags</type>
      </member>
      <member name="imageSharingMode">
         <type const="False">VkSharingMode</type>
      </member>
      <member name="queueFamilyIndexCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pQueueFamilyIndices">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="preTransform">
         <type const="False">VkSurfaceTransformFlagBitsKHR</type>
      </member>
      <member name="compositeAlpha">
         <type const="False">VkCompositeAlphaFlagBitsKHR</type>
      </member>
      <member name="presentMode">
         <type const="False">VkPresentModeKHR</type>
      </member>
      <member name="clipped">
         <type const="False">VkBool32</type>
      </member>
      <member name="oldSwapchain">
         <type const="False">VkSwapchainKHR</type>
      </member>
   </struct>
   <struct name="VkDebugUtilsMessengerCallbackDataEXT">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkDebugUtilsMessengerCallbackDataFlagsEXT</type>
      </member>
      <member name="pMessageIdName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="messageIdNumber">
         <type const="False">int32_t</type>
      </member>
      <member name="pMessage">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="queueLabelCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pQueueLabels">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </member>
      <member name="cmdBufLabelCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pCmdBufLabels">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </member>
      <member name="objectCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pObjects">
         <pointer const="False">
            <type const="True">VkDebugUtilsObjectNameInfoEXT</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDebugUtilsObjectNameInfoEXT">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="objectType">
         <type const="False">VkObjectType</type>
      </member>
      <member name="objectHandle">
         <type const="False">uint64_t</type>
      </member>
      <member name="pObjectName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDebugUtilsLabelEXT">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="pLabelName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="color">
         <array length="4">
            <type const="False">float</type>
         </array>
      </member>
   </struct>
   <struct name="VkDebugUtilsMessengerCreateInfoEXT">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkDebugUtilsMessengerCreateFlagsEXT</type>
      </member>
      <member name="messageSeverity">
         <type const="False">VkDebugUtilsMessageSeverityFlagsEXT</type>
      </member>
      <member name="messageType">
         <type const="False">VkDebugUtilsMessageTypeFlagsEXT</type>
      </member>
      <member name="pfnUserCallback">
         <type const="False">PFN_vkDebugUtilsMessengerCallbackEXT</type>
      </member>
      <member name="pUserData">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDebugUtilsObjectTagInfoEXT">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="objectType">
         <type const="False">VkObjectType</type>
      </member>
      <member name="objectHandle">
         <type const="False">uint64_t</type>
      </member>
      <member name="tagName">
         <type const="False">uint64_t</type>
      </member>
      <member name="tagSize">
         <type const="False">size_t</type>
      </member>
      <member name="pTag">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceShaderDrawParameterFeatures">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="shaderDrawParameters">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkDescriptorSetLayoutSupport">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="supported">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkDescriptorSetLayoutCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkDescriptorSetLayoutCreateFlags</type>
      </member>
      <member name="bindingCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pBindings">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayoutBinding</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDescriptorSetLayoutBinding">
      <member name="binding">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorType">
         <type const="False">VkDescriptorType</type>
      </member>
      <member name="descriptorCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="stageFlags">
         <type const="False">VkShaderStageFlags</type>
      </member>
      <member name="pImmutableSamplers">
         <pointer const="False">
            <type const="True">VkSampler</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceMaintenance3Properties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="maxPerSetDescriptors">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxMemoryAllocationSize">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkExternalSemaphoreProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="exportFromImportedHandleTypes">
         <type const="False">VkExternalSemaphoreHandleTypeFlags</type>
      </member>
      <member name="compatibleHandleTypes">
         <type const="False">VkExternalSemaphoreHandleTypeFlags</type>
      </member>
      <member name="externalSemaphoreFeatures">
         <type const="False">VkExternalSemaphoreFeatureFlags</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceExternalSemaphoreInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="handleType">
         <type const="False">VkExternalSemaphoreHandleTypeFlagBits</type>
      </member>
   </struct>
   <struct name="VkExportSemaphoreCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="handleTypes">
         <type const="False">VkExternalSemaphoreHandleTypeFlags</type>
      </member>
   </struct>
   <struct name="VkExportFenceCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="handleTypes">
         <type const="False">VkExternalFenceHandleTypeFlags</type>
      </member>
   </struct>
   <struct name="VkExternalFenceProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="exportFromImportedHandleTypes">
         <type const="False">VkExternalFenceHandleTypeFlags</type>
      </member>
      <member name="compatibleHandleTypes">
         <type const="False">VkExternalFenceHandleTypeFlags</type>
      </member>
      <member name="externalFenceFeatures">
         <type const="False">VkExternalFenceFeatureFlags</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceExternalFenceInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="handleType">
         <type const="False">VkExternalFenceHandleTypeFlagBits</type>
      </member>
   </struct>
   <struct name="VkExportMemoryAllocateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="handleTypes">
         <type const="False">VkExternalMemoryHandleTypeFlags</type>
      </member>
   </struct>
   <struct name="VkExternalMemoryBufferCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="handleTypes">
         <type const="False">VkExternalMemoryHandleTypeFlags</type>
      </member>
   </struct>
   <struct name="VkExternalMemoryImageCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="handleTypes">
         <type const="False">VkExternalMemoryHandleTypeFlags</type>
      </member>
   </struct>
   <struct name="VkExternalBufferProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="externalMemoryProperties">
         <type const="False">VkExternalMemoryProperties</type>
      </member>
   </struct>
   <struct name="VkExternalMemoryProperties">
      <member name="externalMemoryFeatures">
         <type const="False">VkExternalMemoryFeatureFlags</type>
      </member>
      <member name="exportFromImportedHandleTypes">
         <type const="False">VkExternalMemoryHandleTypeFlags</type>
      </member>
      <member name="compatibleHandleTypes">
         <type const="False">VkExternalMemoryHandleTypeFlags</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceExternalBufferInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkBufferCreateFlags</type>
      </member>
      <member name="usage">
         <type const="False">VkBufferUsageFlags</type>
      </member>
      <member name="handleType">
         <type const="False">VkExternalMemoryHandleTypeFlagBits</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceIDProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="deviceUUID">
         <array length="16">
            <type const="False">uint8_t</type>
         </array>
      </member>
      <member name="driverUUID">
         <array length="16">
            <type const="False">uint8_t</type>
         </array>
      </member>
      <member name="deviceLUID">
         <array length="8">
            <type const="False">uint8_t</type>
         </array>
      </member>
      <member name="deviceNodeMask">
         <type const="False">uint32_t</type>
      </member>
      <member name="deviceLUIDValid">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkExternalImageFormatProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="externalMemoryProperties">
         <type const="False">VkExternalMemoryProperties</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceExternalImageFormatInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="handleType">
         <type const="False">VkExternalMemoryHandleTypeFlagBits</type>
      </member>
   </struct>
   <struct name="VkDescriptorUpdateTemplateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkDescriptorUpdateTemplateCreateFlags</type>
      </member>
      <member name="descriptorUpdateEntryCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pDescriptorUpdateEntries">
         <pointer const="False">
            <type const="True">VkDescriptorUpdateTemplateEntry</type>
         </pointer>
      </member>
      <member name="templateType">
         <type const="False">VkDescriptorUpdateTemplateType</type>
      </member>
      <member name="descriptorSetLayout">
         <type const="False">VkDescriptorSetLayout</type>
      </member>
      <member name="pipelineBindPoint">
         <type const="False">VkPipelineBindPoint</type>
      </member>
      <member name="pipelineLayout">
         <type const="False">VkPipelineLayout</type>
      </member>
      <member name="set">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDescriptorUpdateTemplateEntry">
      <member name="dstBinding">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstArrayElement">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorType">
         <type const="False">VkDescriptorType</type>
      </member>
      <member name="offset">
         <type const="False">size_t</type>
      </member>
      <member name="stride">
         <type const="False">size_t</type>
      </member>
   </struct>
   <struct name="VkSamplerYcbcrConversionCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="ycbcrModel">
         <type const="False">VkSamplerYcbcrModelConversion</type>
      </member>
      <member name="ycbcrRange">
         <type const="False">VkSamplerYcbcrRange</type>
      </member>
      <member name="components">
         <type const="False">VkComponentMapping</type>
      </member>
      <member name="xChromaOffset">
         <type const="False">VkChromaLocation</type>
      </member>
      <member name="yChromaOffset">
         <type const="False">VkChromaLocation</type>
      </member>
      <member name="chromaFilter">
         <type const="False">VkFilter</type>
      </member>
      <member name="forceExplicitReconstruction">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkComponentMapping">
      <member name="r">
         <type const="False">VkComponentSwizzle</type>
      </member>
      <member name="g">
         <type const="False">VkComponentSwizzle</type>
      </member>
      <member name="b">
         <type const="False">VkComponentSwizzle</type>
      </member>
      <member name="a">
         <type const="False">VkComponentSwizzle</type>
      </member>
   </struct>
   <struct name="VkSamplerYcbcrConversionImageFormatProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="combinedImageSamplerDescriptorCount">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceSamplerYcbcrConversionFeatures">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="samplerYcbcrConversion">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkImagePlaneMemoryRequirementsInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="planeAspect">
         <type const="False">VkImageAspectFlagBits</type>
      </member>
   </struct>
   <struct name="VkBindImagePlaneMemoryInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="planeAspect">
         <type const="False">VkImageAspectFlagBits</type>
      </member>
   </struct>
   <struct name="VkSamplerYcbcrConversionInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="conversion">
         <type const="False">VkSamplerYcbcrConversion</type>
      </member>
   </struct>
   <struct name="VkDeviceQueueInfo2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkDeviceQueueCreateFlags</type>
      </member>
      <member name="queueFamilyIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="queueIndex">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkProtectedSubmitInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="protectedSubmit">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceProtectedMemoryProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="protectedNoFault">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceProtectedMemoryFeatures">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="protectedMemory">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceVariablePointerFeatures">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="variablePointersStorageBuffer">
         <type const="False">VkBool32</type>
      </member>
      <member name="variablePointers">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceMultiviewProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="maxMultiviewViewCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxMultiviewInstanceIndex">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceMultiviewFeatures">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="multiview">
         <type const="False">VkBool32</type>
      </member>
      <member name="multiviewGeometryShader">
         <type const="False">VkBool32</type>
      </member>
      <member name="multiviewTessellationShader">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkRenderPassMultiviewCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="subpassCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pViewMasks">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="dependencyCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pViewOffsets">
         <pointer const="False">
            <type const="True">int32_t</type>
         </pointer>
      </member>
      <member name="correlationMaskCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pCorrelationMasks">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPipelineTessellationDomainOriginStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="domainOrigin">
         <type const="False">VkTessellationDomainOrigin</type>
      </member>
   </struct>
   <struct name="VkImageViewUsageCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="usage">
         <type const="False">VkImageUsageFlags</type>
      </member>
   </struct>
   <struct name="VkInputAttachmentAspectReference">
      <member name="subpass">
         <type const="False">uint32_t</type>
      </member>
      <member name="inputAttachmentIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="aspectMask">
         <type const="False">VkImageAspectFlags</type>
      </member>
   </struct>
   <struct name="VkRenderPassInputAttachmentAspectCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="aspectReferenceCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pAspectReferences">
         <pointer const="False">
            <type const="True">VkInputAttachmentAspectReference</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPhysicalDevicePointClippingProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="pointClippingBehavior">
         <type const="False">VkPointClippingBehavior</type>
      </member>
   </struct>
   <struct name="VkSparseImageFormatProperties2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="properties">
         <type const="False">VkSparseImageFormatProperties</type>
      </member>
   </struct>
   <struct name="VkSparseImageFormatProperties">
      <member name="aspectMask">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="imageGranularity">
         <type const="False">VkExtent3D</type>
      </member>
      <member name="flags">
         <type const="False">VkSparseImageFormatFlags</type>
      </member>
   </struct>
   <struct name="VkExtent3D">
      <member name="width">
         <type const="False">uint32_t</type>
      </member>
      <member name="height">
         <type const="False">uint32_t</type>
      </member>
      <member name="depth">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceSparseImageFormatInfo2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="type">
         <type const="False">VkImageType</type>
      </member>
      <member name="samples">
         <type const="False">VkSampleCountFlagBits</type>
      </member>
      <member name="usage">
         <type const="False">VkImageUsageFlags</type>
      </member>
      <member name="tiling">
         <type const="False">VkImageTiling</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceMemoryProperties2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="memoryProperties">
         <type const="False">VkPhysicalDeviceMemoryProperties</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceMemoryProperties">
      <member name="memoryTypeCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="memoryTypes">
         <array length="32">
            <type const="False">VkMemoryType</type>
         </array>
      </member>
      <member name="memoryHeapCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="memoryHeaps">
         <array length="16">
            <type const="False">VkMemoryHeap</type>
         </array>
      </member>
   </struct>
   <struct name="VkMemoryHeap">
      <member name="size">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="flags">
         <type const="False">VkMemoryHeapFlags</type>
      </member>
   </struct>
   <struct name="VkMemoryType">
      <member name="propertyFlags">
         <type const="False">VkMemoryPropertyFlags</type>
      </member>
      <member name="heapIndex">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkQueueFamilyProperties2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="queueFamilyProperties">
         <type const="False">VkQueueFamilyProperties</type>
      </member>
   </struct>
   <struct name="VkQueueFamilyProperties">
      <member name="queueFlags">
         <type const="False">VkQueueFlags</type>
      </member>
      <member name="queueCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="timestampValidBits">
         <type const="False">uint32_t</type>
      </member>
      <member name="minImageTransferGranularity">
         <type const="False">VkExtent3D</type>
      </member>
   </struct>
   <struct name="VkImageFormatProperties2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="imageFormatProperties">
         <type const="False">VkImageFormatProperties</type>
      </member>
   </struct>
   <struct name="VkImageFormatProperties">
      <member name="maxExtent">
         <type const="False">VkExtent3D</type>
      </member>
      <member name="maxMipLevels">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxArrayLayers">
         <type const="False">uint32_t</type>
      </member>
      <member name="sampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="maxResourceSize">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceImageFormatInfo2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="type">
         <type const="False">VkImageType</type>
      </member>
      <member name="tiling">
         <type const="False">VkImageTiling</type>
      </member>
      <member name="usage">
         <type const="False">VkImageUsageFlags</type>
      </member>
      <member name="flags">
         <type const="False">VkImageCreateFlags</type>
      </member>
   </struct>
   <struct name="VkFormatProperties2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="formatProperties">
         <type const="False">VkFormatProperties</type>
      </member>
   </struct>
   <struct name="VkFormatProperties">
      <member name="linearTilingFeatures">
         <type const="False">VkFormatFeatureFlags</type>
      </member>
      <member name="optimalTilingFeatures">
         <type const="False">VkFormatFeatureFlags</type>
      </member>
      <member name="bufferFeatures">
         <type const="False">VkFormatFeatureFlags</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceProperties2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="properties">
         <type const="False">VkPhysicalDeviceProperties</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceProperties">
      <member name="apiVersion">
         <type const="False">uint32_t</type>
      </member>
      <member name="driverVersion">
         <type const="False">uint32_t</type>
      </member>
      <member name="vendorID">
         <type const="False">uint32_t</type>
      </member>
      <member name="deviceID">
         <type const="False">uint32_t</type>
      </member>
      <member name="deviceType">
         <type const="False">VkPhysicalDeviceType</type>
      </member>
      <member name="deviceName">
         <array length="256">
            <type const="False">char</type>
         </array>
      </member>
      <member name="pipelineCacheUUID">
         <array length="16">
            <type const="False">uint8_t</type>
         </array>
      </member>
      <member name="limits">
         <type const="False">VkPhysicalDeviceLimits</type>
      </member>
      <member name="sparseProperties">
         <type const="False">VkPhysicalDeviceSparseProperties</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceSparseProperties">
      <member name="residencyStandard2DBlockShape">
         <type const="False">VkBool32</type>
      </member>
      <member name="residencyStandard2DMultisampleBlockShape">
         <type const="False">VkBool32</type>
      </member>
      <member name="residencyStandard3DBlockShape">
         <type const="False">VkBool32</type>
      </member>
      <member name="residencyAlignedMipSize">
         <type const="False">VkBool32</type>
      </member>
      <member name="residencyNonResidentStrict">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceLimits">
      <member name="maxImageDimension1D">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageDimension2D">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageDimension3D">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageDimensionCube">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageArrayLayers">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTexelBufferElements">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxUniformBufferRange">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxStorageBufferRange">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPushConstantsSize">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxMemoryAllocationCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxSamplerAllocationCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="bufferImageGranularity">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="sparseAddressSpaceSize">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="maxBoundDescriptorSets">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorSamplers">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorUniformBuffers">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorStorageBuffers">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorSampledImages">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorStorageImages">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorInputAttachments">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageResources">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetSamplers">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetUniformBuffers">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetUniformBuffersDynamic">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetStorageBuffers">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetStorageBuffersDynamic">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetSampledImages">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetStorageImages">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetInputAttachments">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexInputAttributes">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexInputBindings">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexInputAttributeOffset">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexInputBindingStride">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexOutputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationGenerationLevel">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationPatchSize">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationControlPerVertexInputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationControlPerVertexOutputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationControlPerPatchOutputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationControlTotalOutputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationEvaluationInputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationEvaluationOutputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryShaderInvocations">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryInputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryOutputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryOutputVertices">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryTotalOutputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFragmentInputComponents">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFragmentOutputAttachments">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFragmentDualSrcAttachments">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFragmentCombinedOutputResources">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxComputeSharedMemorySize">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxComputeWorkGroupCount">
         <array length="3">
            <type const="False">uint32_t</type>
         </array>
      </member>
      <member name="maxComputeWorkGroupInvocations">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxComputeWorkGroupSize">
         <array length="3">
            <type const="False">uint32_t</type>
         </array>
      </member>
      <member name="subPixelPrecisionBits">
         <type const="False">uint32_t</type>
      </member>
      <member name="subTexelPrecisionBits">
         <type const="False">uint32_t</type>
      </member>
      <member name="mipmapPrecisionBits">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDrawIndexedIndexValue">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDrawIndirectCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxSamplerLodBias">
         <type const="False">float</type>
      </member>
      <member name="maxSamplerAnisotropy">
         <type const="False">float</type>
      </member>
      <member name="maxViewports">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxViewportDimensions">
         <array length="2">
            <type const="False">uint32_t</type>
         </array>
      </member>
      <member name="viewportBoundsRange">
         <array length="2">
            <type const="False">float</type>
         </array>
      </member>
      <member name="viewportSubPixelBits">
         <type const="False">uint32_t</type>
      </member>
      <member name="minMemoryMapAlignment">
         <type const="False">size_t</type>
      </member>
      <member name="minTexelBufferOffsetAlignment">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="minUniformBufferOffsetAlignment">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="minStorageBufferOffsetAlignment">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="minTexelOffset">
         <type const="False">int32_t</type>
      </member>
      <member name="maxTexelOffset">
         <type const="False">uint32_t</type>
      </member>
      <member name="minTexelGatherOffset">
         <type const="False">int32_t</type>
      </member>
      <member name="maxTexelGatherOffset">
         <type const="False">uint32_t</type>
      </member>
      <member name="minInterpolationOffset">
         <type const="False">float</type>
      </member>
      <member name="maxInterpolationOffset">
         <type const="False">float</type>
      </member>
      <member name="subPixelInterpolationOffsetBits">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFramebufferWidth">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFramebufferHeight">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFramebufferLayers">
         <type const="False">uint32_t</type>
      </member>
      <member name="framebufferColorSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="framebufferDepthSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="framebufferStencilSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="framebufferNoAttachmentsSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="maxColorAttachments">
         <type const="False">uint32_t</type>
      </member>
      <member name="sampledImageColorSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="sampledImageIntegerSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="sampledImageDepthSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="sampledImageStencilSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="storageImageSampleCounts">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="maxSampleMaskWords">
         <type const="False">uint32_t</type>
      </member>
      <member name="timestampComputeAndGraphics">
         <type const="False">VkBool32</type>
      </member>
      <member name="timestampPeriod">
         <type const="False">float</type>
      </member>
      <member name="maxClipDistances">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxCullDistances">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxCombinedClipAndCullDistances">
         <type const="False">uint32_t</type>
      </member>
      <member name="discreteQueuePriorities">
         <type const="False">uint32_t</type>
      </member>
      <member name="pointSizeRange">
         <array length="2">
            <type const="False">float</type>
         </array>
      </member>
      <member name="lineWidthRange">
         <array length="2">
            <type const="False">float</type>
         </array>
      </member>
      <member name="pointSizeGranularity">
         <type const="False">float</type>
      </member>
      <member name="lineWidthGranularity">
         <type const="False">float</type>
      </member>
      <member name="strictLines">
         <type const="False">VkBool32</type>
      </member>
      <member name="standardSampleLocations">
         <type const="False">VkBool32</type>
      </member>
      <member name="optimalBufferCopyOffsetAlignment">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="optimalBufferCopyRowPitchAlignment">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="nonCoherentAtomSize">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceFeatures2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="features">
         <type const="False">VkPhysicalDeviceFeatures</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceFeatures">
      <member name="robustBufferAccess">
         <type const="False">VkBool32</type>
      </member>
      <member name="fullDrawIndexUint32">
         <type const="False">VkBool32</type>
      </member>
      <member name="imageCubeArray">
         <type const="False">VkBool32</type>
      </member>
      <member name="independentBlend">
         <type const="False">VkBool32</type>
      </member>
      <member name="geometryShader">
         <type const="False">VkBool32</type>
      </member>
      <member name="tessellationShader">
         <type const="False">VkBool32</type>
      </member>
      <member name="sampleRateShading">
         <type const="False">VkBool32</type>
      </member>
      <member name="dualSrcBlend">
         <type const="False">VkBool32</type>
      </member>
      <member name="logicOp">
         <type const="False">VkBool32</type>
      </member>
      <member name="multiDrawIndirect">
         <type const="False">VkBool32</type>
      </member>
      <member name="drawIndirectFirstInstance">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthClamp">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthBiasClamp">
         <type const="False">VkBool32</type>
      </member>
      <member name="fillModeNonSolid">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthBounds">
         <type const="False">VkBool32</type>
      </member>
      <member name="wideLines">
         <type const="False">VkBool32</type>
      </member>
      <member name="largePoints">
         <type const="False">VkBool32</type>
      </member>
      <member name="alphaToOne">
         <type const="False">VkBool32</type>
      </member>
      <member name="multiViewport">
         <type const="False">VkBool32</type>
      </member>
      <member name="samplerAnisotropy">
         <type const="False">VkBool32</type>
      </member>
      <member name="textureCompressionETC2">
         <type const="False">VkBool32</type>
      </member>
      <member name="textureCompressionASTC_LDR">
         <type const="False">VkBool32</type>
      </member>
      <member name="textureCompressionBC">
         <type const="False">VkBool32</type>
      </member>
      <member name="occlusionQueryPrecise">
         <type const="False">VkBool32</type>
      </member>
      <member name="pipelineStatisticsQuery">
         <type const="False">VkBool32</type>
      </member>
      <member name="vertexPipelineStoresAndAtomics">
         <type const="False">VkBool32</type>
      </member>
      <member name="fragmentStoresAndAtomics">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderTessellationAndGeometryPointSize">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderImageGatherExtended">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageExtendedFormats">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageMultisample">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageReadWithoutFormat">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageWriteWithoutFormat">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderUniformBufferArrayDynamicIndexing">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderSampledImageArrayDynamicIndexing">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageBufferArrayDynamicIndexing">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageArrayDynamicIndexing">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderClipDistance">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderCullDistance">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderFloat64">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderInt64">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderInt16">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderResourceResidency">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderResourceMinLod">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseBinding">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidencyBuffer">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidencyImage2D">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidencyImage3D">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidency2Samples">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidency4Samples">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidency8Samples">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidency16Samples">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidencyAliased">
         <type const="False">VkBool32</type>
      </member>
      <member name="variableMultisampleRate">
         <type const="False">VkBool32</type>
      </member>
      <member name="inheritedQueries">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkSparseImageMemoryRequirements2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="memoryRequirements">
         <type const="False">VkSparseImageMemoryRequirements</type>
      </member>
   </struct>
   <struct name="VkSparseImageMemoryRequirements">
      <member name="formatProperties">
         <type const="False">VkSparseImageFormatProperties</type>
      </member>
      <member name="imageMipTailFirstLod">
         <type const="False">uint32_t</type>
      </member>
      <member name="imageMipTailSize">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="imageMipTailOffset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="imageMipTailStride">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkImageSparseMemoryRequirementsInfo2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="image">
         <type const="False">VkImage</type>
      </member>
   </struct>
   <struct name="VkMemoryRequirements2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="memoryRequirements">
         <type const="False">VkMemoryRequirements</type>
      </member>
   </struct>
   <struct name="VkMemoryRequirements">
      <member name="size">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="alignment">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="memoryTypeBits">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkBufferMemoryRequirementsInfo2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="buffer">
         <type const="False">VkBuffer</type>
      </member>
   </struct>
   <struct name="VkImageMemoryRequirementsInfo2">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="image">
         <type const="False">VkImage</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceGroupProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="physicalDeviceCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="physicalDevices">
         <array length="32">
            <type const="False">VkPhysicalDevice</type>
         </array>
      </member>
      <member name="subsetAllocation">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkDeviceGroupDeviceCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="physicalDeviceCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pPhysicalDevices">
         <pointer const="False">
            <type const="True">VkPhysicalDevice</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkBindImageMemoryDeviceGroupInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="deviceIndexCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pDeviceIndices">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="splitInstanceBindRegionCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pSplitInstanceBindRegions">
         <pointer const="False">
            <type const="True">VkRect2D</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkBindBufferMemoryDeviceGroupInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="deviceIndexCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pDeviceIndices">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDeviceGroupBindSparseInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="resourceDeviceIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="memoryDeviceIndex">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDeviceGroupSubmitInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="waitSemaphoreCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pWaitSemaphoreDeviceIndices">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="commandBufferCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pCommandBufferDeviceMasks">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="signalSemaphoreCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pSignalSemaphoreDeviceIndices">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDeviceGroupCommandBufferBeginInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="deviceMask">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDeviceGroupRenderPassBeginInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="deviceMask">
         <type const="False">uint32_t</type>
      </member>
      <member name="deviceRenderAreaCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pDeviceRenderAreas">
         <pointer const="False">
            <type const="True">VkRect2D</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkMemoryAllocateFlagsInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkMemoryAllocateFlags</type>
      </member>
      <member name="deviceMask">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkMemoryDedicatedAllocateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="image">
         <type const="False">VkImage</type>
      </member>
      <member name="buffer">
         <type const="False">VkBuffer</type>
      </member>
   </struct>
   <struct name="VkMemoryDedicatedRequirements">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="prefersDedicatedAllocation">
         <type const="False">VkBool32</type>
      </member>
      <member name="requiresDedicatedAllocation">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPhysicalDevice16BitStorageFeatures">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="storageBuffer16BitAccess">
         <type const="False">VkBool32</type>
      </member>
      <member name="uniformAndStorageBuffer16BitAccess">
         <type const="False">VkBool32</type>
      </member>
      <member name="storagePushConstant16">
         <type const="False">VkBool32</type>
      </member>
      <member name="storageInputOutput16">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkBindImageMemoryInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="image">
         <type const="False">VkImage</type>
      </member>
      <member name="memory">
         <type const="False">VkDeviceMemory</type>
      </member>
      <member name="memoryOffset">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkBindBufferMemoryInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="buffer">
         <type const="False">VkBuffer</type>
      </member>
      <member name="memory">
         <type const="False">VkDeviceMemory</type>
      </member>
      <member name="memoryOffset">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceSubgroupProperties">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="subgroupSize">
         <type const="False">uint32_t</type>
      </member>
      <member name="supportedStages">
         <type const="False">VkShaderStageFlags</type>
      </member>
      <member name="supportedOperations">
         <type const="False">VkSubgroupFeatureFlags</type>
      </member>
      <member name="quadOperationsInAllStages">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkBaseInStructure">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">VkBaseInStructure</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkBaseOutStructure">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="False">VkBaseOutStructure</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkMemoryBarrier">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="srcAccessMask">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dstAccessMask">
         <type const="False">VkAccessFlags</type>
      </member>
   </struct>
   <struct name="VkImageMemoryBarrier">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="srcAccessMask">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dstAccessMask">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="oldLayout">
         <type const="False">VkImageLayout</type>
      </member>
      <member name="newLayout">
         <type const="False">VkImageLayout</type>
      </member>
      <member name="srcQueueFamilyIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstQueueFamilyIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="image">
         <type const="False">VkImage</type>
      </member>
      <member name="subresourceRange">
         <type const="False">VkImageSubresourceRange</type>
      </member>
   </struct>
   <struct name="VkImageSubresourceRange">
      <member name="aspectMask">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="baseMipLevel">
         <type const="False">uint32_t</type>
      </member>
      <member name="levelCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="baseArrayLayer">
         <type const="False">uint32_t</type>
      </member>
      <member name="layerCount">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDrawIndirectCommand">
      <member name="vertexCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="instanceCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="firstVertex">
         <type const="False">uint32_t</type>
      </member>
      <member name="firstInstance">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDrawIndexedIndirectCommand">
      <member name="indexCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="instanceCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="firstIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="vertexOffset">
         <type const="False">int32_t</type>
      </member>
      <member name="firstInstance">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDispatchIndirectCommand">
      <member name="x">
         <type const="False">uint32_t</type>
      </member>
      <member name="y">
         <type const="False">uint32_t</type>
      </member>
      <member name="z">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkBufferMemoryBarrier">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="srcAccessMask">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dstAccessMask">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="srcQueueFamilyIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstQueueFamilyIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="buffer">
         <type const="False">VkBuffer</type>
      </member>
      <member name="offset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkRenderPassBeginInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="renderPass">
         <type const="False">VkRenderPass</type>
      </member>
      <member name="framebuffer">
         <type const="False">VkFramebuffer</type>
      </member>
      <member name="renderArea">
         <type const="False">VkRect2D</type>
      </member>
      <member name="clearValueCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pClearValues">
         <pointer const="False">
            <type const="True">VkClearValue</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkClearDepthStencilValue">
      <member name="depth">
         <type const="False">float</type>
      </member>
      <member name="stencil">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkImageResolve">
      <member name="srcSubresource">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="srcOffset">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="dstSubresource">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="dstOffset">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="extent">
         <type const="False">VkExtent3D</type>
      </member>
   </struct>
   <struct name="VkOffset3D">
      <member name="x">
         <type const="False">int32_t</type>
      </member>
      <member name="y">
         <type const="False">int32_t</type>
      </member>
      <member name="z">
         <type const="False">int32_t</type>
      </member>
   </struct>
   <struct name="VkImageSubresourceLayers">
      <member name="aspectMask">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="mipLevel">
         <type const="False">uint32_t</type>
      </member>
      <member name="baseArrayLayer">
         <type const="False">uint32_t</type>
      </member>
      <member name="layerCount">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkClearRect">
      <member name="rect">
         <type const="False">VkRect2D</type>
      </member>
      <member name="baseArrayLayer">
         <type const="False">uint32_t</type>
      </member>
      <member name="layerCount">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkClearAttachment">
      <member name="aspectMask">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="colorAttachment">
         <type const="False">uint32_t</type>
      </member>
      <member name="clearValue">
         <type const="False">VkClearValue</type>
      </member>
   </struct>
   <struct name="VkBufferImageCopy">
      <member name="bufferOffset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="bufferRowLength">
         <type const="False">uint32_t</type>
      </member>
      <member name="bufferImageHeight">
         <type const="False">uint32_t</type>
      </member>
      <member name="imageSubresource">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="imageOffset">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="imageExtent">
         <type const="False">VkExtent3D</type>
      </member>
   </struct>
   <struct name="VkImageBlit">
      <member name="srcSubresource">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="srcOffsets">
         <array length="2">
            <type const="False">VkOffset3D</type>
         </array>
      </member>
      <member name="dstSubresource">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="dstOffsets">
         <array length="2">
            <type const="False">VkOffset3D</type>
         </array>
      </member>
   </struct>
   <struct name="VkImageCopy">
      <member name="srcSubresource">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="srcOffset">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="dstSubresource">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="dstOffset">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="extent">
         <type const="False">VkExtent3D</type>
      </member>
   </struct>
   <struct name="VkBufferCopy">
      <member name="srcOffset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="dstOffset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkViewport">
      <member name="x">
         <type const="False">float</type>
      </member>
      <member name="y">
         <type const="False">float</type>
      </member>
      <member name="width">
         <type const="False">float</type>
      </member>
      <member name="height">
         <type const="False">float</type>
      </member>
      <member name="minDepth">
         <type const="False">float</type>
      </member>
      <member name="maxDepth">
         <type const="False">float</type>
      </member>
   </struct>
   <struct name="VkCommandBufferBeginInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkCommandBufferUsageFlags</type>
      </member>
      <member name="pInheritanceInfo">
         <pointer const="False">
            <type const="True">VkCommandBufferInheritanceInfo</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkCommandBufferInheritanceInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="renderPass">
         <type const="False">VkRenderPass</type>
      </member>
      <member name="subpass">
         <type const="False">uint32_t</type>
      </member>
      <member name="framebuffer">
         <type const="False">VkFramebuffer</type>
      </member>
      <member name="occlusionQueryEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="queryFlags">
         <type const="False">VkQueryControlFlags</type>
      </member>
      <member name="pipelineStatistics">
         <type const="False">VkQueryPipelineStatisticFlags</type>
      </member>
   </struct>
   <struct name="VkCommandBufferAllocateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="commandPool">
         <type const="False">VkCommandPool</type>
      </member>
      <member name="level">
         <type const="False">VkCommandBufferLevel</type>
      </member>
      <member name="commandBufferCount">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkCommandPoolCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkCommandPoolCreateFlags</type>
      </member>
      <member name="queueFamilyIndex">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkRenderPassCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkRenderPassCreateFlags</type>
      </member>
      <member name="attachmentCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pAttachments">
         <pointer const="False">
            <type const="True">VkAttachmentDescription</type>
         </pointer>
      </member>
      <member name="subpassCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pSubpasses">
         <pointer const="False">
            <type const="True">VkSubpassDescription</type>
         </pointer>
      </member>
      <member name="dependencyCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pDependencies">
         <pointer const="False">
            <type const="True">VkSubpassDependency</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSubpassDependency">
      <member name="srcSubpass">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstSubpass">
         <type const="False">uint32_t</type>
      </member>
      <member name="srcStageMask">
         <type const="False">VkPipelineStageFlags</type>
      </member>
      <member name="dstStageMask">
         <type const="False">VkPipelineStageFlags</type>
      </member>
      <member name="srcAccessMask">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dstAccessMask">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dependencyFlags">
         <type const="False">VkDependencyFlags</type>
      </member>
   </struct>
   <struct name="VkSubpassDescription">
      <member name="flags">
         <type const="False">VkSubpassDescriptionFlags</type>
      </member>
      <member name="pipelineBindPoint">
         <type const="False">VkPipelineBindPoint</type>
      </member>
      <member name="inputAttachmentCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pInputAttachments">
         <pointer const="False">
            <type const="True">VkAttachmentReference</type>
         </pointer>
      </member>
      <member name="colorAttachmentCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pColorAttachments">
         <pointer const="False">
            <type const="True">VkAttachmentReference</type>
         </pointer>
      </member>
      <member name="pResolveAttachments">
         <pointer const="False">
            <type const="True">VkAttachmentReference</type>
         </pointer>
      </member>
      <member name="pDepthStencilAttachment">
         <pointer const="False">
            <type const="True">VkAttachmentReference</type>
         </pointer>
      </member>
      <member name="preserveAttachmentCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pPreserveAttachments">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkAttachmentReference">
      <member name="attachment">
         <type const="False">uint32_t</type>
      </member>
      <member name="layout">
         <type const="False">VkImageLayout</type>
      </member>
   </struct>
   <struct name="VkAttachmentDescription">
      <member name="flags">
         <type const="False">VkAttachmentDescriptionFlags</type>
      </member>
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="samples">
         <type const="False">VkSampleCountFlagBits</type>
      </member>
      <member name="loadOp">
         <type const="False">VkAttachmentLoadOp</type>
      </member>
      <member name="storeOp">
         <type const="False">VkAttachmentStoreOp</type>
      </member>
      <member name="stencilLoadOp">
         <type const="False">VkAttachmentLoadOp</type>
      </member>
      <member name="stencilStoreOp">
         <type const="False">VkAttachmentStoreOp</type>
      </member>
      <member name="initialLayout">
         <type const="False">VkImageLayout</type>
      </member>
      <member name="finalLayout">
         <type const="False">VkImageLayout</type>
      </member>
   </struct>
   <struct name="VkFramebufferCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkFramebufferCreateFlags</type>
      </member>
      <member name="renderPass">
         <type const="False">VkRenderPass</type>
      </member>
      <member name="attachmentCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pAttachments">
         <pointer const="False">
            <type const="True">VkImageView</type>
         </pointer>
      </member>
      <member name="width">
         <type const="False">uint32_t</type>
      </member>
      <member name="height">
         <type const="False">uint32_t</type>
      </member>
      <member name="layers">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkCopyDescriptorSet">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="srcSet">
         <type const="False">VkDescriptorSet</type>
      </member>
      <member name="srcBinding">
         <type const="False">uint32_t</type>
      </member>
      <member name="srcArrayElement">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstSet">
         <type const="False">VkDescriptorSet</type>
      </member>
      <member name="dstBinding">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstArrayElement">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorCount">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkWriteDescriptorSet">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="dstSet">
         <type const="False">VkDescriptorSet</type>
      </member>
      <member name="dstBinding">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstArrayElement">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorType">
         <type const="False">VkDescriptorType</type>
      </member>
      <member name="pImageInfo">
         <pointer const="False">
            <type const="True">VkDescriptorImageInfo</type>
         </pointer>
      </member>
      <member name="pBufferInfo">
         <pointer const="False">
            <type const="True">VkDescriptorBufferInfo</type>
         </pointer>
      </member>
      <member name="pTexelBufferView">
         <pointer const="False">
            <type const="True">VkBufferView</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDescriptorBufferInfo">
      <member name="buffer">
         <type const="False">VkBuffer</type>
      </member>
      <member name="offset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="range">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkDescriptorImageInfo">
      <member name="sampler">
         <type const="False">VkSampler</type>
      </member>
      <member name="imageView">
         <type const="False">VkImageView</type>
      </member>
      <member name="imageLayout">
         <type const="False">VkImageLayout</type>
      </member>
   </struct>
   <struct name="VkDescriptorSetAllocateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="descriptorPool">
         <type const="False">VkDescriptorPool</type>
      </member>
      <member name="descriptorSetCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pSetLayouts">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayout</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDescriptorPoolCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkDescriptorPoolCreateFlags</type>
      </member>
      <member name="maxSets">
         <type const="False">uint32_t</type>
      </member>
      <member name="poolSizeCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pPoolSizes">
         <pointer const="False">
            <type const="True">VkDescriptorPoolSize</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDescriptorPoolSize">
      <member name="type">
         <type const="False">VkDescriptorType</type>
      </member>
      <member name="descriptorCount">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkSamplerCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkSamplerCreateFlags</type>
      </member>
      <member name="magFilter">
         <type const="False">VkFilter</type>
      </member>
      <member name="minFilter">
         <type const="False">VkFilter</type>
      </member>
      <member name="mipmapMode">
         <type const="False">VkSamplerMipmapMode</type>
      </member>
      <member name="addressModeU">
         <type const="False">VkSamplerAddressMode</type>
      </member>
      <member name="addressModeV">
         <type const="False">VkSamplerAddressMode</type>
      </member>
      <member name="addressModeW">
         <type const="False">VkSamplerAddressMode</type>
      </member>
      <member name="mipLodBias">
         <type const="False">float</type>
      </member>
      <member name="anisotropyEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="maxAnisotropy">
         <type const="False">float</type>
      </member>
      <member name="compareEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="compareOp">
         <type const="False">VkCompareOp</type>
      </member>
      <member name="minLod">
         <type const="False">float</type>
      </member>
      <member name="maxLod">
         <type const="False">float</type>
      </member>
      <member name="borderColor">
         <type const="False">VkBorderColor</type>
      </member>
      <member name="unnormalizedCoordinates">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPipelineLayoutCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineLayoutCreateFlags</type>
      </member>
      <member name="setLayoutCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pSetLayouts">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayout</type>
         </pointer>
      </member>
      <member name="pushConstantRangeCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pPushConstantRanges">
         <pointer const="False">
            <type const="True">VkPushConstantRange</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPushConstantRange">
      <member name="stageFlags">
         <type const="False">VkShaderStageFlags</type>
      </member>
      <member name="offset">
         <type const="False">uint32_t</type>
      </member>
      <member name="size">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkComputePipelineCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineCreateFlags</type>
      </member>
      <member name="stage">
         <type const="False">VkPipelineShaderStageCreateInfo</type>
      </member>
      <member name="layout">
         <type const="False">VkPipelineLayout</type>
      </member>
      <member name="basePipelineHandle">
         <type const="False">VkPipeline</type>
      </member>
      <member name="basePipelineIndex">
         <type const="False">int32_t</type>
      </member>
   </struct>
   <struct name="VkPipelineShaderStageCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineShaderStageCreateFlags</type>
      </member>
      <member name="stage">
         <type const="False">VkShaderStageFlagBits</type>
      </member>
      <member name="module">
         <type const="False">VkShaderModule</type>
      </member>
      <member name="pName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="pSpecializationInfo">
         <pointer const="False">
            <type const="True">VkSpecializationInfo</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSpecializationInfo">
      <member name="mapEntryCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pMapEntries">
         <pointer const="False">
            <type const="True">VkSpecializationMapEntry</type>
         </pointer>
      </member>
      <member name="dataSize">
         <type const="False">size_t</type>
      </member>
      <member name="pData">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSpecializationMapEntry">
      <member name="antID">
         <type const="True">uint32_t</type>
      </member>
      <member name="offset">
         <type const="False">uint32_t</type>
      </member>
      <member name="size">
         <type const="False">size_t</type>
      </member>
   </struct>
   <struct name="VkGraphicsPipelineCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineCreateFlags</type>
      </member>
      <member name="stageCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pStages">
         <pointer const="False">
            <type const="True">VkPipelineShaderStageCreateInfo</type>
         </pointer>
      </member>
      <member name="pVertexInputState">
         <pointer const="False">
            <type const="True">VkPipelineVertexInputStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pInputAssemblyState">
         <pointer const="False">
            <type const="True">VkPipelineInputAssemblyStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pTessellationState">
         <pointer const="False">
            <type const="True">VkPipelineTessellationStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pViewportState">
         <pointer const="False">
            <type const="True">VkPipelineViewportStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pRasterizationState">
         <pointer const="False">
            <type const="True">VkPipelineRasterizationStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pMultisampleState">
         <pointer const="False">
            <type const="True">VkPipelineMultisampleStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pDepthStencilState">
         <pointer const="False">
            <type const="True">VkPipelineDepthStencilStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pColorBlendState">
         <pointer const="False">
            <type const="True">VkPipelineColorBlendStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pDynamicState">
         <pointer const="False">
            <type const="True">VkPipelineDynamicStateCreateInfo</type>
         </pointer>
      </member>
      <member name="layout">
         <type const="False">VkPipelineLayout</type>
      </member>
      <member name="renderPass">
         <type const="False">VkRenderPass</type>
      </member>
      <member name="subpass">
         <type const="False">uint32_t</type>
      </member>
      <member name="basePipelineHandle">
         <type const="False">VkPipeline</type>
      </member>
      <member name="basePipelineIndex">
         <type const="False">int32_t</type>
      </member>
   </struct>
   <struct name="VkPipelineDynamicStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineDynamicStateCreateFlags</type>
      </member>
      <member name="dynamicStateCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pDynamicStates">
         <pointer const="False">
            <type const="True">VkDynamicState</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPipelineColorBlendStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineColorBlendStateCreateFlags</type>
      </member>
      <member name="logicOpEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="logicOp">
         <type const="False">VkLogicOp</type>
      </member>
      <member name="attachmentCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pAttachments">
         <pointer const="False">
            <type const="True">VkPipelineColorBlendAttachmentState</type>
         </pointer>
      </member>
      <member name="blendConstants">
         <array length="4">
            <type const="False">float</type>
         </array>
      </member>
   </struct>
   <struct name="VkPipelineColorBlendAttachmentState">
      <member name="blendEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="srcColorBlendFactor">
         <type const="False">VkBlendFactor</type>
      </member>
      <member name="dstColorBlendFactor">
         <type const="False">VkBlendFactor</type>
      </member>
      <member name="colorBlendOp">
         <type const="False">VkBlendOp</type>
      </member>
      <member name="srcAlphaBlendFactor">
         <type const="False">VkBlendFactor</type>
      </member>
      <member name="dstAlphaBlendFactor">
         <type const="False">VkBlendFactor</type>
      </member>
      <member name="alphaBlendOp">
         <type const="False">VkBlendOp</type>
      </member>
      <member name="colorWriteMask">
         <type const="False">VkColorComponentFlags</type>
      </member>
   </struct>
   <struct name="VkPipelineDepthStencilStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineDepthStencilStateCreateFlags</type>
      </member>
      <member name="depthTestEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthWriteEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthCompareOp">
         <type const="False">VkCompareOp</type>
      </member>
      <member name="depthBoundsTestEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="stencilTestEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="front">
         <type const="False">VkStencilOpState</type>
      </member>
      <member name="back">
         <type const="False">VkStencilOpState</type>
      </member>
      <member name="minDepthBounds">
         <type const="False">float</type>
      </member>
      <member name="maxDepthBounds">
         <type const="False">float</type>
      </member>
   </struct>
   <struct name="VkStencilOpState">
      <member name="failOp">
         <type const="False">VkStencilOp</type>
      </member>
      <member name="passOp">
         <type const="False">VkStencilOp</type>
      </member>
      <member name="depthFailOp">
         <type const="False">VkStencilOp</type>
      </member>
      <member name="compareOp">
         <type const="False">VkCompareOp</type>
      </member>
      <member name="compareMask">
         <type const="False">uint32_t</type>
      </member>
      <member name="writeMask">
         <type const="False">uint32_t</type>
      </member>
      <member name="reference">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkPipelineMultisampleStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineMultisampleStateCreateFlags</type>
      </member>
      <member name="rasterizationSamples">
         <type const="False">VkSampleCountFlagBits</type>
      </member>
      <member name="sampleShadingEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="minSampleShading">
         <type const="False">float</type>
      </member>
      <member name="pSampleMask">
         <pointer const="False">
            <type const="True">VkSampleMask</type>
         </pointer>
      </member>
      <member name="alphaToCoverageEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="alphaToOneEnable">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPipelineRasterizationStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineRasterizationStateCreateFlags</type>
      </member>
      <member name="depthClampEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="rasterizerDiscardEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="polygonMode">
         <type const="False">VkPolygonMode</type>
      </member>
      <member name="cullMode">
         <type const="False">VkCullModeFlags</type>
      </member>
      <member name="frontFace">
         <type const="False">VkFrontFace</type>
      </member>
      <member name="depthBiasEnable">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthBiasConstantFactor">
         <type const="False">float</type>
      </member>
      <member name="depthBiasClamp">
         <type const="False">float</type>
      </member>
      <member name="depthBiasSlopeFactor">
         <type const="False">float</type>
      </member>
      <member name="lineWidth">
         <type const="False">float</type>
      </member>
   </struct>
   <struct name="VkPipelineViewportStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineViewportStateCreateFlags</type>
      </member>
      <member name="viewportCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pViewports">
         <pointer const="False">
            <type const="True">VkViewport</type>
         </pointer>
      </member>
      <member name="scissorCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pScissors">
         <pointer const="False">
            <type const="True">VkRect2D</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPipelineTessellationStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineTessellationStateCreateFlags</type>
      </member>
      <member name="patchControlPoints">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkPipelineInputAssemblyStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineInputAssemblyStateCreateFlags</type>
      </member>
      <member name="topology">
         <type const="False">VkPrimitiveTopology</type>
      </member>
      <member name="primitiveRestartEnable">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPipelineVertexInputStateCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineVertexInputStateCreateFlags</type>
      </member>
      <member name="vertexBindingDescriptionCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pVertexBindingDescriptions">
         <pointer const="False">
            <type const="True">VkVertexInputBindingDescription</type>
         </pointer>
      </member>
      <member name="vertexAttributeDescriptionCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pVertexAttributeDescriptions">
         <pointer const="False">
            <type const="True">VkVertexInputAttributeDescription</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkVertexInputAttributeDescription">
      <member name="location">
         <type const="False">uint32_t</type>
      </member>
      <member name="binding">
         <type const="False">uint32_t</type>
      </member>
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="offset">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkVertexInputBindingDescription">
      <member name="binding">
         <type const="False">uint32_t</type>
      </member>
      <member name="stride">
         <type const="False">uint32_t</type>
      </member>
      <member name="inputRate">
         <type const="False">VkVertexInputRate</type>
      </member>
   </struct>
   <struct name="VkPipelineCacheCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkPipelineCacheCreateFlags</type>
      </member>
      <member name="initialDataSize">
         <type const="False">size_t</type>
      </member>
      <member name="pInitialData">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkShaderModuleCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkShaderModuleCreateFlags</type>
      </member>
      <member name="codeSize">
         <type const="False">size_t</type>
      </member>
      <member name="pCode">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkImageViewCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkImageViewCreateFlags</type>
      </member>
      <member name="image">
         <type const="False">VkImage</type>
      </member>
      <member name="viewType">
         <type const="False">VkImageViewType</type>
      </member>
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="components">
         <type const="False">VkComponentMapping</type>
      </member>
      <member name="subresourceRange">
         <type const="False">VkImageSubresourceRange</type>
      </member>
   </struct>
   <struct name="VkSubresourceLayout">
      <member name="offset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="rowPitch">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="arrayPitch">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="depthPitch">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkImageSubresource">
      <member name="aspectMask">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="mipLevel">
         <type const="False">uint32_t</type>
      </member>
      <member name="arrayLayer">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkImageCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkImageCreateFlags</type>
      </member>
      <member name="imageType">
         <type const="False">VkImageType</type>
      </member>
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="extent">
         <type const="False">VkExtent3D</type>
      </member>
      <member name="mipLevels">
         <type const="False">uint32_t</type>
      </member>
      <member name="arrayLayers">
         <type const="False">uint32_t</type>
      </member>
      <member name="samples">
         <type const="False">VkSampleCountFlagBits</type>
      </member>
      <member name="tiling">
         <type const="False">VkImageTiling</type>
      </member>
      <member name="usage">
         <type const="False">VkImageUsageFlags</type>
      </member>
      <member name="sharingMode">
         <type const="False">VkSharingMode</type>
      </member>
      <member name="queueFamilyIndexCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pQueueFamilyIndices">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="initialLayout">
         <type const="False">VkImageLayout</type>
      </member>
   </struct>
   <struct name="VkBufferViewCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkBufferViewCreateFlags</type>
      </member>
      <member name="buffer">
         <type const="False">VkBuffer</type>
      </member>
      <member name="format">
         <type const="False">VkFormat</type>
      </member>
      <member name="offset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="range">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkBufferCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkBufferCreateFlags</type>
      </member>
      <member name="size">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="usage">
         <type const="False">VkBufferUsageFlags</type>
      </member>
      <member name="sharingMode">
         <type const="False">VkSharingMode</type>
      </member>
      <member name="queueFamilyIndexCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pQueueFamilyIndices">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkQueryPoolCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkQueryPoolCreateFlags</type>
      </member>
      <member name="queryType">
         <type const="False">VkQueryType</type>
      </member>
      <member name="queryCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pipelineStatistics">
         <type const="False">VkQueryPipelineStatisticFlags</type>
      </member>
   </struct>
   <struct name="VkEventCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkEventCreateFlags</type>
      </member>
   </struct>
   <struct name="VkSemaphoreCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkSemaphoreCreateFlags</type>
      </member>
   </struct>
   <struct name="VkFenceCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkFenceCreateFlags</type>
      </member>
   </struct>
   <struct name="VkBindSparseInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="waitSemaphoreCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pWaitSemaphores">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
      <member name="bufferBindCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pBufferBinds">
         <pointer const="False">
            <type const="True">VkSparseBufferMemoryBindInfo</type>
         </pointer>
      </member>
      <member name="imageOpaqueBindCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pImageOpaqueBinds">
         <pointer const="False">
            <type const="True">VkSparseImageOpaqueMemoryBindInfo</type>
         </pointer>
      </member>
      <member name="imageBindCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pImageBinds">
         <pointer const="False">
            <type const="True">VkSparseImageMemoryBindInfo</type>
         </pointer>
      </member>
      <member name="signalSemaphoreCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pSignalSemaphores">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSparseImageMemoryBindInfo">
      <member name="image">
         <type const="False">VkImage</type>
      </member>
      <member name="bindCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pBinds">
         <pointer const="False">
            <type const="True">VkSparseImageMemoryBind</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSparseImageMemoryBind">
      <member name="subresource">
         <type const="False">VkImageSubresource</type>
      </member>
      <member name="offset">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="extent">
         <type const="False">VkExtent3D</type>
      </member>
      <member name="memory">
         <type const="False">VkDeviceMemory</type>
      </member>
      <member name="memoryOffset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="flags">
         <type const="False">VkSparseMemoryBindFlags</type>
      </member>
   </struct>
   <struct name="VkSparseImageOpaqueMemoryBindInfo">
      <member name="image">
         <type const="False">VkImage</type>
      </member>
      <member name="bindCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pBinds">
         <pointer const="False">
            <type const="True">VkSparseMemoryBind</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSparseMemoryBind">
      <member name="resourceOffset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="memory">
         <type const="False">VkDeviceMemory</type>
      </member>
      <member name="memoryOffset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="flags">
         <type const="False">VkSparseMemoryBindFlags</type>
      </member>
   </struct>
   <struct name="VkSparseBufferMemoryBindInfo">
      <member name="buffer">
         <type const="False">VkBuffer</type>
      </member>
      <member name="bindCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pBinds">
         <pointer const="False">
            <type const="True">VkSparseMemoryBind</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkMappedMemoryRange">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="memory">
         <type const="False">VkDeviceMemory</type>
      </member>
      <member name="offset">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkMemoryAllocateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="allocationSize">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="memoryTypeIndex">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkSubmitInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="waitSemaphoreCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pWaitSemaphores">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
      <member name="pWaitDstStageMask">
         <pointer const="False">
            <type const="True">VkPipelineStageFlags</type>
         </pointer>
      </member>
      <member name="commandBufferCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pCommandBuffers">
         <pointer const="False">
            <type const="True">VkCommandBuffer</type>
         </pointer>
      </member>
      <member name="signalSemaphoreCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pSignalSemaphores">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkLayerProperties">
      <member name="layerName">
         <array length="256">
            <type const="False">char</type>
         </array>
      </member>
      <member name="specVersion">
         <type const="False">uint32_t</type>
      </member>
      <member name="implementationVersion">
         <type const="False">uint32_t</type>
      </member>
      <member name="description">
         <array length="256">
            <type const="False">char</type>
         </array>
      </member>
   </struct>
   <struct name="VkExtensionProperties">
      <member name="extensionName">
         <array length="256">
            <type const="False">char</type>
         </array>
      </member>
      <member name="specVersion">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDeviceCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkDeviceCreateFlags</type>
      </member>
      <member name="queueCreateInfoCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pQueueCreateInfos">
         <pointer const="False">
            <type const="True">VkDeviceQueueCreateInfo</type>
         </pointer>
      </member>
      <member name="enabledLayerCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="ppEnabledLayerNames">
         <pointer const="False">
            <pointer const="True">
               <type const="True">char</type>
            </pointer>
         </pointer>
      </member>
      <member name="enabledExtensionCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="ppEnabledExtensionNames">
         <pointer const="False">
            <pointer const="True">
               <type const="True">char</type>
            </pointer>
         </pointer>
      </member>
      <member name="pEnabledFeatures">
         <pointer const="False">
            <type const="True">VkPhysicalDeviceFeatures</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDeviceQueueCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkDeviceQueueCreateFlags</type>
      </member>
      <member name="queueFamilyIndex">
         <type const="False">uint32_t</type>
      </member>
      <member name="queueCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="pQueuePriorities">
         <pointer const="False">
            <type const="True">float</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkInstanceCreateInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags">
         <type const="False">VkInstanceCreateFlags</type>
      </member>
      <member name="pApplicationInfo">
         <pointer const="False">
            <type const="True">VkApplicationInfo</type>
         </pointer>
      </member>
      <member name="enabledLayerCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="ppEnabledLayerNames">
         <pointer const="False">
            <pointer const="True">
               <type const="True">char</type>
            </pointer>
         </pointer>
      </member>
      <member name="enabledExtensionCount">
         <type const="False">uint32_t</type>
      </member>
      <member name="ppEnabledExtensionNames">
         <pointer const="False">
            <pointer const="True">
               <type const="True">char</type>
            </pointer>
         </pointer>
      </member>
   </struct>
   <struct name="VkApplicationInfo">
      <member name="sType">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="pApplicationName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="applicationVersion">
         <type const="False">uint32_t</type>
      </member>
      <member name="pEngineName">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="engineVersion">
         <type const="False">uint32_t</type>
      </member>
      <member name="apiVersion">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <union name="VkClearValue">
      <member name="color">
         <type const="False">VkClearColorValue</type>
      </member>
      <member name="depthStencil">
         <type const="False">VkClearDepthStencilValue</type>
      </member>
   </union>
   <union name="VkClearColorValue">
      <member name="float32">
         <array length="4">
            <type const="False">float</type>
         </array>
      </member>
      <member name="int32">
         <array length="4">
            <type const="False">int32_t</type>
         </array>
      </member>
      <member name="uint32">
         <array length="4">
            <type const="False">uint32_t</type>
         </array>
      </member>
   </union>
</vulkan>
