<?xml version="1.0" encoding="utf8"?>
<vulkan>
   <alias name="VkWin32SurfaceCreateFlagsKHR" type="VkFlags"/>
   <alias name="VkDebugUtilsMessengerCallbackDataFlagsEXT" type="VkFlags"/>
   <alias name="VkDebugUtilsMessengerCreateFlagsEXT" type="VkFlags"/>
   <alias name="VkRenderPassCreateFlags" type="VkFlags"/>
   <alias name="VkFramebufferCreateFlags" type="VkFlags"/>
   <alias name="VkDescriptorPoolResetFlags" type="VkFlags"/>
   <alias name="VkPipelineLayoutCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineShaderStageCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineDynamicStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineColorBlendStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineDepthStencilStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineMultisampleStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineRasterizationStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineViewportStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineTessellationStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineInputAssemblyStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineVertexInputStateCreateFlags" type="VkFlags"/>
   <alias name="VkPipelineCacheCreateFlags" type="VkFlags"/>
   <alias name="VkShaderModuleCreateFlags" type="VkFlags"/>
   <alias name="VkBufferViewCreateFlags" type="VkFlags"/>
   <alias name="VkQueryPoolCreateFlags" type="VkFlags"/>
   <alias name="VkEventCreateFlags" type="VkFlags"/>
   <alias name="VkSemaphoreCreateFlags" type="VkFlags"/>
   <alias name="VkMemoryMapFlags" type="VkFlags"/>
   <alias name="VkDeviceCreateFlags" type="VkFlags"/>
   <alias name="VkInstanceCreateFlags" type="VkFlags"/>
   <base name="VkBool32" type="uint32_t"/>
   <base name="VkFlags" type="uint32_t"/>
   <base name="VkDeviceSize" type="uint64_t"/>
   <base name="VkSampleMask" type="uint32_t"/>
   <bitmask flags="VkImageUsageFlagBits" name="VkImageUsageFlags"/>
   <bitmask flags="VkCompositeAlphaFlagBitsKHR" name="VkCompositeAlphaFlagsKHR"/>
   <bitmask flags="VkSurfaceTransformFlagBitsKHR" name="VkSurfaceTransformFlagsKHR"/>
   <bitmask flags="VkSwapchainCreateFlagBitsKHR" name="VkSwapchainCreateFlagsKHR"/>
   <bitmask flags="VkDebugUtilsMessageTypeFlagBitsEXT" name="VkDebugUtilsMessageTypeFlagsEXT"/>
   <bitmask flags="VkDebugUtilsMessageSeverityFlagBitsEXT" name="VkDebugUtilsMessageSeverityFlagsEXT"/>
   <bitmask flags="VkAccessFlagBits" name="VkAccessFlags"/>
   <bitmask flags="VkImageAspectFlagBits" name="VkImageAspectFlags"/>
   <bitmask flags="VkShaderStageFlagBits" name="VkShaderStageFlags"/>
   <bitmask flags="VkQueryResultFlagBits" name="VkQueryResultFlags"/>
   <bitmask flags="VkQueryControlFlagBits" name="VkQueryControlFlags"/>
   <bitmask flags="VkDependencyFlagBits" name="VkDependencyFlags"/>
   <bitmask flags="VkPipelineStageFlagBits" name="VkPipelineStageFlags"/>
   <bitmask flags="VkStencilFaceFlagBits" name="VkStencilFaceFlags"/>
   <bitmask flags="VkCommandBufferResetFlagBits" name="VkCommandBufferResetFlags"/>
   <bitmask flags="VkQueryPipelineStatisticFlagBits" name="VkQueryPipelineStatisticFlags"/>
   <bitmask flags="VkCommandBufferUsageFlagBits" name="VkCommandBufferUsageFlags"/>
   <bitmask flags="VkCommandPoolResetFlagBits" name="VkCommandPoolResetFlags"/>
   <bitmask flags="VkCommandPoolCreateFlagBits" name="VkCommandPoolCreateFlags"/>
   <bitmask flags="VkSubpassDescriptionFlagBits" name="VkSubpassDescriptionFlags"/>
   <bitmask flags="VkAttachmentDescriptionFlagBits" name="VkAttachmentDescriptionFlags"/>
   <bitmask flags="VkDescriptorPoolCreateFlagBits" name="VkDescriptorPoolCreateFlags"/>
   <bitmask flags="VkDescriptorSetLayoutCreateFlagBits" name="VkDescriptorSetLayoutCreateFlags"/>
   <bitmask flags="VkSamplerCreateFlagBits" name="VkSamplerCreateFlags"/>
   <bitmask flags="VkPipelineCreateFlagBits" name="VkPipelineCreateFlags"/>
   <bitmask flags="VkColorComponentFlagBits" name="VkColorComponentFlags"/>
   <bitmask flags="VkCullModeFlagBits" name="VkCullModeFlags"/>
   <bitmask flags="VkImageViewCreateFlagBits" name="VkImageViewCreateFlags"/>
   <bitmask flags="VkImageCreateFlagBits" name="VkImageCreateFlags"/>
   <bitmask flags="VkBufferUsageFlagBits" name="VkBufferUsageFlags"/>
   <bitmask flags="VkBufferCreateFlagBits" name="VkBufferCreateFlags"/>
   <bitmask flags="VkFenceCreateFlagBits" name="VkFenceCreateFlags"/>
   <bitmask flags="VkSparseMemoryBindFlagBits" name="VkSparseMemoryBindFlags"/>
   <bitmask flags="VkSparseImageFormatFlagBits" name="VkSparseImageFormatFlags"/>
   <bitmask flags="VkDeviceQueueCreateFlagBits" name="VkDeviceQueueCreateFlags"/>
   <bitmask flags="VkMemoryHeapFlagBits" name="VkMemoryHeapFlags"/>
   <bitmask flags="VkMemoryPropertyFlagBits" name="VkMemoryPropertyFlags"/>
   <bitmask flags="VkQueueFlagBits" name="VkQueueFlags"/>
   <bitmask flags="VkSampleCountFlagBits" name="VkSampleCountFlags"/>
   <bitmask flags="VkFormatFeatureFlagBits" name="VkFormatFeatureFlags"/>
   <command name="vkGetPhysicalDeviceWin32PresentationSupportKHR" type="instance">
      <return-type>
         <type const="False">VkBool32</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="queueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCreateWin32SurfaceKHR" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="instance" optional="False">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkWin32SurfaceCreateInfoKHR</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSurface" optional="False">
         <pointer const="False">
            <type const="False">VkSurfaceKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSurfacePresentModesKHR" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="surface" optional="False">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pPresentModeCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pPresentModes" optional="True">
         <pointer const="False">
            <type const="False">VkPresentModeKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSurfaceFormatsKHR" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="surface" optional="False">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pSurfaceFormatCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pSurfaceFormats" optional="True">
         <pointer const="False">
            <type const="False">VkSurfaceFormatKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="surface" optional="False">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pSurfaceCapabilities" optional="False">
         <pointer const="False">
            <type const="False">VkSurfaceCapabilitiesKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSurfaceSupportKHR" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="queueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="surface" optional="False">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pSupported" optional="False">
         <pointer const="False">
            <type const="False">VkBool32</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySurfaceKHR" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="instance" optional="False">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="surface" optional="True">
         <type const="False">VkSurfaceKHR</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkQueuePresentKHR" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="queue" optional="False">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="pPresentInfo" optional="False">
         <pointer const="False">
            <type const="True">VkPresentInfoKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAcquireNextImageKHR" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="swapchain" optional="False">
         <type const="False">VkSwapchainKHR</type>
      </arg>
      <arg name="timeout" optional="False">
         <type const="False">uint64_t</type>
      </arg>
      <arg name="semaphore" optional="True">
         <type const="False">VkSemaphore</type>
      </arg>
      <arg name="fence" optional="True">
         <type const="False">VkFence</type>
      </arg>
      <arg name="pImageIndex" optional="False">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetSwapchainImagesKHR" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="swapchain" optional="False">
         <type const="False">VkSwapchainKHR</type>
      </arg>
      <arg name="pSwapchainImageCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pSwapchainImages" optional="True">
         <pointer const="False">
            <type const="False">VkImage</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySwapchainKHR" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="swapchain" optional="True">
         <type const="False">VkSwapchainKHR</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateSwapchainKHR" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkSwapchainCreateInfoKHR</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSwapchain" optional="False">
         <pointer const="False">
            <type const="False">VkSwapchainKHR</type>
         </pointer>
      </arg>
   </command>
   <command name="vkSubmitDebugUtilsMessageEXT" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="instance" optional="False">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="messageSeverity" optional="False">
         <type const="False">VkDebugUtilsMessageSeverityFlagBitsEXT</type>
      </arg>
      <arg name="messageTypes" optional="False">
         <type const="False">VkDebugUtilsMessageTypeFlagsEXT</type>
      </arg>
      <arg name="pCallbackData" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsMessengerCallbackDataEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyDebugUtilsMessengerEXT" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="instance" optional="False">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="messenger" optional="False">
         <type const="False">VkDebugUtilsMessengerEXT</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDebugUtilsMessengerEXT" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="instance" optional="False">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsMessengerCreateInfoEXT</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pMessenger" optional="False">
         <pointer const="False">
            <type const="False">VkDebugUtilsMessengerEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdInsertDebugUtilsLabelEXT" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pLabelInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdEndDebugUtilsLabelEXT" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
   </command>
   <command name="vkCmdBeginDebugUtilsLabelEXT" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pLabelInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkQueueInsertDebugUtilsLabelEXT" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="queue" optional="False">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="pLabelInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkQueueEndDebugUtilsLabelEXT" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="queue" optional="False">
         <type const="False">VkQueue</type>
      </arg>
   </command>
   <command name="vkQueueBeginDebugUtilsLabelEXT" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="queue" optional="False">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="pLabelInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkSetDebugUtilsObjectTagEXT" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pTagInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsObjectTagInfoEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkSetDebugUtilsObjectNameEXT" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pNameInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsObjectNameInfoEXT</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdExecuteCommands" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="commandBufferCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pCommandBuffers" optional="False">
         <pointer const="False">
            <type const="True">VkCommandBuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdEndRenderPass" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
   </command>
   <command name="vkCmdNextSubpass" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="contents" optional="False">
         <type const="False">VkSubpassContents</type>
      </arg>
   </command>
   <command name="vkCmdBeginRenderPass" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pRenderPassBegin" optional="False">
         <pointer const="False">
            <type const="True">VkRenderPassBeginInfo</type>
         </pointer>
      </arg>
      <arg name="contents" optional="False">
         <type const="False">VkSubpassContents</type>
      </arg>
   </command>
   <command name="vkCmdPushConstants" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="layout" optional="False">
         <type const="False">VkPipelineLayout</type>
      </arg>
      <arg name="stageFlags" optional="False">
         <type const="False">VkShaderStageFlags</type>
      </arg>
      <arg name="offset" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="size" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pValues" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdCopyQueryPoolResults" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="queryPool" optional="False">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="firstQuery" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="queryCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="dstBuffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="stride" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="flags" optional="True">
         <type const="False">VkQueryResultFlags</type>
      </arg>
   </command>
   <command name="vkCmdWriteTimestamp" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pipelineStage" optional="False">
         <type const="False">VkPipelineStageFlagBits</type>
      </arg>
      <arg name="queryPool" optional="False">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="query" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdResetQueryPool" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="queryPool" optional="False">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="firstQuery" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="queryCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdEndQuery" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="queryPool" optional="False">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="query" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdBeginQuery" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="queryPool" optional="False">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="query" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="flags" optional="True">
         <type const="False">VkQueryControlFlags</type>
      </arg>
   </command>
   <command name="vkCmdPipelineBarrier" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcStageMask" optional="False">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
      <arg name="dstStageMask" optional="False">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
      <arg name="dependencyFlags" optional="True">
         <type const="False">VkDependencyFlags</type>
      </arg>
      <arg name="memoryBarrierCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pMemoryBarriers" optional="False">
         <pointer const="False">
            <type const="True">VkMemoryBarrier</type>
         </pointer>
      </arg>
      <arg name="bufferMemoryBarrierCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBufferMemoryBarriers" optional="False">
         <pointer const="False">
            <type const="True">VkBufferMemoryBarrier</type>
         </pointer>
      </arg>
      <arg name="imageMemoryBarrierCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pImageMemoryBarriers" optional="False">
         <pointer const="False">
            <type const="True">VkImageMemoryBarrier</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdWaitEvents" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="eventCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pEvents" optional="False">
         <pointer const="False">
            <type const="True">VkEvent</type>
         </pointer>
      </arg>
      <arg name="srcStageMask" optional="False">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
      <arg name="dstStageMask" optional="False">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
      <arg name="memoryBarrierCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pMemoryBarriers" optional="False">
         <pointer const="False">
            <type const="True">VkMemoryBarrier</type>
         </pointer>
      </arg>
      <arg name="bufferMemoryBarrierCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBufferMemoryBarriers" optional="False">
         <pointer const="False">
            <type const="True">VkBufferMemoryBarrier</type>
         </pointer>
      </arg>
      <arg name="imageMemoryBarrierCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pImageMemoryBarriers" optional="False">
         <pointer const="False">
            <type const="True">VkImageMemoryBarrier</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdResetEvent" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="event" optional="False">
         <type const="False">VkEvent</type>
      </arg>
      <arg name="stageMask" optional="False">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
   </command>
   <command name="vkCmdSetEvent" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="event" optional="False">
         <type const="False">VkEvent</type>
      </arg>
      <arg name="stageMask" optional="False">
         <type const="False">VkPipelineStageFlags</type>
      </arg>
   </command>
   <command name="vkCmdResolveImage" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcImage" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="srcImageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="dstImage" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="dstImageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="regionCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions" optional="False">
         <pointer const="False">
            <type const="True">VkImageResolve</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdClearAttachments" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="attachmentCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pAttachments" optional="False">
         <pointer const="False">
            <type const="True">VkClearAttachment</type>
         </pointer>
      </arg>
      <arg name="rectCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRects" optional="False">
         <pointer const="False">
            <type const="True">VkClearRect</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdClearDepthStencilImage" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="image" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="imageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="pDepthStencil" optional="False">
         <pointer const="False">
            <type const="True">VkClearDepthStencilValue</type>
         </pointer>
      </arg>
      <arg name="rangeCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRanges" optional="False">
         <pointer const="False">
            <type const="True">VkImageSubresourceRange</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdClearColorImage" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="image" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="imageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="pColor" optional="False">
         <pointer const="False">
            <type const="True">VkClearColorValue</type>
         </pointer>
      </arg>
      <arg name="rangeCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRanges" optional="False">
         <pointer const="False">
            <type const="True">VkImageSubresourceRange</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdFillBuffer" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="dstBuffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="data" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdUpdateBuffer" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="dstBuffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="dataSize" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="pData" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdCopyImageToBuffer" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcImage" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="srcImageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="dstBuffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="regionCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions" optional="False">
         <pointer const="False">
            <type const="True">VkBufferImageCopy</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdCopyBufferToImage" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcBuffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstImage" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="dstImageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="regionCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions" optional="False">
         <pointer const="False">
            <type const="True">VkBufferImageCopy</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdBlitImage" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcImage" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="srcImageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="dstImage" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="dstImageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="regionCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions" optional="False">
         <pointer const="False">
            <type const="True">VkImageBlit</type>
         </pointer>
      </arg>
      <arg name="filter" optional="False">
         <type const="False">VkFilter</type>
      </arg>
   </command>
   <command name="vkCmdCopyImage" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcImage" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="srcImageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="dstImage" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="dstImageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </arg>
      <arg name="regionCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions" optional="False">
         <pointer const="False">
            <type const="True">VkImageCopy</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdCopyBuffer" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="srcBuffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="dstBuffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="regionCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pRegions" optional="False">
         <pointer const="False">
            <type const="True">VkBufferCopy</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdDispatchIndirect" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
   </command>
   <command name="vkCmdDispatch" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="groupCountX" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="groupCountY" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="groupCountZ" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdDrawIndexedIndirect" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="drawCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="stride" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdDrawIndirect" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="drawCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="stride" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdDrawIndexed" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="indexCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="instanceCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="firstIndex" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="vertexOffset" optional="False">
         <type const="False">int32_t</type>
      </arg>
      <arg name="firstInstance" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdDraw" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="vertexCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="instanceCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="firstVertex" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="firstInstance" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdBindVertexBuffers" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="firstBinding" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="bindingCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBuffers" optional="False">
         <pointer const="False">
            <type const="True">VkBuffer</type>
         </pointer>
      </arg>
      <arg name="pOffsets" optional="False">
         <pointer const="False">
            <type const="True">VkDeviceSize</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdBindIndexBuffer" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="indexType" optional="False">
         <type const="False">VkIndexType</type>
      </arg>
   </command>
   <command name="vkCmdBindDescriptorSets" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pipelineBindPoint" optional="False">
         <type const="False">VkPipelineBindPoint</type>
      </arg>
      <arg name="layout" optional="False">
         <type const="False">VkPipelineLayout</type>
      </arg>
      <arg name="firstSet" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="descriptorSetCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDescriptorSets" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorSet</type>
         </pointer>
      </arg>
      <arg name="dynamicOffsetCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDynamicOffsets" optional="False">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdSetStencilReference" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="faceMask" optional="False">
         <type const="False">VkStencilFaceFlags</type>
      </arg>
      <arg name="reference" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdSetStencilWriteMask" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="faceMask" optional="False">
         <type const="False">VkStencilFaceFlags</type>
      </arg>
      <arg name="writeMask" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdSetStencilCompareMask" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="faceMask" optional="False">
         <type const="False">VkStencilFaceFlags</type>
      </arg>
      <arg name="compareMask" optional="False">
         <type const="False">uint32_t</type>
      </arg>
   </command>
   <command name="vkCmdSetDepthBounds" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="minDepthBounds" optional="False">
         <type const="False">float</type>
      </arg>
      <arg name="maxDepthBounds" optional="False">
         <type const="False">float</type>
      </arg>
   </command>
   <command name="vkCmdSetBlendConstants" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="blendConstants" optional="False">
         <array length="4">
            <type const="True">float</type>
         </array>
      </arg>
   </command>
   <command name="vkCmdSetDepthBias" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="depthBiasConstantFactor" optional="False">
         <type const="False">float</type>
      </arg>
      <arg name="depthBiasClamp" optional="False">
         <type const="False">float</type>
      </arg>
      <arg name="depthBiasSlopeFactor" optional="False">
         <type const="False">float</type>
      </arg>
   </command>
   <command name="vkCmdSetLineWidth" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="lineWidth" optional="False">
         <type const="False">float</type>
      </arg>
   </command>
   <command name="vkCmdSetScissor" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="firstScissor" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="scissorCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pScissors" optional="False">
         <pointer const="False">
            <type const="True">VkRect2D</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdSetViewport" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="firstViewport" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="viewportCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pViewports" optional="False">
         <pointer const="False">
            <type const="True">VkViewport</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCmdBindPipeline" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pipelineBindPoint" optional="False">
         <type const="False">VkPipelineBindPoint</type>
      </arg>
      <arg name="pipeline" optional="False">
         <type const="False">VkPipeline</type>
      </arg>
   </command>
   <command name="vkResetCommandBuffer" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="flags" optional="True">
         <type const="False">VkCommandBufferResetFlags</type>
      </arg>
   </command>
   <command name="vkEndCommandBuffer" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
   </command>
   <command name="vkBeginCommandBuffer" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="commandBuffer" optional="False">
         <type const="False">VkCommandBuffer</type>
      </arg>
      <arg name="pBeginInfo" optional="False">
         <pointer const="False">
            <type const="True">VkCommandBufferBeginInfo</type>
         </pointer>
      </arg>
   </command>
   <command name="vkFreeCommandBuffers" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="commandPool" optional="False">
         <type const="False">VkCommandPool</type>
      </arg>
      <arg name="commandBufferCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pCommandBuffers" optional="False">
         <pointer const="False">
            <type const="True">VkCommandBuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAllocateCommandBuffers" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAllocateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkCommandBufferAllocateInfo</type>
         </pointer>
      </arg>
      <arg name="pCommandBuffers" optional="False">
         <pointer const="False">
            <type const="False">VkCommandBuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkResetCommandPool" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="commandPool" optional="False">
         <type const="False">VkCommandPool</type>
      </arg>
      <arg name="flags" optional="True">
         <type const="False">VkCommandPoolResetFlags</type>
      </arg>
   </command>
   <command name="vkDestroyCommandPool" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="commandPool" optional="True">
         <type const="False">VkCommandPool</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateCommandPool" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkCommandPoolCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pCommandPool" optional="False">
         <pointer const="False">
            <type const="False">VkCommandPool</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetRenderAreaGranularity" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="renderPass" optional="False">
         <type const="False">VkRenderPass</type>
      </arg>
      <arg name="pGranularity" optional="False">
         <pointer const="False">
            <type const="False">VkExtent2D</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyRenderPass" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="renderPass" optional="True">
         <type const="False">VkRenderPass</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateRenderPass" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkRenderPassCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pRenderPass" optional="False">
         <pointer const="False">
            <type const="False">VkRenderPass</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyFramebuffer" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="framebuffer" optional="True">
         <type const="False">VkFramebuffer</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateFramebuffer" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkFramebufferCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pFramebuffer" optional="False">
         <pointer const="False">
            <type const="False">VkFramebuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkUpdateDescriptorSets" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorWriteCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDescriptorWrites" optional="False">
         <pointer const="False">
            <type const="True">VkWriteDescriptorSet</type>
         </pointer>
      </arg>
      <arg name="descriptorCopyCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDescriptorCopies" optional="False">
         <pointer const="False">
            <type const="True">VkCopyDescriptorSet</type>
         </pointer>
      </arg>
   </command>
   <command name="vkFreeDescriptorSets" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorPool" optional="False">
         <type const="False">VkDescriptorPool</type>
      </arg>
      <arg name="descriptorSetCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pDescriptorSets" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorSet</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAllocateDescriptorSets" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAllocateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorSetAllocateInfo</type>
         </pointer>
      </arg>
      <arg name="pDescriptorSets" optional="False">
         <pointer const="False">
            <type const="False">VkDescriptorSet</type>
         </pointer>
      </arg>
   </command>
   <command name="vkResetDescriptorPool" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorPool" optional="False">
         <type const="False">VkDescriptorPool</type>
      </arg>
      <arg name="flags" optional="True">
         <type const="False">VkDescriptorPoolResetFlags</type>
      </arg>
   </command>
   <command name="vkDestroyDescriptorPool" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorPool" optional="True">
         <type const="False">VkDescriptorPool</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDescriptorPool" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorPoolCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pDescriptorPool" optional="False">
         <pointer const="False">
            <type const="False">VkDescriptorPool</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyDescriptorSetLayout" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="descriptorSetLayout" optional="True">
         <type const="False">VkDescriptorSetLayout</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDescriptorSetLayout" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayoutCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSetLayout" optional="False">
         <pointer const="False">
            <type const="False">VkDescriptorSetLayout</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySampler" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="sampler" optional="True">
         <type const="False">VkSampler</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateSampler" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkSamplerCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSampler" optional="False">
         <pointer const="False">
            <type const="False">VkSampler</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyPipelineLayout" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineLayout" optional="True">
         <type const="False">VkPipelineLayout</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreatePipelineLayout" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkPipelineLayoutCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pPipelineLayout" optional="False">
         <pointer const="False">
            <type const="False">VkPipelineLayout</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyPipeline" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipeline" optional="True">
         <type const="False">VkPipeline</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateComputePipelines" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineCache" optional="True">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="createInfoCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pCreateInfos" optional="False">
         <pointer const="False">
            <type const="True">VkComputePipelineCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pPipelines" optional="False">
         <pointer const="False">
            <type const="False">VkPipeline</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateGraphicsPipelines" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineCache" optional="True">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="createInfoCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pCreateInfos" optional="False">
         <pointer const="False">
            <type const="True">VkGraphicsPipelineCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pPipelines" optional="False">
         <pointer const="False">
            <type const="False">VkPipeline</type>
         </pointer>
      </arg>
   </command>
   <command name="vkMergePipelineCaches" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="dstCache" optional="False">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="srcCacheCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pSrcCaches" optional="False">
         <pointer const="False">
            <type const="True">VkPipelineCache</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPipelineCacheData" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineCache" optional="False">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="pDataSize" optional="True">
         <pointer const="False">
            <type const="False">size_t</type>
         </pointer>
      </arg>
      <arg name="pData" optional="True">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyPipelineCache" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pipelineCache" optional="True">
         <type const="False">VkPipelineCache</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreatePipelineCache" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkPipelineCacheCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pPipelineCache" optional="False">
         <pointer const="False">
            <type const="False">VkPipelineCache</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyShaderModule" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="shaderModule" optional="True">
         <type const="False">VkShaderModule</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateShaderModule" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkShaderModuleCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pShaderModule" optional="False">
         <pointer const="False">
            <type const="False">VkShaderModule</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyImageView" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="imageView" optional="True">
         <type const="False">VkImageView</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateImageView" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkImageViewCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pView" optional="False">
         <pointer const="False">
            <type const="False">VkImageView</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetImageSubresourceLayout" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="pSubresource" optional="False">
         <pointer const="False">
            <type const="True">VkImageSubresource</type>
         </pointer>
      </arg>
      <arg name="pLayout" optional="False">
         <pointer const="False">
            <type const="False">VkSubresourceLayout</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyImage" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image" optional="True">
         <type const="False">VkImage</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateImage" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkImageCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pImage" optional="False">
         <pointer const="False">
            <type const="False">VkImage</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyBufferView" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="bufferView" optional="True">
         <type const="False">VkBufferView</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateBufferView" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkBufferViewCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pView" optional="False">
         <pointer const="False">
            <type const="False">VkBufferView</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyBuffer" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="buffer" optional="True">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateBuffer" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkBufferCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pBuffer" optional="False">
         <pointer const="False">
            <type const="False">VkBuffer</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetQueryPoolResults" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="queryPool" optional="False">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="firstQuery" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="queryCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="dataSize" optional="False">
         <type const="False">size_t</type>
      </arg>
      <arg name="pData" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="stride" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="flags" optional="True">
         <type const="False">VkQueryResultFlags</type>
      </arg>
   </command>
   <command name="vkDestroyQueryPool" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="queryPool" optional="True">
         <type const="False">VkQueryPool</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateQueryPool" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkQueryPoolCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pQueryPool" optional="False">
         <pointer const="False">
            <type const="False">VkQueryPool</type>
         </pointer>
      </arg>
   </command>
   <command name="vkResetEvent" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="event" optional="False">
         <type const="False">VkEvent</type>
      </arg>
   </command>
   <command name="vkSetEvent" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="event" optional="False">
         <type const="False">VkEvent</type>
      </arg>
   </command>
   <command name="vkGetEventStatus" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="event" optional="False">
         <type const="False">VkEvent</type>
      </arg>
   </command>
   <command name="vkDestroyEvent" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="event" optional="True">
         <type const="False">VkEvent</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateEvent" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkEventCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pEvent" optional="False">
         <pointer const="False">
            <type const="False">VkEvent</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroySemaphore" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="semaphore" optional="True">
         <type const="False">VkSemaphore</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateSemaphore" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkSemaphoreCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pSemaphore" optional="False">
         <pointer const="False">
            <type const="False">VkSemaphore</type>
         </pointer>
      </arg>
   </command>
   <command name="vkWaitForFences" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="fenceCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pFences" optional="False">
         <pointer const="False">
            <type const="True">VkFence</type>
         </pointer>
      </arg>
      <arg name="waitAll" optional="False">
         <type const="False">VkBool32</type>
      </arg>
      <arg name="timeout" optional="False">
         <type const="False">uint64_t</type>
      </arg>
   </command>
   <command name="vkGetFenceStatus" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="fence" optional="False">
         <type const="False">VkFence</type>
      </arg>
   </command>
   <command name="vkResetFences" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="fenceCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pFences" optional="False">
         <pointer const="False">
            <type const="True">VkFence</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyFence" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="fence" optional="True">
         <type const="False">VkFence</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateFence" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkFenceCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pFence" optional="False">
         <pointer const="False">
            <type const="False">VkFence</type>
         </pointer>
      </arg>
   </command>
   <command name="vkQueueBindSparse" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="queue" optional="False">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="bindInfoCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pBindInfo" optional="False">
         <pointer const="False">
            <type const="True">VkBindSparseInfo</type>
         </pointer>
      </arg>
      <arg name="fence" optional="True">
         <type const="False">VkFence</type>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceSparseImageFormatProperties" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="format" optional="False">
         <type const="False">VkFormat</type>
      </arg>
      <arg name="type" optional="False">
         <type const="False">VkImageType</type>
      </arg>
      <arg name="samples" optional="False">
         <type const="False">VkSampleCountFlagBits</type>
      </arg>
      <arg name="usage" optional="False">
         <type const="False">VkImageUsageFlags</type>
      </arg>
      <arg name="tiling" optional="False">
         <type const="False">VkImageTiling</type>
      </arg>
      <arg name="pPropertyCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties" optional="True">
         <pointer const="False">
            <type const="False">VkSparseImageFormatProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetImageSparseMemoryRequirements" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="pSparseMemoryRequirementCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pSparseMemoryRequirements" optional="True">
         <pointer const="False">
            <type const="False">VkSparseImageMemoryRequirements</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetImageMemoryRequirements" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="pMemoryRequirements" optional="False">
         <pointer const="False">
            <type const="False">VkMemoryRequirements</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetBufferMemoryRequirements" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="pMemoryRequirements" optional="False">
         <pointer const="False">
            <type const="False">VkMemoryRequirements</type>
         </pointer>
      </arg>
   </command>
   <command name="vkBindImageMemory" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="image" optional="False">
         <type const="False">VkImage</type>
      </arg>
      <arg name="memory" optional="False">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="memoryOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
   </command>
   <command name="vkBindBufferMemory" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </arg>
      <arg name="memory" optional="False">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="memoryOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
   </command>
   <command name="vkGetDeviceMemoryCommitment" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memory" optional="False">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="pCommittedMemoryInBytes" optional="False">
         <pointer const="False">
            <type const="False">VkDeviceSize</type>
         </pointer>
      </arg>
   </command>
   <command name="vkInvalidateMappedMemoryRanges" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memoryRangeCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pMemoryRanges" optional="False">
         <pointer const="False">
            <type const="True">VkMappedMemoryRange</type>
         </pointer>
      </arg>
   </command>
   <command name="vkFlushMappedMemoryRanges" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memoryRangeCount" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pMemoryRanges" optional="False">
         <pointer const="False">
            <type const="True">VkMappedMemoryRange</type>
         </pointer>
      </arg>
   </command>
   <command name="vkUnmapMemory" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memory" optional="False">
         <type const="False">VkDeviceMemory</type>
      </arg>
   </command>
   <command name="vkMapMemory" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memory" optional="False">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </arg>
      <arg name="flags" optional="True">
         <type const="False">VkMemoryMapFlags</type>
      </arg>
      <arg name="ppData" optional="True">
         <pointer const="False">
            <pointer const="False">
               <type const="False">void</type>
            </pointer>
         </pointer>
      </arg>
   </command>
   <command name="vkFreeMemory" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="memory" optional="True">
         <type const="False">VkDeviceMemory</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkAllocateMemory" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAllocateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkMemoryAllocateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pMemory" optional="False">
         <pointer const="False">
            <type const="False">VkDeviceMemory</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDeviceWaitIdle" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
   </command>
   <command name="vkQueueWaitIdle" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="queue" optional="False">
         <type const="False">VkQueue</type>
      </arg>
   </command>
   <command name="vkQueueSubmit" type="device">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="queue" optional="False">
         <type const="False">VkQueue</type>
      </arg>
      <arg name="submitCount" optional="True">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pSubmits" optional="False">
         <pointer const="False">
            <type const="True">VkSubmitInfo</type>
         </pointer>
      </arg>
      <arg name="fence" optional="True">
         <type const="False">VkFence</type>
      </arg>
   </command>
   <command name="vkGetDeviceQueue" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="queueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="queueIndex" optional="False">
         <type const="False">uint32_t</type>
      </arg>
      <arg name="pQueue" optional="False">
         <pointer const="False">
            <type const="False">VkQueue</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateDeviceLayerProperties" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pPropertyCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties" optional="True">
         <pointer const="False">
            <type const="False">VkLayerProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateInstanceLayerProperties" type="entry">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="pPropertyCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties" optional="True">
         <pointer const="False">
            <type const="False">VkLayerProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateDeviceExtensionProperties" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pLayerName" optional="True">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </arg>
      <arg name="pPropertyCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties" optional="True">
         <pointer const="False">
            <type const="False">VkExtensionProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumerateInstanceExtensionProperties" type="entry">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="pLayerName" optional="True">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </arg>
      <arg name="pPropertyCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pProperties" optional="True">
         <pointer const="False">
            <type const="False">VkExtensionProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyDevice" type="device">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="device" optional="True">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateDevice" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDeviceCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pDevice" optional="False">
         <pointer const="False">
            <type const="False">VkDevice</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetDeviceProcAddr" type="instance">
      <return-type>
         <type const="False">PFN_vkVoidFunction</type>
      </return-type>
      <arg name="device" optional="False">
         <type const="False">VkDevice</type>
      </arg>
      <arg name="pName" optional="False">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetInstanceProcAddr" type="static">
      <return-type>
         <type const="False">PFN_vkVoidFunction</type>
      </return-type>
      <arg name="instance" optional="True">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pName" optional="False">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceMemoryProperties" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pMemoryProperties" optional="False">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceMemoryProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceQueueFamilyProperties" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pQueueFamilyPropertyCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pQueueFamilyProperties" optional="True">
         <pointer const="False">
            <type const="False">VkQueueFamilyProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceProperties" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pProperties" optional="False">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceImageFormatProperties" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="format" optional="False">
         <type const="False">VkFormat</type>
      </arg>
      <arg name="type" optional="False">
         <type const="False">VkImageType</type>
      </arg>
      <arg name="tiling" optional="False">
         <type const="False">VkImageTiling</type>
      </arg>
      <arg name="usage" optional="False">
         <type const="False">VkImageUsageFlags</type>
      </arg>
      <arg name="flags" optional="True">
         <type const="False">VkImageCreateFlags</type>
      </arg>
      <arg name="pImageFormatProperties" optional="False">
         <pointer const="False">
            <type const="False">VkImageFormatProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceFormatProperties" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="format" optional="False">
         <type const="False">VkFormat</type>
      </arg>
      <arg name="pFormatProperties" optional="False">
         <pointer const="False">
            <type const="False">VkFormatProperties</type>
         </pointer>
      </arg>
   </command>
   <command name="vkGetPhysicalDeviceFeatures" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="physicalDevice" optional="False">
         <type const="False">VkPhysicalDevice</type>
      </arg>
      <arg name="pFeatures" optional="False">
         <pointer const="False">
            <type const="False">VkPhysicalDeviceFeatures</type>
         </pointer>
      </arg>
   </command>
   <command name="vkEnumeratePhysicalDevices" type="instance">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="instance" optional="False">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pPhysicalDeviceCount" optional="True">
         <pointer const="False">
            <type const="False">uint32_t</type>
         </pointer>
      </arg>
      <arg name="pPhysicalDevices" optional="True">
         <pointer const="False">
            <type const="False">VkPhysicalDevice</type>
         </pointer>
      </arg>
   </command>
   <command name="vkDestroyInstance" type="instance">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="instance" optional="True">
         <type const="False">VkInstance</type>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
   </command>
   <command name="vkCreateInstance" type="entry">
      <return-type>
         <type const="False">VkResult</type>
      </return-type>
      <arg name="pCreateInfo" optional="False">
         <pointer const="False">
            <type const="True">VkInstanceCreateInfo</type>
         </pointer>
      </arg>
      <arg name="pAllocator" optional="True">
         <pointer const="False">
            <type const="True">VkAllocationCallbacks</type>
         </pointer>
      </arg>
      <arg name="pInstance" optional="False">
         <pointer const="False">
            <type const="False">VkInstance</type>
         </pointer>
      </arg>
   </command>
   <enum name="VkSystemAllocationScope">
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_COMMAND">0</entry>
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_OBJECT">1</entry>
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_CACHE">2</entry>
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_DEVICE">3</entry>
      <entry name="VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE">4</entry>
   </enum>
   <enum name="VkInternalAllocationType">
      <entry name="VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE">0</entry>
   </enum>
   <enum name="VkStructureType">
      <entry name="VK_STRUCTURE_TYPE_APPLICATION_INFO">0</entry>
      <entry name="VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO">1</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO">2</entry>
      <entry name="VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO">3</entry>
      <entry name="VK_STRUCTURE_TYPE_SUBMIT_INFO">4</entry>
      <entry name="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO">5</entry>
      <entry name="VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE">6</entry>
      <entry name="VK_STRUCTURE_TYPE_BIND_SPARSE_INFO">7</entry>
      <entry name="VK_STRUCTURE_TYPE_FENCE_CREATE_INFO">8</entry>
      <entry name="VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO">9</entry>
      <entry name="VK_STRUCTURE_TYPE_EVENT_CREATE_INFO">10</entry>
      <entry name="VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO">11</entry>
      <entry name="VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO">12</entry>
      <entry name="VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO">13</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO">14</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO">15</entry>
      <entry name="VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO">16</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO">17</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO">18</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO">19</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO">20</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO">21</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO">22</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO">23</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO">24</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO">25</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO">26</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO">27</entry>
      <entry name="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO">28</entry>
      <entry name="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO">29</entry>
      <entry name="VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO">30</entry>
      <entry name="VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO">31</entry>
      <entry name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO">32</entry>
      <entry name="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO">33</entry>
      <entry name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO">34</entry>
      <entry name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET">35</entry>
      <entry name="VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET">36</entry>
      <entry name="VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO">37</entry>
      <entry name="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO">38</entry>
      <entry name="VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO">39</entry>
      <entry name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO">40</entry>
      <entry name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO">41</entry>
      <entry name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO">42</entry>
      <entry name="VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO">43</entry>
      <entry name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER">44</entry>
      <entry name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER">45</entry>
      <entry name="VK_STRUCTURE_TYPE_MEMORY_BARRIER">46</entry>
      <entry name="VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO">47</entry>
      <entry name="VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO">48</entry>
      <entry name="VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR">1000001000</entry>
      <entry name="VK_STRUCTURE_TYPE_PRESENT_INFO_KHR">1000001001</entry>
      <entry name="VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR">1000009000</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT">1000128000</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT">1000128001</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT">1000128002</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT">1000128003</entry>
      <entry name="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT">1000128004</entry>
   </enum>
   <enum name="VkResult">
      <entry name="VK_ERROR_OUT_OF_DATE_KHR">-1000001004</entry>
      <entry name="VK_ERROR_NATIVE_WINDOW_IN_USE_KHR">-1000000001</entry>
      <entry name="VK_ERROR_SURFACE_LOST_KHR">-1000000000</entry>
      <entry name="VK_ERROR_FRAGMENTED_POOL">-12</entry>
      <entry name="VK_ERROR_FORMAT_NOT_SUPPORTED">-11</entry>
      <entry name="VK_ERROR_TOO_MANY_OBJECTS">-10</entry>
      <entry name="VK_ERROR_INCOMPATIBLE_DRIVER">-9</entry>
      <entry name="VK_ERROR_FEATURE_NOT_PRESENT">-8</entry>
      <entry name="VK_ERROR_EXTENSION_NOT_PRESENT">-7</entry>
      <entry name="VK_ERROR_LAYER_NOT_PRESENT">-6</entry>
      <entry name="VK_ERROR_MEMORY_MAP_FAILED">-5</entry>
      <entry name="VK_ERROR_DEVICE_LOST">-4</entry>
      <entry name="VK_ERROR_INITIALIZATION_FAILED">-3</entry>
      <entry name="VK_ERROR_OUT_OF_DEVICE_MEMORY">-2</entry>
      <entry name="VK_ERROR_OUT_OF_HOST_MEMORY">-1</entry>
      <entry name="VK_SUCCESS">0</entry>
      <entry name="VK_NOT_READY">1</entry>
      <entry name="VK_TIMEOUT">2</entry>
      <entry name="VK_EVENT_SET">3</entry>
      <entry name="VK_EVENT_RESET">4</entry>
      <entry name="VK_INCOMPLETE">5</entry>
      <entry name="VK_SUBOPTIMAL_KHR">1000001003</entry>
   </enum>
   <enum name="VkPresentModeKHR">
      <entry name="VK_PRESENT_MODE_IMMEDIATE_KHR">0</entry>
      <entry name="VK_PRESENT_MODE_MAILBOX_KHR">1</entry>
      <entry name="VK_PRESENT_MODE_FIFO_KHR">2</entry>
      <entry name="VK_PRESENT_MODE_FIFO_RELAXED_KHR">3</entry>
   </enum>
   <enum name="VkColorSpaceKHR">
      <entry name="VK_COLOR_SPACE_SRGB_NONLINEAR_KHR">0</entry>
      <entry name="VK_COLORSPACE_SRGB_NONLINEAR_KHR">0</entry>
   </enum>
   <enum name="VkFormat">
      <entry name="VK_FORMAT_UNDEFINED">0</entry>
      <entry name="VK_FORMAT_R4G4_UNORM_PACK8">1</entry>
      <entry name="VK_FORMAT_R4G4B4A4_UNORM_PACK16">2</entry>
      <entry name="VK_FORMAT_B4G4R4A4_UNORM_PACK16">3</entry>
      <entry name="VK_FORMAT_R5G6B5_UNORM_PACK16">4</entry>
      <entry name="VK_FORMAT_B5G6R5_UNORM_PACK16">5</entry>
      <entry name="VK_FORMAT_R5G5B5A1_UNORM_PACK16">6</entry>
      <entry name="VK_FORMAT_B5G5R5A1_UNORM_PACK16">7</entry>
      <entry name="VK_FORMAT_A1R5G5B5_UNORM_PACK16">8</entry>
      <entry name="VK_FORMAT_R8_UNORM">9</entry>
      <entry name="VK_FORMAT_R8_SNORM">10</entry>
      <entry name="VK_FORMAT_R8_USCALED">11</entry>
      <entry name="VK_FORMAT_R8_SSCALED">12</entry>
      <entry name="VK_FORMAT_R8_UINT">13</entry>
      <entry name="VK_FORMAT_R8_SINT">14</entry>
      <entry name="VK_FORMAT_R8_SRGB">15</entry>
      <entry name="VK_FORMAT_R8G8_UNORM">16</entry>
      <entry name="VK_FORMAT_R8G8_SNORM">17</entry>
      <entry name="VK_FORMAT_R8G8_USCALED">18</entry>
      <entry name="VK_FORMAT_R8G8_SSCALED">19</entry>
      <entry name="VK_FORMAT_R8G8_UINT">20</entry>
      <entry name="VK_FORMAT_R8G8_SINT">21</entry>
      <entry name="VK_FORMAT_R8G8_SRGB">22</entry>
      <entry name="VK_FORMAT_R8G8B8_UNORM">23</entry>
      <entry name="VK_FORMAT_R8G8B8_SNORM">24</entry>
      <entry name="VK_FORMAT_R8G8B8_USCALED">25</entry>
      <entry name="VK_FORMAT_R8G8B8_SSCALED">26</entry>
      <entry name="VK_FORMAT_R8G8B8_UINT">27</entry>
      <entry name="VK_FORMAT_R8G8B8_SINT">28</entry>
      <entry name="VK_FORMAT_R8G8B8_SRGB">29</entry>
      <entry name="VK_FORMAT_B8G8R8_UNORM">30</entry>
      <entry name="VK_FORMAT_B8G8R8_SNORM">31</entry>
      <entry name="VK_FORMAT_B8G8R8_USCALED">32</entry>
      <entry name="VK_FORMAT_B8G8R8_SSCALED">33</entry>
      <entry name="VK_FORMAT_B8G8R8_UINT">34</entry>
      <entry name="VK_FORMAT_B8G8R8_SINT">35</entry>
      <entry name="VK_FORMAT_B8G8R8_SRGB">36</entry>
      <entry name="VK_FORMAT_R8G8B8A8_UNORM">37</entry>
      <entry name="VK_FORMAT_R8G8B8A8_SNORM">38</entry>
      <entry name="VK_FORMAT_R8G8B8A8_USCALED">39</entry>
      <entry name="VK_FORMAT_R8G8B8A8_SSCALED">40</entry>
      <entry name="VK_FORMAT_R8G8B8A8_UINT">41</entry>
      <entry name="VK_FORMAT_R8G8B8A8_SINT">42</entry>
      <entry name="VK_FORMAT_R8G8B8A8_SRGB">43</entry>
      <entry name="VK_FORMAT_B8G8R8A8_UNORM">44</entry>
      <entry name="VK_FORMAT_B8G8R8A8_SNORM">45</entry>
      <entry name="VK_FORMAT_B8G8R8A8_USCALED">46</entry>
      <entry name="VK_FORMAT_B8G8R8A8_SSCALED">47</entry>
      <entry name="VK_FORMAT_B8G8R8A8_UINT">48</entry>
      <entry name="VK_FORMAT_B8G8R8A8_SINT">49</entry>
      <entry name="VK_FORMAT_B8G8R8A8_SRGB">50</entry>
      <entry name="VK_FORMAT_A8B8G8R8_UNORM_PACK32">51</entry>
      <entry name="VK_FORMAT_A8B8G8R8_SNORM_PACK32">52</entry>
      <entry name="VK_FORMAT_A8B8G8R8_USCALED_PACK32">53</entry>
      <entry name="VK_FORMAT_A8B8G8R8_SSCALED_PACK32">54</entry>
      <entry name="VK_FORMAT_A8B8G8R8_UINT_PACK32">55</entry>
      <entry name="VK_FORMAT_A8B8G8R8_SINT_PACK32">56</entry>
      <entry name="VK_FORMAT_A8B8G8R8_SRGB_PACK32">57</entry>
      <entry name="VK_FORMAT_A2R10G10B10_UNORM_PACK32">58</entry>
      <entry name="VK_FORMAT_A2R10G10B10_SNORM_PACK32">59</entry>
      <entry name="VK_FORMAT_A2R10G10B10_USCALED_PACK32">60</entry>
      <entry name="VK_FORMAT_A2R10G10B10_SSCALED_PACK32">61</entry>
      <entry name="VK_FORMAT_A2R10G10B10_UINT_PACK32">62</entry>
      <entry name="VK_FORMAT_A2R10G10B10_SINT_PACK32">63</entry>
      <entry name="VK_FORMAT_A2B10G10R10_UNORM_PACK32">64</entry>
      <entry name="VK_FORMAT_A2B10G10R10_SNORM_PACK32">65</entry>
      <entry name="VK_FORMAT_A2B10G10R10_USCALED_PACK32">66</entry>
      <entry name="VK_FORMAT_A2B10G10R10_SSCALED_PACK32">67</entry>
      <entry name="VK_FORMAT_A2B10G10R10_UINT_PACK32">68</entry>
      <entry name="VK_FORMAT_A2B10G10R10_SINT_PACK32">69</entry>
      <entry name="VK_FORMAT_R16_UNORM">70</entry>
      <entry name="VK_FORMAT_R16_SNORM">71</entry>
      <entry name="VK_FORMAT_R16_USCALED">72</entry>
      <entry name="VK_FORMAT_R16_SSCALED">73</entry>
      <entry name="VK_FORMAT_R16_UINT">74</entry>
      <entry name="VK_FORMAT_R16_SINT">75</entry>
      <entry name="VK_FORMAT_R16_SFLOAT">76</entry>
      <entry name="VK_FORMAT_R16G16_UNORM">77</entry>
      <entry name="VK_FORMAT_R16G16_SNORM">78</entry>
      <entry name="VK_FORMAT_R16G16_USCALED">79</entry>
      <entry name="VK_FORMAT_R16G16_SSCALED">80</entry>
      <entry name="VK_FORMAT_R16G16_UINT">81</entry>
      <entry name="VK_FORMAT_R16G16_SINT">82</entry>
      <entry name="VK_FORMAT_R16G16_SFLOAT">83</entry>
      <entry name="VK_FORMAT_R16G16B16_UNORM">84</entry>
      <entry name="VK_FORMAT_R16G16B16_SNORM">85</entry>
      <entry name="VK_FORMAT_R16G16B16_USCALED">86</entry>
      <entry name="VK_FORMAT_R16G16B16_SSCALED">87</entry>
      <entry name="VK_FORMAT_R16G16B16_UINT">88</entry>
      <entry name="VK_FORMAT_R16G16B16_SINT">89</entry>
      <entry name="VK_FORMAT_R16G16B16_SFLOAT">90</entry>
      <entry name="VK_FORMAT_R16G16B16A16_UNORM">91</entry>
      <entry name="VK_FORMAT_R16G16B16A16_SNORM">92</entry>
      <entry name="VK_FORMAT_R16G16B16A16_USCALED">93</entry>
      <entry name="VK_FORMAT_R16G16B16A16_SSCALED">94</entry>
      <entry name="VK_FORMAT_R16G16B16A16_UINT">95</entry>
      <entry name="VK_FORMAT_R16G16B16A16_SINT">96</entry>
      <entry name="VK_FORMAT_R16G16B16A16_SFLOAT">97</entry>
      <entry name="VK_FORMAT_R32_UINT">98</entry>
      <entry name="VK_FORMAT_R32_SINT">99</entry>
      <entry name="VK_FORMAT_R32_SFLOAT">100</entry>
      <entry name="VK_FORMAT_R32G32_UINT">101</entry>
      <entry name="VK_FORMAT_R32G32_SINT">102</entry>
      <entry name="VK_FORMAT_R32G32_SFLOAT">103</entry>
      <entry name="VK_FORMAT_R32G32B32_UINT">104</entry>
      <entry name="VK_FORMAT_R32G32B32_SINT">105</entry>
      <entry name="VK_FORMAT_R32G32B32_SFLOAT">106</entry>
      <entry name="VK_FORMAT_R32G32B32A32_UINT">107</entry>
      <entry name="VK_FORMAT_R32G32B32A32_SINT">108</entry>
      <entry name="VK_FORMAT_R32G32B32A32_SFLOAT">109</entry>
      <entry name="VK_FORMAT_R64_UINT">110</entry>
      <entry name="VK_FORMAT_R64_SINT">111</entry>
      <entry name="VK_FORMAT_R64_SFLOAT">112</entry>
      <entry name="VK_FORMAT_R64G64_UINT">113</entry>
      <entry name="VK_FORMAT_R64G64_SINT">114</entry>
      <entry name="VK_FORMAT_R64G64_SFLOAT">115</entry>
      <entry name="VK_FORMAT_R64G64B64_UINT">116</entry>
      <entry name="VK_FORMAT_R64G64B64_SINT">117</entry>
      <entry name="VK_FORMAT_R64G64B64_SFLOAT">118</entry>
      <entry name="VK_FORMAT_R64G64B64A64_UINT">119</entry>
      <entry name="VK_FORMAT_R64G64B64A64_SINT">120</entry>
      <entry name="VK_FORMAT_R64G64B64A64_SFLOAT">121</entry>
      <entry name="VK_FORMAT_B10G11R11_UFLOAT_PACK32">122</entry>
      <entry name="VK_FORMAT_E5B9G9R9_UFLOAT_PACK32">123</entry>
      <entry name="VK_FORMAT_D16_UNORM">124</entry>
      <entry name="VK_FORMAT_X8_D24_UNORM_PACK32">125</entry>
      <entry name="VK_FORMAT_D32_SFLOAT">126</entry>
      <entry name="VK_FORMAT_S8_UINT">127</entry>
      <entry name="VK_FORMAT_D16_UNORM_S8_UINT">128</entry>
      <entry name="VK_FORMAT_D24_UNORM_S8_UINT">129</entry>
      <entry name="VK_FORMAT_D32_SFLOAT_S8_UINT">130</entry>
      <entry name="VK_FORMAT_BC1_RGB_UNORM_BLOCK">131</entry>
      <entry name="VK_FORMAT_BC1_RGB_SRGB_BLOCK">132</entry>
      <entry name="VK_FORMAT_BC1_RGBA_UNORM_BLOCK">133</entry>
      <entry name="VK_FORMAT_BC1_RGBA_SRGB_BLOCK">134</entry>
      <entry name="VK_FORMAT_BC2_UNORM_BLOCK">135</entry>
      <entry name="VK_FORMAT_BC2_SRGB_BLOCK">136</entry>
      <entry name="VK_FORMAT_BC3_UNORM_BLOCK">137</entry>
      <entry name="VK_FORMAT_BC3_SRGB_BLOCK">138</entry>
      <entry name="VK_FORMAT_BC4_UNORM_BLOCK">139</entry>
      <entry name="VK_FORMAT_BC4_SNORM_BLOCK">140</entry>
      <entry name="VK_FORMAT_BC5_UNORM_BLOCK">141</entry>
      <entry name="VK_FORMAT_BC5_SNORM_BLOCK">142</entry>
      <entry name="VK_FORMAT_BC6H_UFLOAT_BLOCK">143</entry>
      <entry name="VK_FORMAT_BC6H_SFLOAT_BLOCK">144</entry>
      <entry name="VK_FORMAT_BC7_UNORM_BLOCK">145</entry>
      <entry name="VK_FORMAT_BC7_SRGB_BLOCK">146</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK">147</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK">148</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK">149</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK">150</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK">151</entry>
      <entry name="VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK">152</entry>
      <entry name="VK_FORMAT_EAC_R11_UNORM_BLOCK">153</entry>
      <entry name="VK_FORMAT_EAC_R11_SNORM_BLOCK">154</entry>
      <entry name="VK_FORMAT_EAC_R11G11_UNORM_BLOCK">155</entry>
      <entry name="VK_FORMAT_EAC_R11G11_SNORM_BLOCK">156</entry>
      <entry name="VK_FORMAT_ASTC_4x4_UNORM_BLOCK">157</entry>
      <entry name="VK_FORMAT_ASTC_4x4_SRGB_BLOCK">158</entry>
      <entry name="VK_FORMAT_ASTC_5x4_UNORM_BLOCK">159</entry>
      <entry name="VK_FORMAT_ASTC_5x4_SRGB_BLOCK">160</entry>
      <entry name="VK_FORMAT_ASTC_5x5_UNORM_BLOCK">161</entry>
      <entry name="VK_FORMAT_ASTC_5x5_SRGB_BLOCK">162</entry>
      <entry name="VK_FORMAT_ASTC_6x5_UNORM_BLOCK">163</entry>
      <entry name="VK_FORMAT_ASTC_6x5_SRGB_BLOCK">164</entry>
      <entry name="VK_FORMAT_ASTC_6x6_UNORM_BLOCK">165</entry>
      <entry name="VK_FORMAT_ASTC_6x6_SRGB_BLOCK">166</entry>
      <entry name="VK_FORMAT_ASTC_8x5_UNORM_BLOCK">167</entry>
      <entry name="VK_FORMAT_ASTC_8x5_SRGB_BLOCK">168</entry>
      <entry name="VK_FORMAT_ASTC_8x6_UNORM_BLOCK">169</entry>
      <entry name="VK_FORMAT_ASTC_8x6_SRGB_BLOCK">170</entry>
      <entry name="VK_FORMAT_ASTC_8x8_UNORM_BLOCK">171</entry>
      <entry name="VK_FORMAT_ASTC_8x8_SRGB_BLOCK">172</entry>
      <entry name="VK_FORMAT_ASTC_10x5_UNORM_BLOCK">173</entry>
      <entry name="VK_FORMAT_ASTC_10x5_SRGB_BLOCK">174</entry>
      <entry name="VK_FORMAT_ASTC_10x6_UNORM_BLOCK">175</entry>
      <entry name="VK_FORMAT_ASTC_10x6_SRGB_BLOCK">176</entry>
      <entry name="VK_FORMAT_ASTC_10x8_UNORM_BLOCK">177</entry>
      <entry name="VK_FORMAT_ASTC_10x8_SRGB_BLOCK">178</entry>
      <entry name="VK_FORMAT_ASTC_10x10_UNORM_BLOCK">179</entry>
      <entry name="VK_FORMAT_ASTC_10x10_SRGB_BLOCK">180</entry>
      <entry name="VK_FORMAT_ASTC_12x10_UNORM_BLOCK">181</entry>
      <entry name="VK_FORMAT_ASTC_12x10_SRGB_BLOCK">182</entry>
      <entry name="VK_FORMAT_ASTC_12x12_UNORM_BLOCK">183</entry>
      <entry name="VK_FORMAT_ASTC_12x12_SRGB_BLOCK">184</entry>
   </enum>
   <enum name="VkImageUsageFlagBits">
      <entry name="VK_IMAGE_USAGE_TRANSFER_SRC_BIT">1</entry>
      <entry name="VK_IMAGE_USAGE_TRANSFER_DST_BIT">2</entry>
      <entry name="VK_IMAGE_USAGE_SAMPLED_BIT">4</entry>
      <entry name="VK_IMAGE_USAGE_STORAGE_BIT">8</entry>
      <entry name="VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT">16</entry>
      <entry name="VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT">32</entry>
      <entry name="VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT">64</entry>
      <entry name="VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT">128</entry>
   </enum>
   <enum name="VkCompositeAlphaFlagBitsKHR">
      <entry name="VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR">1</entry>
      <entry name="VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR">2</entry>
      <entry name="VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR">4</entry>
      <entry name="VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR">8</entry>
   </enum>
   <enum name="VkSurfaceTransformFlagBitsKHR">
      <entry name="VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR">1</entry>
      <entry name="VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR">2</entry>
      <entry name="VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR">4</entry>
      <entry name="VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR">8</entry>
      <entry name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR">16</entry>
      <entry name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR">32</entry>
      <entry name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR">64</entry>
      <entry name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR">128</entry>
      <entry name="VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR">256</entry>
   </enum>
   <enum name="VkObjectType">
      <entry name="VK_OBJECT_TYPE_UNKNOWN">0</entry>
      <entry name="VK_OBJECT_TYPE_INSTANCE">1</entry>
      <entry name="VK_OBJECT_TYPE_PHYSICAL_DEVICE">2</entry>
      <entry name="VK_OBJECT_TYPE_DEVICE">3</entry>
      <entry name="VK_OBJECT_TYPE_QUEUE">4</entry>
      <entry name="VK_OBJECT_TYPE_SEMAPHORE">5</entry>
      <entry name="VK_OBJECT_TYPE_COMMAND_BUFFER">6</entry>
      <entry name="VK_OBJECT_TYPE_FENCE">7</entry>
      <entry name="VK_OBJECT_TYPE_DEVICE_MEMORY">8</entry>
      <entry name="VK_OBJECT_TYPE_BUFFER">9</entry>
      <entry name="VK_OBJECT_TYPE_IMAGE">10</entry>
      <entry name="VK_OBJECT_TYPE_EVENT">11</entry>
      <entry name="VK_OBJECT_TYPE_QUERY_POOL">12</entry>
      <entry name="VK_OBJECT_TYPE_BUFFER_VIEW">13</entry>
      <entry name="VK_OBJECT_TYPE_IMAGE_VIEW">14</entry>
      <entry name="VK_OBJECT_TYPE_SHADER_MODULE">15</entry>
      <entry name="VK_OBJECT_TYPE_PIPELINE_CACHE">16</entry>
      <entry name="VK_OBJECT_TYPE_PIPELINE_LAYOUT">17</entry>
      <entry name="VK_OBJECT_TYPE_RENDER_PASS">18</entry>
      <entry name="VK_OBJECT_TYPE_PIPELINE">19</entry>
      <entry name="VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT">20</entry>
      <entry name="VK_OBJECT_TYPE_SAMPLER">21</entry>
      <entry name="VK_OBJECT_TYPE_DESCRIPTOR_POOL">22</entry>
      <entry name="VK_OBJECT_TYPE_DESCRIPTOR_SET">23</entry>
      <entry name="VK_OBJECT_TYPE_FRAMEBUFFER">24</entry>
      <entry name="VK_OBJECT_TYPE_COMMAND_POOL">25</entry>
      <entry name="VK_OBJECT_TYPE_SURFACE_KHR">1000000000</entry>
      <entry name="VK_OBJECT_TYPE_SWAPCHAIN_KHR">1000001000</entry>
      <entry name="VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT">1000128000</entry>
   </enum>
   <enum name="VkSharingMode">
      <entry name="VK_SHARING_MODE_EXCLUSIVE">0</entry>
      <entry name="VK_SHARING_MODE_CONCURRENT">1</entry>
   </enum>
   <enum name="VkSwapchainCreateFlagBitsKHR"/>
   <enum name="VkImageLayout">
      <entry name="VK_IMAGE_LAYOUT_UNDEFINED">0</entry>
      <entry name="VK_IMAGE_LAYOUT_GENERAL">1</entry>
      <entry name="VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL">2</entry>
      <entry name="VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL">3</entry>
      <entry name="VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL">4</entry>
      <entry name="VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL">5</entry>
      <entry name="VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL">6</entry>
      <entry name="VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL">7</entry>
      <entry name="VK_IMAGE_LAYOUT_PREINITIALIZED">8</entry>
      <entry name="VK_IMAGE_LAYOUT_PRESENT_SRC_KHR">1000001002</entry>
   </enum>
   <enum name="VkDebugUtilsMessageTypeFlagBitsEXT">
      <entry name="VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT">1</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT">2</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT">4</entry>
   </enum>
   <enum name="VkDebugUtilsMessageSeverityFlagBitsEXT">
      <entry name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT">1</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT">16</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT">256</entry>
      <entry name="VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT">4096</entry>
   </enum>
   <enum name="VkVendorId">
      <entry name="VK_VENDOR_ID_VIV">65537</entry>
      <entry name="VK_VENDOR_ID_VSI">65538</entry>
      <entry name="VK_VENDOR_ID_KAZAN">65539</entry>
   </enum>
   <enum name="VkAccessFlagBits">
      <entry name="VK_ACCESS_INDIRECT_COMMAND_READ_BIT">1</entry>
      <entry name="VK_ACCESS_INDEX_READ_BIT">2</entry>
      <entry name="VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT">4</entry>
      <entry name="VK_ACCESS_UNIFORM_READ_BIT">8</entry>
      <entry name="VK_ACCESS_INPUT_ATTACHMENT_READ_BIT">16</entry>
      <entry name="VK_ACCESS_SHADER_READ_BIT">32</entry>
      <entry name="VK_ACCESS_SHADER_WRITE_BIT">64</entry>
      <entry name="VK_ACCESS_COLOR_ATTACHMENT_READ_BIT">128</entry>
      <entry name="VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT">256</entry>
      <entry name="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT">512</entry>
      <entry name="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT">1024</entry>
      <entry name="VK_ACCESS_TRANSFER_READ_BIT">2048</entry>
      <entry name="VK_ACCESS_TRANSFER_WRITE_BIT">4096</entry>
      <entry name="VK_ACCESS_HOST_READ_BIT">8192</entry>
      <entry name="VK_ACCESS_HOST_WRITE_BIT">16384</entry>
      <entry name="VK_ACCESS_MEMORY_READ_BIT">32768</entry>
      <entry name="VK_ACCESS_MEMORY_WRITE_BIT">65536</entry>
   </enum>
   <enum name="VkImageAspectFlagBits">
      <entry name="VK_IMAGE_ASPECT_COLOR_BIT">1</entry>
      <entry name="VK_IMAGE_ASPECT_DEPTH_BIT">2</entry>
      <entry name="VK_IMAGE_ASPECT_STENCIL_BIT">4</entry>
      <entry name="VK_IMAGE_ASPECT_METADATA_BIT">8</entry>
   </enum>
   <enum name="VkSubpassContents">
      <entry name="VK_SUBPASS_CONTENTS_INLINE">0</entry>
      <entry name="VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS">1</entry>
   </enum>
   <enum name="VkShaderStageFlagBits">
      <entry name="VK_SHADER_STAGE_VERTEX_BIT">1</entry>
      <entry name="VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT">2</entry>
      <entry name="VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT">4</entry>
      <entry name="VK_SHADER_STAGE_GEOMETRY_BIT">8</entry>
      <entry name="VK_SHADER_STAGE_FRAGMENT_BIT">16</entry>
      <entry name="VK_SHADER_STAGE_ALL_GRAPHICS">31</entry>
      <entry name="VK_SHADER_STAGE_COMPUTE_BIT">32</entry>
      <entry name="VK_SHADER_STAGE_ALL">2147483647</entry>
   </enum>
   <enum name="VkQueryResultFlagBits">
      <entry name="VK_QUERY_RESULT_64_BIT">1</entry>
      <entry name="VK_QUERY_RESULT_WAIT_BIT">2</entry>
      <entry name="VK_QUERY_RESULT_WITH_AVAILABILITY_BIT">4</entry>
      <entry name="VK_QUERY_RESULT_PARTIAL_BIT">8</entry>
   </enum>
   <enum name="VkPipelineStageFlagBits">
      <entry name="VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT">1</entry>
      <entry name="VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT">2</entry>
      <entry name="VK_PIPELINE_STAGE_VERTEX_INPUT_BIT">4</entry>
      <entry name="VK_PIPELINE_STAGE_VERTEX_SHADER_BIT">8</entry>
      <entry name="VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT">16</entry>
      <entry name="VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT">32</entry>
      <entry name="VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT">64</entry>
      <entry name="VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT">128</entry>
      <entry name="VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT">256</entry>
      <entry name="VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT">512</entry>
      <entry name="VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT">1024</entry>
      <entry name="VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT">2048</entry>
      <entry name="VK_PIPELINE_STAGE_TRANSFER_BIT">4096</entry>
      <entry name="VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT">8192</entry>
      <entry name="VK_PIPELINE_STAGE_HOST_BIT">16384</entry>
      <entry name="VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT">32768</entry>
      <entry name="VK_PIPELINE_STAGE_ALL_COMMANDS_BIT">65536</entry>
   </enum>
   <enum name="VkQueryControlFlagBits">
      <entry name="VK_QUERY_CONTROL_PRECISE_BIT">1</entry>
   </enum>
   <enum name="VkDependencyFlagBits">
      <entry name="VK_DEPENDENCY_BY_REGION_BIT">1</entry>
   </enum>
   <enum name="VkFilter">
      <entry name="VK_FILTER_NEAREST">0</entry>
      <entry name="VK_FILTER_LINEAR">1</entry>
   </enum>
   <enum name="VkIndexType">
      <entry name="VK_INDEX_TYPE_UINT16">0</entry>
      <entry name="VK_INDEX_TYPE_UINT32">1</entry>
   </enum>
   <enum name="VkPipelineBindPoint">
      <entry name="VK_PIPELINE_BIND_POINT_GRAPHICS">0</entry>
      <entry name="VK_PIPELINE_BIND_POINT_COMPUTE">1</entry>
   </enum>
   <enum name="VkStencilFaceFlagBits">
      <entry name="VK_STENCIL_FACE_FRONT_BIT">1</entry>
      <entry name="VK_STENCIL_FACE_BACK_BIT">2</entry>
      <entry name="VK_STENCIL_FRONT_AND_BACK">3</entry>
   </enum>
   <enum name="VkCommandBufferResetFlagBits">
      <entry name="VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT">1</entry>
   </enum>
   <enum name="VkQueryPipelineStatisticFlagBits">
      <entry name="VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT">1</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT">2</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT">4</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT">8</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT">16</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT">32</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT">64</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT">128</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT">256</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT">512</entry>
      <entry name="VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT">1024</entry>
   </enum>
   <enum name="VkCommandBufferUsageFlagBits">
      <entry name="VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT">1</entry>
      <entry name="VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT">2</entry>
      <entry name="VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT">4</entry>
   </enum>
   <enum name="VkCommandBufferLevel">
      <entry name="VK_COMMAND_BUFFER_LEVEL_PRIMARY">0</entry>
      <entry name="VK_COMMAND_BUFFER_LEVEL_SECONDARY">1</entry>
   </enum>
   <enum name="VkCommandPoolResetFlagBits">
      <entry name="VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT">1</entry>
   </enum>
   <enum name="VkCommandPoolCreateFlagBits">
      <entry name="VK_COMMAND_POOL_CREATE_TRANSIENT_BIT">1</entry>
      <entry name="VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT">2</entry>
   </enum>
   <enum name="VkSubpassDescriptionFlagBits"/>
   <enum name="VkAttachmentStoreOp">
      <entry name="VK_ATTACHMENT_STORE_OP_STORE">0</entry>
      <entry name="VK_ATTACHMENT_STORE_OP_DONT_CARE">1</entry>
   </enum>
   <enum name="VkAttachmentLoadOp">
      <entry name="VK_ATTACHMENT_LOAD_OP_LOAD">0</entry>
      <entry name="VK_ATTACHMENT_LOAD_OP_CLEAR">1</entry>
      <entry name="VK_ATTACHMENT_LOAD_OP_DONT_CARE">2</entry>
   </enum>
   <enum name="VkSampleCountFlagBits">
      <entry name="VK_SAMPLE_COUNT_1_BIT">1</entry>
      <entry name="VK_SAMPLE_COUNT_2_BIT">2</entry>
      <entry name="VK_SAMPLE_COUNT_4_BIT">4</entry>
      <entry name="VK_SAMPLE_COUNT_8_BIT">8</entry>
      <entry name="VK_SAMPLE_COUNT_16_BIT">16</entry>
      <entry name="VK_SAMPLE_COUNT_32_BIT">32</entry>
      <entry name="VK_SAMPLE_COUNT_64_BIT">64</entry>
   </enum>
   <enum name="VkAttachmentDescriptionFlagBits">
      <entry name="VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT">1</entry>
   </enum>
   <enum name="VkDescriptorType">
      <entry name="VK_DESCRIPTOR_TYPE_SAMPLER">0</entry>
      <entry name="VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER">1</entry>
      <entry name="VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE">2</entry>
      <entry name="VK_DESCRIPTOR_TYPE_STORAGE_IMAGE">3</entry>
      <entry name="VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER">4</entry>
      <entry name="VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER">5</entry>
      <entry name="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER">6</entry>
      <entry name="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER">7</entry>
      <entry name="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC">8</entry>
      <entry name="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC">9</entry>
      <entry name="VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT">10</entry>
   </enum>
   <enum name="VkDescriptorPoolCreateFlagBits">
      <entry name="VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT">1</entry>
   </enum>
   <enum name="VkDescriptorSetLayoutCreateFlagBits"/>
   <enum name="VkBorderColor">
      <entry name="VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK">0</entry>
      <entry name="VK_BORDER_COLOR_INT_TRANSPARENT_BLACK">1</entry>
      <entry name="VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK">2</entry>
      <entry name="VK_BORDER_COLOR_INT_OPAQUE_BLACK">3</entry>
      <entry name="VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE">4</entry>
      <entry name="VK_BORDER_COLOR_INT_OPAQUE_WHITE">5</entry>
   </enum>
   <enum name="VkCompareOp">
      <entry name="VK_COMPARE_OP_NEVER">0</entry>
      <entry name="VK_COMPARE_OP_LESS">1</entry>
      <entry name="VK_COMPARE_OP_EQUAL">2</entry>
      <entry name="VK_COMPARE_OP_LESS_OR_EQUAL">3</entry>
      <entry name="VK_COMPARE_OP_GREATER">4</entry>
      <entry name="VK_COMPARE_OP_NOT_EQUAL">5</entry>
      <entry name="VK_COMPARE_OP_GREATER_OR_EQUAL">6</entry>
      <entry name="VK_COMPARE_OP_ALWAYS">7</entry>
   </enum>
   <enum name="VkSamplerAddressMode">
      <entry name="VK_SAMPLER_ADDRESS_MODE_REPEAT">0</entry>
      <entry name="VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT">1</entry>
      <entry name="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE">2</entry>
      <entry name="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER">3</entry>
   </enum>
   <enum name="VkSamplerMipmapMode">
      <entry name="VK_SAMPLER_MIPMAP_MODE_NEAREST">0</entry>
      <entry name="VK_SAMPLER_MIPMAP_MODE_LINEAR">1</entry>
   </enum>
   <enum name="VkSamplerCreateFlagBits"/>
   <enum name="VkPipelineCreateFlagBits">
      <entry name="VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT">1</entry>
      <entry name="VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT">2</entry>
      <entry name="VK_PIPELINE_CREATE_DERIVATIVE_BIT">4</entry>
   </enum>
   <enum name="VkDynamicState">
      <entry name="VK_DYNAMIC_STATE_VIEWPORT">0</entry>
      <entry name="VK_DYNAMIC_STATE_SCISSOR">1</entry>
      <entry name="VK_DYNAMIC_STATE_LINE_WIDTH">2</entry>
      <entry name="VK_DYNAMIC_STATE_DEPTH_BIAS">3</entry>
      <entry name="VK_DYNAMIC_STATE_BLEND_CONSTANTS">4</entry>
      <entry name="VK_DYNAMIC_STATE_DEPTH_BOUNDS">5</entry>
      <entry name="VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK">6</entry>
      <entry name="VK_DYNAMIC_STATE_STENCIL_WRITE_MASK">7</entry>
      <entry name="VK_DYNAMIC_STATE_STENCIL_REFERENCE">8</entry>
   </enum>
   <enum name="VkColorComponentFlagBits">
      <entry name="VK_COLOR_COMPONENT_R_BIT">1</entry>
      <entry name="VK_COLOR_COMPONENT_G_BIT">2</entry>
      <entry name="VK_COLOR_COMPONENT_B_BIT">4</entry>
      <entry name="VK_COLOR_COMPONENT_A_BIT">8</entry>
   </enum>
   <enum name="VkBlendOp">
      <entry name="VK_BLEND_OP_ADD">0</entry>
      <entry name="VK_BLEND_OP_SUBTRACT">1</entry>
      <entry name="VK_BLEND_OP_REVERSE_SUBTRACT">2</entry>
      <entry name="VK_BLEND_OP_MIN">3</entry>
      <entry name="VK_BLEND_OP_MAX">4</entry>
   </enum>
   <enum name="VkBlendFactor">
      <entry name="VK_BLEND_FACTOR_ZERO">0</entry>
      <entry name="VK_BLEND_FACTOR_ONE">1</entry>
      <entry name="VK_BLEND_FACTOR_SRC_COLOR">2</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR">3</entry>
      <entry name="VK_BLEND_FACTOR_DST_COLOR">4</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR">5</entry>
      <entry name="VK_BLEND_FACTOR_SRC_ALPHA">6</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA">7</entry>
      <entry name="VK_BLEND_FACTOR_DST_ALPHA">8</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA">9</entry>
      <entry name="VK_BLEND_FACTOR_CONSTANT_COLOR">10</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR">11</entry>
      <entry name="VK_BLEND_FACTOR_CONSTANT_ALPHA">12</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA">13</entry>
      <entry name="VK_BLEND_FACTOR_SRC_ALPHA_SATURATE">14</entry>
      <entry name="VK_BLEND_FACTOR_SRC1_COLOR">15</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR">16</entry>
      <entry name="VK_BLEND_FACTOR_SRC1_ALPHA">17</entry>
      <entry name="VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA">18</entry>
   </enum>
   <enum name="VkLogicOp">
      <entry name="VK_LOGIC_OP_CLEAR">0</entry>
      <entry name="VK_LOGIC_OP_AND">1</entry>
      <entry name="VK_LOGIC_OP_AND_REVERSE">2</entry>
      <entry name="VK_LOGIC_OP_COPY">3</entry>
      <entry name="VK_LOGIC_OP_AND_INVERTED">4</entry>
      <entry name="VK_LOGIC_OP_NO_OP">5</entry>
      <entry name="VK_LOGIC_OP_XOR">6</entry>
      <entry name="VK_LOGIC_OP_OR">7</entry>
      <entry name="VK_LOGIC_OP_NOR">8</entry>
      <entry name="VK_LOGIC_OP_EQUIVALENT">9</entry>
      <entry name="VK_LOGIC_OP_INVERT">10</entry>
      <entry name="VK_LOGIC_OP_OR_REVERSE">11</entry>
      <entry name="VK_LOGIC_OP_COPY_INVERTED">12</entry>
      <entry name="VK_LOGIC_OP_OR_INVERTED">13</entry>
      <entry name="VK_LOGIC_OP_NAND">14</entry>
      <entry name="VK_LOGIC_OP_SET">15</entry>
   </enum>
   <enum name="VkStencilOp">
      <entry name="VK_STENCIL_OP_KEEP">0</entry>
      <entry name="VK_STENCIL_OP_ZERO">1</entry>
      <entry name="VK_STENCIL_OP_REPLACE">2</entry>
      <entry name="VK_STENCIL_OP_INCREMENT_AND_CLAMP">3</entry>
      <entry name="VK_STENCIL_OP_DECREMENT_AND_CLAMP">4</entry>
      <entry name="VK_STENCIL_OP_INVERT">5</entry>
      <entry name="VK_STENCIL_OP_INCREMENT_AND_WRAP">6</entry>
      <entry name="VK_STENCIL_OP_DECREMENT_AND_WRAP">7</entry>
   </enum>
   <enum name="VkFrontFace">
      <entry name="VK_FRONT_FACE_COUNTER_CLOCKWISE">0</entry>
      <entry name="VK_FRONT_FACE_CLOCKWISE">1</entry>
   </enum>
   <enum name="VkCullModeFlagBits">
      <entry name="VK_CULL_MODE_NONE">0</entry>
      <entry name="VK_CULL_MODE_FRONT_BIT">1</entry>
      <entry name="VK_CULL_MODE_BACK_BIT">2</entry>
      <entry name="VK_CULL_MODE_FRONT_AND_BACK">3</entry>
   </enum>
   <enum name="VkPolygonMode">
      <entry name="VK_POLYGON_MODE_FILL">0</entry>
      <entry name="VK_POLYGON_MODE_LINE">1</entry>
      <entry name="VK_POLYGON_MODE_POINT">2</entry>
   </enum>
   <enum name="VkPrimitiveTopology">
      <entry name="VK_PRIMITIVE_TOPOLOGY_POINT_LIST">0</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_LINE_LIST">1</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP">2</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST">3</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP">4</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN">5</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY">6</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY">7</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY">8</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY">9</entry>
      <entry name="VK_PRIMITIVE_TOPOLOGY_PATCH_LIST">10</entry>
   </enum>
   <enum name="VkVertexInputRate">
      <entry name="VK_VERTEX_INPUT_RATE_VERTEX">0</entry>
      <entry name="VK_VERTEX_INPUT_RATE_INSTANCE">1</entry>
   </enum>
   <enum name="VkComponentSwizzle">
      <entry name="VK_COMPONENT_SWIZZLE_IDENTITY">0</entry>
      <entry name="VK_COMPONENT_SWIZZLE_ZERO">1</entry>
      <entry name="VK_COMPONENT_SWIZZLE_ONE">2</entry>
      <entry name="VK_COMPONENT_SWIZZLE_R">3</entry>
      <entry name="VK_COMPONENT_SWIZZLE_G">4</entry>
      <entry name="VK_COMPONENT_SWIZZLE_B">5</entry>
      <entry name="VK_COMPONENT_SWIZZLE_A">6</entry>
   </enum>
   <enum name="VkImageViewType">
      <entry name="VK_IMAGE_VIEW_TYPE_1D">0</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_2D">1</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_3D">2</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_CUBE">3</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_1D_ARRAY">4</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_2D_ARRAY">5</entry>
      <entry name="VK_IMAGE_VIEW_TYPE_CUBE_ARRAY">6</entry>
   </enum>
   <enum name="VkImageViewCreateFlagBits"/>
   <enum name="VkImageTiling">
      <entry name="VK_IMAGE_TILING_OPTIMAL">0</entry>
      <entry name="VK_IMAGE_TILING_LINEAR">1</entry>
   </enum>
   <enum name="VkImageType">
      <entry name="VK_IMAGE_TYPE_1D">0</entry>
      <entry name="VK_IMAGE_TYPE_2D">1</entry>
      <entry name="VK_IMAGE_TYPE_3D">2</entry>
   </enum>
   <enum name="VkImageCreateFlagBits">
      <entry name="VK_IMAGE_CREATE_SPARSE_BINDING_BIT">1</entry>
      <entry name="VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT">2</entry>
      <entry name="VK_IMAGE_CREATE_SPARSE_ALIASED_BIT">4</entry>
      <entry name="VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT">8</entry>
      <entry name="VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT">16</entry>
   </enum>
   <enum name="VkBufferUsageFlagBits">
      <entry name="VK_BUFFER_USAGE_TRANSFER_SRC_BIT">1</entry>
      <entry name="VK_BUFFER_USAGE_TRANSFER_DST_BIT">2</entry>
      <entry name="VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT">4</entry>
      <entry name="VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT">8</entry>
      <entry name="VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT">16</entry>
      <entry name="VK_BUFFER_USAGE_STORAGE_BUFFER_BIT">32</entry>
      <entry name="VK_BUFFER_USAGE_INDEX_BUFFER_BIT">64</entry>
      <entry name="VK_BUFFER_USAGE_VERTEX_BUFFER_BIT">128</entry>
      <entry name="VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT">256</entry>
   </enum>
   <enum name="VkBufferCreateFlagBits">
      <entry name="VK_BUFFER_CREATE_SPARSE_BINDING_BIT">1</entry>
      <entry name="VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT">2</entry>
      <entry name="VK_BUFFER_CREATE_SPARSE_ALIASED_BIT">4</entry>
   </enum>
   <enum name="VkQueryType">
      <entry name="VK_QUERY_TYPE_OCCLUSION">0</entry>
      <entry name="VK_QUERY_TYPE_PIPELINE_STATISTICS">1</entry>
      <entry name="VK_QUERY_TYPE_TIMESTAMP">2</entry>
   </enum>
   <enum name="VkFenceCreateFlagBits">
      <entry name="VK_FENCE_CREATE_SIGNALED_BIT">1</entry>
   </enum>
   <enum name="VkSparseMemoryBindFlagBits">
      <entry name="VK_SPARSE_MEMORY_BIND_METADATA_BIT">1</entry>
   </enum>
   <enum name="VkSparseImageFormatFlagBits">
      <entry name="VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT">1</entry>
      <entry name="VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT">2</entry>
      <entry name="VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT">4</entry>
   </enum>
   <enum name="VkDeviceQueueCreateFlagBits"/>
   <enum name="VkMemoryHeapFlagBits">
      <entry name="VK_MEMORY_HEAP_DEVICE_LOCAL_BIT">1</entry>
   </enum>
   <enum name="VkMemoryPropertyFlagBits">
      <entry name="VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT">1</entry>
      <entry name="VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT">2</entry>
      <entry name="VK_MEMORY_PROPERTY_HOST_COHERENT_BIT">4</entry>
      <entry name="VK_MEMORY_PROPERTY_HOST_CACHED_BIT">8</entry>
      <entry name="VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT">16</entry>
   </enum>
   <enum name="VkQueueFlagBits">
      <entry name="VK_QUEUE_GRAPHICS_BIT">1</entry>
      <entry name="VK_QUEUE_COMPUTE_BIT">2</entry>
      <entry name="VK_QUEUE_TRANSFER_BIT">4</entry>
      <entry name="VK_QUEUE_SPARSE_BINDING_BIT">8</entry>
   </enum>
   <enum name="VkPhysicalDeviceType">
      <entry name="VK_PHYSICAL_DEVICE_TYPE_OTHER">0</entry>
      <entry name="VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU">1</entry>
      <entry name="VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU">2</entry>
      <entry name="VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU">3</entry>
      <entry name="VK_PHYSICAL_DEVICE_TYPE_CPU">4</entry>
   </enum>
   <enum name="VkFormatFeatureFlagBits">
      <entry name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT">1</entry>
      <entry name="VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT">2</entry>
      <entry name="VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT">4</entry>
      <entry name="VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT">8</entry>
      <entry name="VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT">16</entry>
      <entry name="VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT">32</entry>
      <entry name="VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT">64</entry>
      <entry name="VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT">128</entry>
      <entry name="VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT">256</entry>
      <entry name="VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT">512</entry>
      <entry name="VK_FORMAT_FEATURE_BLIT_SRC_BIT">1024</entry>
      <entry name="VK_FORMAT_FEATURE_BLIT_DST_BIT">2048</entry>
      <entry name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT">4096</entry>
   </enum>
   <enum name="VkPipelineCacheHeaderVersion">
      <entry name="VK_PIPELINE_CACHE_HEADER_VERSION_ONE">1</entry>
   </enum>
   <function-pointer name="PFN_vkInternalFreeNotification">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="pUserData" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="size" optional="False">
         <type const="False">size_t</type>
      </arg>
      <arg name="allocationType" optional="False">
         <type const="False">VkInternalAllocationType</type>
      </arg>
      <arg name="allocationScope" optional="False">
         <type const="False">VkSystemAllocationScope</type>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkInternalAllocationNotification">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="pUserData" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="size" optional="False">
         <type const="False">size_t</type>
      </arg>
      <arg name="allocationType" optional="False">
         <type const="False">VkInternalAllocationType</type>
      </arg>
      <arg name="allocationScope" optional="False">
         <type const="False">VkSystemAllocationScope</type>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkFreeFunction">
      <return-type>
         <type const="False">void</type>
      </return-type>
      <arg name="pUserData" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="pMemory" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkReallocationFunction">
      <return-type>
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </return-type>
      <arg name="pUserData" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="pOriginal" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="size" optional="False">
         <type const="False">size_t</type>
      </arg>
      <arg name="alignment" optional="False">
         <type const="False">size_t</type>
      </arg>
      <arg name="allocationScope" optional="False">
         <type const="False">VkSystemAllocationScope</type>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkAllocationFunction">
      <return-type>
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </return-type>
      <arg name="pUserData" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
      <arg name="size" optional="False">
         <type const="False">size_t</type>
      </arg>
      <arg name="alignment" optional="False">
         <type const="False">size_t</type>
      </arg>
      <arg name="allocationScope" optional="False">
         <type const="False">VkSystemAllocationScope</type>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkDebugUtilsMessengerCallbackEXT">
      <return-type>
         <type const="False">VkBool32</type>
      </return-type>
      <arg name="messageSeverity" optional="False">
         <type const="False">VkDebugUtilsMessageSeverityFlagBitsEXT</type>
      </arg>
      <arg name="messageTypes" optional="False">
         <type const="False">VkDebugUtilsMessageTypeFlagsEXT</type>
      </arg>
      <arg name="pCallbackData" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsMessengerCallbackDataEXT</type>
         </pointer>
      </arg>
      <arg name="pUserData" optional="False">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </arg>
   </function-pointer>
   <function-pointer name="PFN_vkVoidFunction">
      <return-type>
         <type const="False">void</type>
      </return-type>
   </function-pointer>
   <handle name="VkPhysicalDevice" type="uintptr_t"/>
   <handle name="VkSurfaceKHR" type="uint64_t"/>
   <handle name="VkInstance" type="uintptr_t"/>
   <handle name="VkSwapchainKHR" type="uint64_t"/>
   <handle name="VkSemaphore" type="uint64_t"/>
   <handle name="VkQueue" type="uintptr_t"/>
   <handle name="VkFence" type="uint64_t"/>
   <handle name="VkDevice" type="uintptr_t"/>
   <handle name="VkImage" type="uint64_t"/>
   <handle name="VkDebugUtilsMessengerEXT" type="uint64_t"/>
   <handle name="VkCommandBuffer" type="uintptr_t"/>
   <handle name="VkBuffer" type="uint64_t"/>
   <handle name="VkFramebuffer" type="uint64_t"/>
   <handle name="VkRenderPass" type="uint64_t"/>
   <handle name="VkPipelineLayout" type="uint64_t"/>
   <handle name="VkQueryPool" type="uint64_t"/>
   <handle name="VkEvent" type="uint64_t"/>
   <handle name="VkDescriptorSet" type="uint64_t"/>
   <handle name="VkPipeline" type="uint64_t"/>
   <handle name="VkCommandPool" type="uint64_t"/>
   <handle name="VkImageView" type="uint64_t"/>
   <handle name="VkBufferView" type="uint64_t"/>
   <handle name="VkSampler" type="uint64_t"/>
   <handle name="VkDescriptorPool" type="uint64_t"/>
   <handle name="VkDescriptorSetLayout" type="uint64_t"/>
   <handle name="VkShaderModule" type="uint64_t"/>
   <handle name="VkPipelineCache" type="uint64_t"/>
   <handle name="VkDeviceMemory" type="uint64_t"/>
   <integer-constant name="VK_KHR_WIN32_SURFACE_SPEC_VERSION" size="32">6</integer-constant>
   <integer-constant name="VK_KHR_SURFACE_SPEC_VERSION" size="32">25</integer-constant>
   <integer-constant name="VK_KHR_SWAPCHAIN_SPEC_VERSION" size="32">70</integer-constant>
   <integer-constant name="VK_EXT_DEBUG_UTILS_SPEC_VERSION" size="32">1</integer-constant>
   <integer-constant name="VK_SUBPASS_EXTERNAL" size="32">4294967295</integer-constant>
   <integer-constant name="VK_QUEUE_FAMILY_IGNORED" size="32">4294967295</integer-constant>
   <integer-constant name="VK_FALSE" size="32">0</integer-constant>
   <integer-constant name="VK_TRUE" size="32">1</integer-constant>
   <integer-constant name="VK_ATTACHMENT_UNUSED" size="32">4294967295</integer-constant>
   <integer-constant name="VK_WHOLE_SIZE" size="64">18446744073709551615</integer-constant>
   <integer-constant name="VK_REMAINING_ARRAY_LAYERS" size="32">4294967295</integer-constant>
   <integer-constant name="VK_REMAINING_MIP_LEVELS" size="32">4294967295</integer-constant>
   <prelude-type name="uint32_t"/>
   <prelude-type name="uintptr_t"/>
   <prelude-type name="uint64_t"/>
   <prelude-type name="size_t"/>
   <prelude-type name="void"/>
   <prelude-type name="HWND"/>
   <prelude-type name="HINSTANCE"/>
   <prelude-type name="char"/>
   <prelude-type name="float"/>
   <prelude-type name="int32_t"/>
   <prelude-type name="uint8_t"/>
   <prelude-type name="VK_NULL_HANDLE"/>
   <prelude-type name="VK_HEADER_VERSION"/>
   <prelude-type name="VK_VERSION_PATCH"/>
   <prelude-type name="VK_VERSION_MINOR"/>
   <prelude-type name="VK_VERSION_MAJOR"/>
   <prelude-type name="VK_API_VERSION_1_0"/>
   <prelude-type name="VK_API_VERSION"/>
   <prelude-type name="vk_platform"/>
   <real-constant name="VK_LOD_CLAMP_NONE" size="32">1000.0</real-constant>
   <string-constant name="VK_KHR_WIN32_SURFACE_EXTENSION_NAME">VK_KHR_win32_surface</string-constant>
   <string-constant name="VK_KHR_SURFACE_EXTENSION_NAME">VK_KHR_surface</string-constant>
   <string-constant name="VK_KHR_SWAPCHAIN_EXTENSION_NAME">VK_KHR_swapchain</string-constant>
   <string-constant name="VK_EXT_DEBUG_UTILS_EXTENSION_NAME">VK_EXT_debug_utils</string-constant>
   <struct name="VkAllocationCallbacks">
      <member name="pUserData" optional="True">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
      <member name="pfnAllocation" optional="False">
         <type const="False">PFN_vkAllocationFunction</type>
      </member>
      <member name="pfnReallocation" optional="False">
         <type const="False">PFN_vkReallocationFunction</type>
      </member>
      <member name="pfnFree" optional="False">
         <type const="False">PFN_vkFreeFunction</type>
      </member>
      <member name="pfnInternalAllocation" optional="True">
         <type const="False">PFN_vkInternalAllocationNotification</type>
      </member>
      <member name="pfnInternalFree" optional="True">
         <type const="False">PFN_vkInternalFreeNotification</type>
      </member>
   </struct>
   <struct name="VkWin32SurfaceCreateInfoKHR">
      <member default_value="VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkWin32SurfaceCreateFlagsKHR</type>
      </member>
      <member name="hinstance" optional="False">
         <type const="False">HINSTANCE</type>
      </member>
      <member name="hwnd" optional="False">
         <type const="False">HWND</type>
      </member>
   </struct>
   <struct name="VkSurfaceFormatKHR">
      <member name="format" optional="False">
         <type const="False">VkFormat</type>
      </member>
      <member name="colorSpace" optional="False">
         <type const="False">VkColorSpaceKHR</type>
      </member>
   </struct>
   <struct name="VkSurfaceCapabilitiesKHR">
      <member name="minImageCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="currentExtent" optional="False">
         <type const="False">VkExtent2D</type>
      </member>
      <member name="minImageExtent" optional="False">
         <type const="False">VkExtent2D</type>
      </member>
      <member name="maxImageExtent" optional="False">
         <type const="False">VkExtent2D</type>
      </member>
      <member name="maxImageArrayLayers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="supportedTransforms" optional="True">
         <type const="False">VkSurfaceTransformFlagsKHR</type>
      </member>
      <member name="currentTransform" optional="False">
         <type const="False">VkSurfaceTransformFlagBitsKHR</type>
      </member>
      <member name="supportedCompositeAlpha" optional="True">
         <type const="False">VkCompositeAlphaFlagsKHR</type>
      </member>
      <member name="supportedUsageFlags" optional="True">
         <type const="False">VkImageUsageFlags</type>
      </member>
   </struct>
   <struct name="VkExtent2D">
      <member name="width" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="height" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkPresentInfoKHR">
      <member default_value="VK_STRUCTURE_TYPE_PRESENT_INFO_KHR" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="waitSemaphoreCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="waitSemaphoreCount" name="pWaitSemaphores" optional="False">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
      <member name="swapchainCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="swapchainCount" name="pSwapchains" optional="False">
         <pointer const="False">
            <type const="True">VkSwapchainKHR</type>
         </pointer>
      </member>
      <member length="swapchainCount" name="pImageIndices" optional="False">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member length="swapchainCount" name="pResults" optional="True">
         <pointer const="False">
            <type const="False">VkResult</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSwapchainCreateInfoKHR">
      <member default_value="VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkSwapchainCreateFlagsKHR</type>
      </member>
      <member name="surface" optional="False">
         <type const="False">VkSurfaceKHR</type>
      </member>
      <member name="minImageCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="imageFormat" optional="False">
         <type const="False">VkFormat</type>
      </member>
      <member name="imageColorSpace" optional="False">
         <type const="False">VkColorSpaceKHR</type>
      </member>
      <member name="imageExtent" optional="False">
         <type const="False">VkExtent2D</type>
      </member>
      <member name="imageArrayLayers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="imageUsage" optional="False">
         <type const="False">VkImageUsageFlags</type>
      </member>
      <member name="imageSharingMode" optional="False">
         <type const="False">VkSharingMode</type>
      </member>
      <member name="queueFamilyIndexCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="queueFamilyIndexCount" name="pQueueFamilyIndices" optional="False">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="preTransform" optional="False">
         <type const="False">VkSurfaceTransformFlagBitsKHR</type>
      </member>
      <member name="compositeAlpha" optional="False">
         <type const="False">VkCompositeAlphaFlagBitsKHR</type>
      </member>
      <member name="presentMode" optional="False">
         <type const="False">VkPresentModeKHR</type>
      </member>
      <member name="clipped" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="oldSwapchain" optional="True">
         <type const="False">VkSwapchainKHR</type>
      </member>
   </struct>
   <struct name="VkDebugUtilsMessengerCallbackDataEXT">
      <member default_value="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="True">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkDebugUtilsMessengerCallbackDataFlagsEXT</type>
      </member>
      <member name="pMessageIdName" optional="True">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="messageIdNumber" optional="True">
         <type const="False">int32_t</type>
      </member>
      <member name="pMessage" optional="False">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="queueLabelCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="queueLabelCount" name="pQueueLabels" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </member>
      <member name="cmdBufLabelCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="cmdBufLabelCount" name="pCmdBufLabels" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsLabelEXT</type>
         </pointer>
      </member>
      <member name="objectCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="objectCount" name="pObjects" optional="False">
         <pointer const="False">
            <type const="True">VkDebugUtilsObjectNameInfoEXT</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDebugUtilsObjectNameInfoEXT">
      <member default_value="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="objectType" optional="False">
         <type const="False">VkObjectType</type>
      </member>
      <member name="objectHandle" optional="False">
         <type const="False">uint64_t</type>
      </member>
      <member name="pObjectName" optional="True">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDebugUtilsLabelEXT">
      <member default_value="VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="pLabelName" optional="False">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="color" optional="True">
         <array length="4">
            <type const="False">float</type>
         </array>
      </member>
   </struct>
   <struct name="VkDebugUtilsMessengerCreateInfoEXT">
      <member default_value="VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkDebugUtilsMessengerCreateFlagsEXT</type>
      </member>
      <member name="messageSeverity" optional="False">
         <type const="False">VkDebugUtilsMessageSeverityFlagsEXT</type>
      </member>
      <member name="messageType" optional="False">
         <type const="False">VkDebugUtilsMessageTypeFlagsEXT</type>
      </member>
      <member name="pfnUserCallback" optional="False">
         <type const="False">PFN_vkDebugUtilsMessengerCallbackEXT</type>
      </member>
      <member name="pUserData" optional="True">
         <pointer const="False">
            <type const="False">void</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDebugUtilsObjectTagInfoEXT">
      <member default_value="VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="objectType" optional="False">
         <type const="False">VkObjectType</type>
      </member>
      <member name="objectHandle" optional="False">
         <type const="False">uint64_t</type>
      </member>
      <member name="tagName" optional="False">
         <type const="False">uint64_t</type>
      </member>
      <member name="tagSize" optional="False">
         <type const="False">size_t</type>
      </member>
      <member length="tagSize" name="pTag" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkBaseInStructure">
      <member name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">VkBaseInStructure</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkBaseOutStructure">
      <member name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="False">VkBaseOutStructure</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkMemoryBarrier">
      <member default_value="VK_STRUCTURE_TYPE_MEMORY_BARRIER" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="srcAccessMask" optional="True">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dstAccessMask" optional="True">
         <type const="False">VkAccessFlags</type>
      </member>
   </struct>
   <struct name="VkImageMemoryBarrier">
      <member default_value="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="srcAccessMask" optional="True">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dstAccessMask" optional="True">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="oldLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </member>
      <member name="newLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </member>
      <member name="srcQueueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstQueueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="image" optional="False">
         <type const="False">VkImage</type>
      </member>
      <member name="subresourceRange" optional="False">
         <type const="False">VkImageSubresourceRange</type>
      </member>
   </struct>
   <struct name="VkImageSubresourceRange">
      <member name="aspectMask" optional="False">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="baseMipLevel" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="levelCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="baseArrayLayer" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="layerCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDrawIndirectCommand">
      <member name="vertexCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="instanceCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="firstVertex" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="firstInstance" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDrawIndexedIndirectCommand">
      <member name="indexCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="instanceCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="firstIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="vertexOffset" optional="False">
         <type const="False">int32_t</type>
      </member>
      <member name="firstInstance" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDispatchIndirectCommand">
      <member name="x" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="y" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="z" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkBufferMemoryBarrier">
      <member default_value="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="srcAccessMask" optional="True">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dstAccessMask" optional="True">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="srcQueueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstQueueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </member>
      <member name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkRenderPassBeginInfo">
      <member default_value="VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="renderPass" optional="False">
         <type const="False">VkRenderPass</type>
      </member>
      <member name="framebuffer" optional="False">
         <type const="False">VkFramebuffer</type>
      </member>
      <member name="renderArea" optional="False">
         <type const="False">VkRect2D</type>
      </member>
      <member name="clearValueCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="clearValueCount" name="pClearValues" optional="False">
         <pointer const="False">
            <type const="True">VkClearValue</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkClearDepthStencilValue">
      <member name="depth" optional="False">
         <type const="False">float</type>
      </member>
      <member name="stencil" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkRect2D">
      <member name="offset" optional="False">
         <type const="False">VkOffset2D</type>
      </member>
      <member name="extent" optional="False">
         <type const="False">VkExtent2D</type>
      </member>
   </struct>
   <struct name="VkOffset2D">
      <member name="x" optional="False">
         <type const="False">int32_t</type>
      </member>
      <member name="y" optional="False">
         <type const="False">int32_t</type>
      </member>
   </struct>
   <struct name="VkImageResolve">
      <member name="srcSubresource" optional="False">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="srcOffset" optional="False">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="dstSubresource" optional="False">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="dstOffset" optional="False">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="extent" optional="False">
         <type const="False">VkExtent3D</type>
      </member>
   </struct>
   <struct name="VkExtent3D">
      <member name="width" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="height" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="depth" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkOffset3D">
      <member name="x" optional="False">
         <type const="False">int32_t</type>
      </member>
      <member name="y" optional="False">
         <type const="False">int32_t</type>
      </member>
      <member name="z" optional="False">
         <type const="False">int32_t</type>
      </member>
   </struct>
   <struct name="VkImageSubresourceLayers">
      <member name="aspectMask" optional="False">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="mipLevel" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="baseArrayLayer" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="layerCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkClearRect">
      <member name="rect" optional="False">
         <type const="False">VkRect2D</type>
      </member>
      <member name="baseArrayLayer" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="layerCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkClearAttachment">
      <member name="aspectMask" optional="False">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="colorAttachment" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="clearValue" optional="False">
         <type const="False">VkClearValue</type>
      </member>
   </struct>
   <struct name="VkBufferImageCopy">
      <member name="bufferOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="bufferRowLength" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="bufferImageHeight" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="imageSubresource" optional="False">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="imageOffset" optional="False">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="imageExtent" optional="False">
         <type const="False">VkExtent3D</type>
      </member>
   </struct>
   <struct name="VkImageBlit">
      <member name="srcSubresource" optional="False">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="srcOffsets" optional="False">
         <array length="2">
            <type const="False">VkOffset3D</type>
         </array>
      </member>
      <member name="dstSubresource" optional="False">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="dstOffsets" optional="False">
         <array length="2">
            <type const="False">VkOffset3D</type>
         </array>
      </member>
   </struct>
   <struct name="VkImageCopy">
      <member name="srcSubresource" optional="False">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="srcOffset" optional="False">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="dstSubresource" optional="False">
         <type const="False">VkImageSubresourceLayers</type>
      </member>
      <member name="dstOffset" optional="False">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="extent" optional="False">
         <type const="False">VkExtent3D</type>
      </member>
   </struct>
   <struct name="VkBufferCopy">
      <member name="srcOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="dstOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkViewport">
      <member name="x" optional="False">
         <type const="False">float</type>
      </member>
      <member name="y" optional="False">
         <type const="False">float</type>
      </member>
      <member name="width" optional="False">
         <type const="False">float</type>
      </member>
      <member name="height" optional="False">
         <type const="False">float</type>
      </member>
      <member name="minDepth" optional="False">
         <type const="False">float</type>
      </member>
      <member name="maxDepth" optional="False">
         <type const="False">float</type>
      </member>
   </struct>
   <struct name="VkCommandBufferBeginInfo">
      <member default_value="VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkCommandBufferUsageFlags</type>
      </member>
      <member name="pInheritanceInfo" optional="True">
         <pointer const="False">
            <type const="True">VkCommandBufferInheritanceInfo</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkCommandBufferInheritanceInfo">
      <member default_value="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="renderPass" optional="True">
         <type const="False">VkRenderPass</type>
      </member>
      <member name="subpass" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="framebuffer" optional="True">
         <type const="False">VkFramebuffer</type>
      </member>
      <member name="occlusionQueryEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="queryFlags" optional="True">
         <type const="False">VkQueryControlFlags</type>
      </member>
      <member name="pipelineStatistics" optional="True">
         <type const="False">VkQueryPipelineStatisticFlags</type>
      </member>
   </struct>
   <struct name="VkCommandBufferAllocateInfo">
      <member default_value="VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="commandPool" optional="False">
         <type const="False">VkCommandPool</type>
      </member>
      <member name="level" optional="False">
         <type const="False">VkCommandBufferLevel</type>
      </member>
      <member name="commandBufferCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkCommandPoolCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkCommandPoolCreateFlags</type>
      </member>
      <member name="queueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkRenderPassCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkRenderPassCreateFlags</type>
      </member>
      <member name="attachmentCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="attachmentCount" name="pAttachments" optional="False">
         <pointer const="False">
            <type const="True">VkAttachmentDescription</type>
         </pointer>
      </member>
      <member name="subpassCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="subpassCount" name="pSubpasses" optional="False">
         <pointer const="False">
            <type const="True">VkSubpassDescription</type>
         </pointer>
      </member>
      <member name="dependencyCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="dependencyCount" name="pDependencies" optional="False">
         <pointer const="False">
            <type const="True">VkSubpassDependency</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSubpassDependency">
      <member name="srcSubpass" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstSubpass" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="srcStageMask" optional="False">
         <type const="False">VkPipelineStageFlags</type>
      </member>
      <member name="dstStageMask" optional="False">
         <type const="False">VkPipelineStageFlags</type>
      </member>
      <member name="srcAccessMask" optional="True">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dstAccessMask" optional="True">
         <type const="False">VkAccessFlags</type>
      </member>
      <member name="dependencyFlags" optional="True">
         <type const="False">VkDependencyFlags</type>
      </member>
   </struct>
   <struct name="VkSubpassDescription">
      <member name="flags" optional="True">
         <type const="False">VkSubpassDescriptionFlags</type>
      </member>
      <member name="pipelineBindPoint" optional="False">
         <type const="False">VkPipelineBindPoint</type>
      </member>
      <member name="inputAttachmentCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="inputAttachmentCount" name="pInputAttachments" optional="False">
         <pointer const="False">
            <type const="True">VkAttachmentReference</type>
         </pointer>
      </member>
      <member name="colorAttachmentCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="colorAttachmentCount" name="pColorAttachments" optional="False">
         <pointer const="False">
            <type const="True">VkAttachmentReference</type>
         </pointer>
      </member>
      <member length="colorAttachmentCount" name="pResolveAttachments" optional="True">
         <pointer const="False">
            <type const="True">VkAttachmentReference</type>
         </pointer>
      </member>
      <member name="pDepthStencilAttachment" optional="True">
         <pointer const="False">
            <type const="True">VkAttachmentReference</type>
         </pointer>
      </member>
      <member name="preserveAttachmentCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="preserveAttachmentCount" name="pPreserveAttachments" optional="False">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkAttachmentReference">
      <member name="attachment" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="layout" optional="False">
         <type const="False">VkImageLayout</type>
      </member>
   </struct>
   <struct name="VkAttachmentDescription">
      <member name="flags" optional="True">
         <type const="False">VkAttachmentDescriptionFlags</type>
      </member>
      <member name="format" optional="False">
         <type const="False">VkFormat</type>
      </member>
      <member name="samples" optional="False">
         <type const="False">VkSampleCountFlagBits</type>
      </member>
      <member name="loadOp" optional="False">
         <type const="False">VkAttachmentLoadOp</type>
      </member>
      <member name="storeOp" optional="False">
         <type const="False">VkAttachmentStoreOp</type>
      </member>
      <member name="stencilLoadOp" optional="False">
         <type const="False">VkAttachmentLoadOp</type>
      </member>
      <member name="stencilStoreOp" optional="False">
         <type const="False">VkAttachmentStoreOp</type>
      </member>
      <member name="initialLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </member>
      <member name="finalLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </member>
   </struct>
   <struct name="VkFramebufferCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkFramebufferCreateFlags</type>
      </member>
      <member name="renderPass" optional="False">
         <type const="False">VkRenderPass</type>
      </member>
      <member name="attachmentCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="attachmentCount" name="pAttachments" optional="False">
         <pointer const="False">
            <type const="True">VkImageView</type>
         </pointer>
      </member>
      <member name="width" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="height" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="layers" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkCopyDescriptorSet">
      <member default_value="VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="srcSet" optional="False">
         <type const="False">VkDescriptorSet</type>
      </member>
      <member name="srcBinding" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="srcArrayElement" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstSet" optional="False">
         <type const="False">VkDescriptorSet</type>
      </member>
      <member name="dstBinding" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstArrayElement" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkWriteDescriptorSet">
      <member default_value="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="dstSet" optional="False">
         <type const="False">VkDescriptorSet</type>
      </member>
      <member name="dstBinding" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="dstArrayElement" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorType" optional="False">
         <type const="False">VkDescriptorType</type>
      </member>
      <member length="descriptorCount" name="pImageInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorImageInfo</type>
         </pointer>
      </member>
      <member length="descriptorCount" name="pBufferInfo" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorBufferInfo</type>
         </pointer>
      </member>
      <member length="descriptorCount" name="pTexelBufferView" optional="False">
         <pointer const="False">
            <type const="True">VkBufferView</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDescriptorBufferInfo">
      <member name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </member>
      <member name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="range" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkDescriptorImageInfo">
      <member name="sampler" optional="False">
         <type const="False">VkSampler</type>
      </member>
      <member name="imageView" optional="False">
         <type const="False">VkImageView</type>
      </member>
      <member name="imageLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </member>
   </struct>
   <struct name="VkDescriptorSetAllocateInfo">
      <member default_value="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="descriptorPool" optional="False">
         <type const="False">VkDescriptorPool</type>
      </member>
      <member name="descriptorSetCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="descriptorSetCount" name="pSetLayouts" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayout</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDescriptorPoolCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkDescriptorPoolCreateFlags</type>
      </member>
      <member name="maxSets" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="poolSizeCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="poolSizeCount" name="pPoolSizes" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorPoolSize</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDescriptorPoolSize">
      <member name="type" optional="False">
         <type const="False">VkDescriptorType</type>
      </member>
      <member name="descriptorCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDescriptorSetLayoutCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkDescriptorSetLayoutCreateFlags</type>
      </member>
      <member name="bindingCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="bindingCount" name="pBindings" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayoutBinding</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkDescriptorSetLayoutBinding">
      <member name="binding" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="descriptorType" optional="False">
         <type const="False">VkDescriptorType</type>
      </member>
      <member name="descriptorCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member name="stageFlags" optional="False">
         <type const="False">VkShaderStageFlags</type>
      </member>
      <member length="descriptorCount" name="pImmutableSamplers" optional="True">
         <pointer const="False">
            <type const="True">VkSampler</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSamplerCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkSamplerCreateFlags</type>
      </member>
      <member name="magFilter" optional="False">
         <type const="False">VkFilter</type>
      </member>
      <member name="minFilter" optional="False">
         <type const="False">VkFilter</type>
      </member>
      <member name="mipmapMode" optional="False">
         <type const="False">VkSamplerMipmapMode</type>
      </member>
      <member name="addressModeU" optional="False">
         <type const="False">VkSamplerAddressMode</type>
      </member>
      <member name="addressModeV" optional="False">
         <type const="False">VkSamplerAddressMode</type>
      </member>
      <member name="addressModeW" optional="False">
         <type const="False">VkSamplerAddressMode</type>
      </member>
      <member name="mipLodBias" optional="False">
         <type const="False">float</type>
      </member>
      <member name="anisotropyEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="maxAnisotropy" optional="False">
         <type const="False">float</type>
      </member>
      <member name="compareEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="compareOp" optional="False">
         <type const="False">VkCompareOp</type>
      </member>
      <member name="minLod" optional="False">
         <type const="False">float</type>
      </member>
      <member name="maxLod" optional="False">
         <type const="False">float</type>
      </member>
      <member name="borderColor" optional="False">
         <type const="False">VkBorderColor</type>
      </member>
      <member name="unnormalizedCoordinates" optional="False">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPipelineLayoutCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineLayoutCreateFlags</type>
      </member>
      <member name="setLayoutCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="setLayoutCount" name="pSetLayouts" optional="False">
         <pointer const="False">
            <type const="True">VkDescriptorSetLayout</type>
         </pointer>
      </member>
      <member name="pushConstantRangeCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="pushConstantRangeCount" name="pPushConstantRanges" optional="False">
         <pointer const="False">
            <type const="True">VkPushConstantRange</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPushConstantRange">
      <member name="stageFlags" optional="False">
         <type const="False">VkShaderStageFlags</type>
      </member>
      <member name="offset" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="size" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkComputePipelineCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineCreateFlags</type>
      </member>
      <member name="stage" optional="False">
         <type const="False">VkPipelineShaderStageCreateInfo</type>
      </member>
      <member name="layout" optional="False">
         <type const="False">VkPipelineLayout</type>
      </member>
      <member name="basePipelineHandle" optional="True">
         <type const="False">VkPipeline</type>
      </member>
      <member name="basePipelineIndex" optional="False">
         <type const="False">int32_t</type>
      </member>
   </struct>
   <struct name="VkPipelineShaderStageCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineShaderStageCreateFlags</type>
      </member>
      <member name="stage" optional="False">
         <type const="False">VkShaderStageFlagBits</type>
      </member>
      <member name="module" optional="False">
         <type const="False">VkShaderModule</type>
      </member>
      <member name="pName" optional="False">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="pSpecializationInfo" optional="True">
         <pointer const="False">
            <type const="True">VkSpecializationInfo</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSpecializationInfo">
      <member name="mapEntryCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="mapEntryCount" name="pMapEntries" optional="False">
         <pointer const="False">
            <type const="True">VkSpecializationMapEntry</type>
         </pointer>
      </member>
      <member name="dataSize" optional="True">
         <type const="False">size_t</type>
      </member>
      <member length="dataSize" name="pData" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSpecializationMapEntry">
      <member name="antID" optional="False">
         <type const="True">uint32_t</type>
      </member>
      <member name="offset" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="size" optional="False">
         <type const="False">size_t</type>
      </member>
   </struct>
   <struct name="VkGraphicsPipelineCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineCreateFlags</type>
      </member>
      <member name="stageCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="stageCount" name="pStages" optional="False">
         <pointer const="False">
            <type const="True">VkPipelineShaderStageCreateInfo</type>
         </pointer>
      </member>
      <member name="pVertexInputState" optional="True">
         <pointer const="False">
            <type const="True">VkPipelineVertexInputStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pInputAssemblyState" optional="True">
         <pointer const="False">
            <type const="True">VkPipelineInputAssemblyStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pTessellationState" optional="True">
         <pointer const="False">
            <type const="True">VkPipelineTessellationStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pViewportState" optional="True">
         <pointer const="False">
            <type const="True">VkPipelineViewportStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pRasterizationState" optional="False">
         <pointer const="False">
            <type const="True">VkPipelineRasterizationStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pMultisampleState" optional="True">
         <pointer const="False">
            <type const="True">VkPipelineMultisampleStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pDepthStencilState" optional="True">
         <pointer const="False">
            <type const="True">VkPipelineDepthStencilStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pColorBlendState" optional="True">
         <pointer const="False">
            <type const="True">VkPipelineColorBlendStateCreateInfo</type>
         </pointer>
      </member>
      <member name="pDynamicState" optional="True">
         <pointer const="False">
            <type const="True">VkPipelineDynamicStateCreateInfo</type>
         </pointer>
      </member>
      <member name="layout" optional="False">
         <type const="False">VkPipelineLayout</type>
      </member>
      <member name="renderPass" optional="False">
         <type const="False">VkRenderPass</type>
      </member>
      <member name="subpass" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="basePipelineHandle" optional="True">
         <type const="False">VkPipeline</type>
      </member>
      <member name="basePipelineIndex" optional="False">
         <type const="False">int32_t</type>
      </member>
   </struct>
   <struct name="VkPipelineDynamicStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineDynamicStateCreateFlags</type>
      </member>
      <member name="dynamicStateCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="dynamicStateCount" name="pDynamicStates" optional="False">
         <pointer const="False">
            <type const="True">VkDynamicState</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPipelineColorBlendStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineColorBlendStateCreateFlags</type>
      </member>
      <member name="logicOpEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="logicOp" optional="False">
         <type const="False">VkLogicOp</type>
      </member>
      <member name="attachmentCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="attachmentCount" name="pAttachments" optional="False">
         <pointer const="False">
            <type const="True">VkPipelineColorBlendAttachmentState</type>
         </pointer>
      </member>
      <member name="blendConstants" optional="False">
         <array length="4">
            <type const="False">float</type>
         </array>
      </member>
   </struct>
   <struct name="VkPipelineColorBlendAttachmentState">
      <member name="blendEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="srcColorBlendFactor" optional="False">
         <type const="False">VkBlendFactor</type>
      </member>
      <member name="dstColorBlendFactor" optional="False">
         <type const="False">VkBlendFactor</type>
      </member>
      <member name="colorBlendOp" optional="False">
         <type const="False">VkBlendOp</type>
      </member>
      <member name="srcAlphaBlendFactor" optional="False">
         <type const="False">VkBlendFactor</type>
      </member>
      <member name="dstAlphaBlendFactor" optional="False">
         <type const="False">VkBlendFactor</type>
      </member>
      <member name="alphaBlendOp" optional="False">
         <type const="False">VkBlendOp</type>
      </member>
      <member name="colorWriteMask" optional="True">
         <type const="False">VkColorComponentFlags</type>
      </member>
   </struct>
   <struct name="VkPipelineDepthStencilStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineDepthStencilStateCreateFlags</type>
      </member>
      <member name="depthTestEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthWriteEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthCompareOp" optional="False">
         <type const="False">VkCompareOp</type>
      </member>
      <member name="depthBoundsTestEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="stencilTestEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="front" optional="False">
         <type const="False">VkStencilOpState</type>
      </member>
      <member name="back" optional="False">
         <type const="False">VkStencilOpState</type>
      </member>
      <member name="minDepthBounds" optional="False">
         <type const="False">float</type>
      </member>
      <member name="maxDepthBounds" optional="False">
         <type const="False">float</type>
      </member>
   </struct>
   <struct name="VkStencilOpState">
      <member name="failOp" optional="False">
         <type const="False">VkStencilOp</type>
      </member>
      <member name="passOp" optional="False">
         <type const="False">VkStencilOp</type>
      </member>
      <member name="depthFailOp" optional="False">
         <type const="False">VkStencilOp</type>
      </member>
      <member name="compareOp" optional="False">
         <type const="False">VkCompareOp</type>
      </member>
      <member name="compareMask" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="writeMask" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="reference" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkPipelineMultisampleStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineMultisampleStateCreateFlags</type>
      </member>
      <member name="rasterizationSamples" optional="False">
         <type const="False">VkSampleCountFlagBits</type>
      </member>
      <member name="sampleShadingEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="minSampleShading" optional="False">
         <type const="False">float</type>
      </member>
      <member name="pSampleMask" optional="True">
         <pointer const="False">
            <type const="True">VkSampleMask</type>
         </pointer>
      </member>
      <member name="alphaToCoverageEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="alphaToOneEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPipelineRasterizationStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineRasterizationStateCreateFlags</type>
      </member>
      <member name="depthClampEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="rasterizerDiscardEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="polygonMode" optional="False">
         <type const="False">VkPolygonMode</type>
      </member>
      <member name="cullMode" optional="True">
         <type const="False">VkCullModeFlags</type>
      </member>
      <member name="frontFace" optional="False">
         <type const="False">VkFrontFace</type>
      </member>
      <member name="depthBiasEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthBiasConstantFactor" optional="False">
         <type const="False">float</type>
      </member>
      <member name="depthBiasClamp" optional="False">
         <type const="False">float</type>
      </member>
      <member name="depthBiasSlopeFactor" optional="False">
         <type const="False">float</type>
      </member>
      <member name="lineWidth" optional="False">
         <type const="False">float</type>
      </member>
   </struct>
   <struct name="VkPipelineViewportStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineViewportStateCreateFlags</type>
      </member>
      <member name="viewportCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="viewportCount" name="pViewports" optional="True">
         <pointer const="False">
            <type const="True">VkViewport</type>
         </pointer>
      </member>
      <member name="scissorCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="scissorCount" name="pScissors" optional="True">
         <pointer const="False">
            <type const="True">VkRect2D</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPipelineTessellationStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineTessellationStateCreateFlags</type>
      </member>
      <member name="patchControlPoints" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkPipelineInputAssemblyStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineInputAssemblyStateCreateFlags</type>
      </member>
      <member name="topology" optional="False">
         <type const="False">VkPrimitiveTopology</type>
      </member>
      <member name="primitiveRestartEnable" optional="False">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPipelineVertexInputStateCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineVertexInputStateCreateFlags</type>
      </member>
      <member name="vertexBindingDescriptionCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="vertexBindingDescriptionCount" name="pVertexBindingDescriptions" optional="False">
         <pointer const="False">
            <type const="True">VkVertexInputBindingDescription</type>
         </pointer>
      </member>
      <member name="vertexAttributeDescriptionCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="vertexAttributeDescriptionCount" name="pVertexAttributeDescriptions" optional="False">
         <pointer const="False">
            <type const="True">VkVertexInputAttributeDescription</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkVertexInputAttributeDescription">
      <member name="location" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="binding" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="format" optional="False">
         <type const="False">VkFormat</type>
      </member>
      <member name="offset" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkVertexInputBindingDescription">
      <member name="binding" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="stride" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="inputRate" optional="False">
         <type const="False">VkVertexInputRate</type>
      </member>
   </struct>
   <struct name="VkPipelineCacheCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkPipelineCacheCreateFlags</type>
      </member>
      <member name="initialDataSize" optional="True">
         <type const="False">size_t</type>
      </member>
      <member length="initialDataSize" name="pInitialData" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkShaderModuleCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkShaderModuleCreateFlags</type>
      </member>
      <member name="codeSize" optional="False">
         <type const="False">size_t</type>
      </member>
      <member name="pCode" optional="False">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkImageViewCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkImageViewCreateFlags</type>
      </member>
      <member name="image" optional="False">
         <type const="False">VkImage</type>
      </member>
      <member name="viewType" optional="False">
         <type const="False">VkImageViewType</type>
      </member>
      <member name="format" optional="False">
         <type const="False">VkFormat</type>
      </member>
      <member name="components" optional="False">
         <type const="False">VkComponentMapping</type>
      </member>
      <member name="subresourceRange" optional="False">
         <type const="False">VkImageSubresourceRange</type>
      </member>
   </struct>
   <struct name="VkComponentMapping">
      <member name="r" optional="False">
         <type const="False">VkComponentSwizzle</type>
      </member>
      <member name="g" optional="False">
         <type const="False">VkComponentSwizzle</type>
      </member>
      <member name="b" optional="False">
         <type const="False">VkComponentSwizzle</type>
      </member>
      <member name="a" optional="False">
         <type const="False">VkComponentSwizzle</type>
      </member>
   </struct>
   <struct name="VkSubresourceLayout">
      <member name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="rowPitch" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="arrayPitch" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="depthPitch" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkImageSubresource">
      <member name="aspectMask" optional="False">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="mipLevel" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="arrayLayer" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkImageCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkImageCreateFlags</type>
      </member>
      <member name="imageType" optional="False">
         <type const="False">VkImageType</type>
      </member>
      <member name="format" optional="False">
         <type const="False">VkFormat</type>
      </member>
      <member name="extent" optional="False">
         <type const="False">VkExtent3D</type>
      </member>
      <member name="mipLevels" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="arrayLayers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="samples" optional="False">
         <type const="False">VkSampleCountFlagBits</type>
      </member>
      <member name="tiling" optional="False">
         <type const="False">VkImageTiling</type>
      </member>
      <member name="usage" optional="False">
         <type const="False">VkImageUsageFlags</type>
      </member>
      <member name="sharingMode" optional="False">
         <type const="False">VkSharingMode</type>
      </member>
      <member name="queueFamilyIndexCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="queueFamilyIndexCount" name="pQueueFamilyIndices" optional="False">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
      <member name="initialLayout" optional="False">
         <type const="False">VkImageLayout</type>
      </member>
   </struct>
   <struct name="VkBufferViewCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkBufferViewCreateFlags</type>
      </member>
      <member name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </member>
      <member name="format" optional="False">
         <type const="False">VkFormat</type>
      </member>
      <member name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="range" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkBufferCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkBufferCreateFlags</type>
      </member>
      <member name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="usage" optional="False">
         <type const="False">VkBufferUsageFlags</type>
      </member>
      <member name="sharingMode" optional="False">
         <type const="False">VkSharingMode</type>
      </member>
      <member name="queueFamilyIndexCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="queueFamilyIndexCount" name="pQueueFamilyIndices" optional="False">
         <pointer const="False">
            <type const="True">uint32_t</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkQueryPoolCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkQueryPoolCreateFlags</type>
      </member>
      <member name="queryType" optional="False">
         <type const="False">VkQueryType</type>
      </member>
      <member name="queryCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="pipelineStatistics" optional="True">
         <type const="False">VkQueryPipelineStatisticFlags</type>
      </member>
   </struct>
   <struct name="VkEventCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_EVENT_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkEventCreateFlags</type>
      </member>
   </struct>
   <struct name="VkSemaphoreCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkSemaphoreCreateFlags</type>
      </member>
   </struct>
   <struct name="VkFenceCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_FENCE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkFenceCreateFlags</type>
      </member>
   </struct>
   <struct name="VkBindSparseInfo">
      <member default_value="VK_STRUCTURE_TYPE_BIND_SPARSE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="waitSemaphoreCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="waitSemaphoreCount" name="pWaitSemaphores" optional="False">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
      <member name="bufferBindCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="bufferBindCount" name="pBufferBinds" optional="False">
         <pointer const="False">
            <type const="True">VkSparseBufferMemoryBindInfo</type>
         </pointer>
      </member>
      <member name="imageOpaqueBindCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="imageOpaqueBindCount" name="pImageOpaqueBinds" optional="False">
         <pointer const="False">
            <type const="True">VkSparseImageOpaqueMemoryBindInfo</type>
         </pointer>
      </member>
      <member name="imageBindCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="imageBindCount" name="pImageBinds" optional="False">
         <pointer const="False">
            <type const="True">VkSparseImageMemoryBindInfo</type>
         </pointer>
      </member>
      <member name="signalSemaphoreCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="signalSemaphoreCount" name="pSignalSemaphores" optional="False">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSparseImageMemoryBindInfo">
      <member name="image" optional="False">
         <type const="False">VkImage</type>
      </member>
      <member name="bindCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="bindCount" name="pBinds" optional="False">
         <pointer const="False">
            <type const="True">VkSparseImageMemoryBind</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSparseImageMemoryBind">
      <member name="subresource" optional="False">
         <type const="False">VkImageSubresource</type>
      </member>
      <member name="offset" optional="False">
         <type const="False">VkOffset3D</type>
      </member>
      <member name="extent" optional="False">
         <type const="False">VkExtent3D</type>
      </member>
      <member name="memory" optional="True">
         <type const="False">VkDeviceMemory</type>
      </member>
      <member name="memoryOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkSparseMemoryBindFlags</type>
      </member>
   </struct>
   <struct name="VkSparseImageOpaqueMemoryBindInfo">
      <member name="image" optional="False">
         <type const="False">VkImage</type>
      </member>
      <member name="bindCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="bindCount" name="pBinds" optional="False">
         <pointer const="False">
            <type const="True">VkSparseMemoryBind</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSparseMemoryBind">
      <member name="resourceOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="memory" optional="True">
         <type const="False">VkDeviceMemory</type>
      </member>
      <member name="memoryOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkSparseMemoryBindFlags</type>
      </member>
   </struct>
   <struct name="VkSparseBufferMemoryBindInfo">
      <member name="buffer" optional="False">
         <type const="False">VkBuffer</type>
      </member>
      <member name="bindCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="bindCount" name="pBinds" optional="False">
         <pointer const="False">
            <type const="True">VkSparseMemoryBind</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkSparseImageFormatProperties">
      <member name="aspectMask" optional="True">
         <type const="False">VkImageAspectFlags</type>
      </member>
      <member name="imageGranularity" optional="False">
         <type const="False">VkExtent3D</type>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkSparseImageFormatFlags</type>
      </member>
   </struct>
   <struct name="VkSparseImageMemoryRequirements">
      <member name="formatProperties" optional="False">
         <type const="False">VkSparseImageFormatProperties</type>
      </member>
      <member name="imageMipTailFirstLod" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="imageMipTailSize" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="imageMipTailOffset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="imageMipTailStride" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkMemoryRequirements">
      <member name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="alignment" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="memoryTypeBits" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkMappedMemoryRange">
      <member default_value="VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="memory" optional="False">
         <type const="False">VkDeviceMemory</type>
      </member>
      <member name="offset" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkMemoryAllocateInfo">
      <member default_value="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="allocationSize" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="memoryTypeIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkSubmitInfo">
      <member default_value="VK_STRUCTURE_TYPE_SUBMIT_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="waitSemaphoreCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="waitSemaphoreCount" name="pWaitSemaphores" optional="False">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
      <member length="waitSemaphoreCount" name="pWaitDstStageMask" optional="False">
         <pointer const="False">
            <type const="True">VkPipelineStageFlags</type>
         </pointer>
      </member>
      <member name="commandBufferCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="commandBufferCount" name="pCommandBuffers" optional="False">
         <pointer const="False">
            <type const="True">VkCommandBuffer</type>
         </pointer>
      </member>
      <member name="signalSemaphoreCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="signalSemaphoreCount" name="pSignalSemaphores" optional="False">
         <pointer const="False">
            <type const="True">VkSemaphore</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkLayerProperties">
      <member name="layerName" optional="False">
         <array length="256">
            <type const="False">char</type>
         </array>
      </member>
      <member name="specVersion" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="implementationVersion" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="description" optional="False">
         <array length="256">
            <type const="False">char</type>
         </array>
      </member>
   </struct>
   <struct name="VkExtensionProperties">
      <member name="extensionName" optional="False">
         <array length="256">
            <type const="False">char</type>
         </array>
      </member>
      <member name="specVersion" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkDeviceCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkDeviceCreateFlags</type>
      </member>
      <member name="queueCreateInfoCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="queueCreateInfoCount" name="pQueueCreateInfos" optional="False">
         <pointer const="False">
            <type const="True">VkDeviceQueueCreateInfo</type>
         </pointer>
      </member>
      <member name="enabledLayerCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="enabledLayerCount" name="ppEnabledLayerNames" optional="False">
         <pointer const="False">
            <pointer const="True">
               <type const="True">char</type>
            </pointer>
         </pointer>
      </member>
      <member name="enabledExtensionCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="enabledExtensionCount" name="ppEnabledExtensionNames" optional="False">
         <pointer const="False">
            <pointer const="True">
               <type const="True">char</type>
            </pointer>
         </pointer>
      </member>
      <member name="pEnabledFeatures" optional="True">
         <pointer const="False">
            <type const="True">VkPhysicalDeviceFeatures</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceFeatures">
      <member name="robustBufferAccess" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="fullDrawIndexUint32" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="imageCubeArray" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="independentBlend" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="geometryShader" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="tessellationShader" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sampleRateShading" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="dualSrcBlend" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="logicOp" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="multiDrawIndirect" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="drawIndirectFirstInstance" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthClamp" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthBiasClamp" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="fillModeNonSolid" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="depthBounds" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="wideLines" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="largePoints" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="alphaToOne" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="multiViewport" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="samplerAnisotropy" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="textureCompressionETC2" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="textureCompressionASTC_LDR" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="textureCompressionBC" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="occlusionQueryPrecise" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="pipelineStatisticsQuery" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="vertexPipelineStoresAndAtomics" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="fragmentStoresAndAtomics" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderTessellationAndGeometryPointSize" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderImageGatherExtended" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageExtendedFormats" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageMultisample" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageReadWithoutFormat" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageWriteWithoutFormat" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderUniformBufferArrayDynamicIndexing" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderSampledImageArrayDynamicIndexing" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageBufferArrayDynamicIndexing" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderStorageImageArrayDynamicIndexing" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderClipDistance" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderCullDistance" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderFloat64" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderInt64" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderInt16" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderResourceResidency" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="shaderResourceMinLod" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseBinding" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidencyBuffer" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidencyImage2D" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidencyImage3D" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidency2Samples" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidency4Samples" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidency8Samples" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidency16Samples" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="sparseResidencyAliased" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="variableMultisampleRate" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="inheritedQueries" optional="False">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkDeviceQueueCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkDeviceQueueCreateFlags</type>
      </member>
      <member name="queueFamilyIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="queueCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member length="queueCount" name="pQueuePriorities" optional="False">
         <pointer const="False">
            <type const="True">float</type>
         </pointer>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceMemoryProperties">
      <member name="memoryTypeCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="memoryTypes" optional="False">
         <array length="32">
            <type const="False">VkMemoryType</type>
         </array>
      </member>
      <member name="memoryHeapCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="memoryHeaps" optional="False">
         <array length="16">
            <type const="False">VkMemoryHeap</type>
         </array>
      </member>
   </struct>
   <struct name="VkMemoryHeap">
      <member name="size" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkMemoryHeapFlags</type>
      </member>
   </struct>
   <struct name="VkMemoryType">
      <member name="propertyFlags" optional="True">
         <type const="False">VkMemoryPropertyFlags</type>
      </member>
      <member name="heapIndex" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <struct name="VkQueueFamilyProperties">
      <member name="queueFlags" optional="True">
         <type const="False">VkQueueFlags</type>
      </member>
      <member name="queueCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="timestampValidBits" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="minImageTransferGranularity" optional="False">
         <type const="False">VkExtent3D</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceProperties">
      <member name="apiVersion" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="driverVersion" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="vendorID" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="deviceID" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="deviceType" optional="False">
         <type const="False">VkPhysicalDeviceType</type>
      </member>
      <member name="deviceName" optional="False">
         <array length="256">
            <type const="False">char</type>
         </array>
      </member>
      <member name="pipelineCacheUUID" optional="False">
         <array length="16">
            <type const="False">uint8_t</type>
         </array>
      </member>
      <member name="limits" optional="False">
         <type const="False">VkPhysicalDeviceLimits</type>
      </member>
      <member name="sparseProperties" optional="False">
         <type const="False">VkPhysicalDeviceSparseProperties</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceSparseProperties">
      <member name="residencyStandard2DBlockShape" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="residencyStandard2DMultisampleBlockShape" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="residencyStandard3DBlockShape" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="residencyAlignedMipSize" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="residencyNonResidentStrict" optional="False">
         <type const="False">VkBool32</type>
      </member>
   </struct>
   <struct name="VkPhysicalDeviceLimits">
      <member name="maxImageDimension1D" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageDimension2D" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageDimension3D" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageDimensionCube" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxImageArrayLayers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTexelBufferElements" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxUniformBufferRange" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxStorageBufferRange" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPushConstantsSize" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxMemoryAllocationCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxSamplerAllocationCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="bufferImageGranularity" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="sparseAddressSpaceSize" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="maxBoundDescriptorSets" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorSamplers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorUniformBuffers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorStorageBuffers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorSampledImages" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorStorageImages" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageDescriptorInputAttachments" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxPerStageResources" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetSamplers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetUniformBuffers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetUniformBuffersDynamic" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetStorageBuffers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetStorageBuffersDynamic" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetSampledImages" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetStorageImages" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDescriptorSetInputAttachments" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexInputAttributes" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexInputBindings" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexInputAttributeOffset" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexInputBindingStride" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxVertexOutputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationGenerationLevel" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationPatchSize" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationControlPerVertexInputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationControlPerVertexOutputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationControlPerPatchOutputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationControlTotalOutputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationEvaluationInputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxTessellationEvaluationOutputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryShaderInvocations" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryInputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryOutputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryOutputVertices" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxGeometryTotalOutputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFragmentInputComponents" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFragmentOutputAttachments" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFragmentDualSrcAttachments" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFragmentCombinedOutputResources" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxComputeSharedMemorySize" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxComputeWorkGroupCount" optional="False">
         <array length="3">
            <type const="False">uint32_t</type>
         </array>
      </member>
      <member name="maxComputeWorkGroupInvocations" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxComputeWorkGroupSize" optional="False">
         <array length="3">
            <type const="False">uint32_t</type>
         </array>
      </member>
      <member name="subPixelPrecisionBits" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="subTexelPrecisionBits" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="mipmapPrecisionBits" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDrawIndexedIndexValue" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxDrawIndirectCount" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxSamplerLodBias" optional="False">
         <type const="False">float</type>
      </member>
      <member name="maxSamplerAnisotropy" optional="False">
         <type const="False">float</type>
      </member>
      <member name="maxViewports" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxViewportDimensions" optional="False">
         <array length="2">
            <type const="False">uint32_t</type>
         </array>
      </member>
      <member name="viewportBoundsRange" optional="False">
         <array length="2">
            <type const="False">float</type>
         </array>
      </member>
      <member name="viewportSubPixelBits" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="minMemoryMapAlignment" optional="False">
         <type const="False">size_t</type>
      </member>
      <member name="minTexelBufferOffsetAlignment" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="minUniformBufferOffsetAlignment" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="minStorageBufferOffsetAlignment" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="minTexelOffset" optional="False">
         <type const="False">int32_t</type>
      </member>
      <member name="maxTexelOffset" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="minTexelGatherOffset" optional="False">
         <type const="False">int32_t</type>
      </member>
      <member name="maxTexelGatherOffset" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="minInterpolationOffset" optional="False">
         <type const="False">float</type>
      </member>
      <member name="maxInterpolationOffset" optional="False">
         <type const="False">float</type>
      </member>
      <member name="subPixelInterpolationOffsetBits" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFramebufferWidth" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFramebufferHeight" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxFramebufferLayers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="framebufferColorSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="framebufferDepthSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="framebufferStencilSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="framebufferNoAttachmentsSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="maxColorAttachments" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="sampledImageColorSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="sampledImageIntegerSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="sampledImageDepthSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="sampledImageStencilSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="storageImageSampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="maxSampleMaskWords" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="timestampComputeAndGraphics" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="timestampPeriod" optional="False">
         <type const="False">float</type>
      </member>
      <member name="maxClipDistances" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxCullDistances" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxCombinedClipAndCullDistances" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="discreteQueuePriorities" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="pointSizeRange" optional="False">
         <array length="2">
            <type const="False">float</type>
         </array>
      </member>
      <member name="lineWidthRange" optional="False">
         <array length="2">
            <type const="False">float</type>
         </array>
      </member>
      <member name="pointSizeGranularity" optional="False">
         <type const="False">float</type>
      </member>
      <member name="lineWidthGranularity" optional="False">
         <type const="False">float</type>
      </member>
      <member name="strictLines" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="standardSampleLocations" optional="False">
         <type const="False">VkBool32</type>
      </member>
      <member name="optimalBufferCopyOffsetAlignment" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="optimalBufferCopyRowPitchAlignment" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
      <member name="nonCoherentAtomSize" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkImageFormatProperties">
      <member name="maxExtent" optional="False">
         <type const="False">VkExtent3D</type>
      </member>
      <member name="maxMipLevels" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="maxArrayLayers" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="sampleCounts" optional="True">
         <type const="False">VkSampleCountFlags</type>
      </member>
      <member name="maxResourceSize" optional="False">
         <type const="False">VkDeviceSize</type>
      </member>
   </struct>
   <struct name="VkFormatProperties">
      <member name="linearTilingFeatures" optional="True">
         <type const="False">VkFormatFeatureFlags</type>
      </member>
      <member name="optimalTilingFeatures" optional="True">
         <type const="False">VkFormatFeatureFlags</type>
      </member>
      <member name="bufferFeatures" optional="True">
         <type const="False">VkFormatFeatureFlags</type>
      </member>
   </struct>
   <struct name="VkInstanceCreateInfo">
      <member default_value="VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="flags" optional="True">
         <type const="False">VkInstanceCreateFlags</type>
      </member>
      <member name="pApplicationInfo" optional="True">
         <pointer const="False">
            <type const="True">VkApplicationInfo</type>
         </pointer>
      </member>
      <member name="enabledLayerCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="enabledLayerCount" name="ppEnabledLayerNames" optional="False">
         <pointer const="False">
            <pointer const="True">
               <type const="True">char</type>
            </pointer>
         </pointer>
      </member>
      <member name="enabledExtensionCount" optional="True">
         <type const="False">uint32_t</type>
      </member>
      <member length="enabledExtensionCount" name="ppEnabledExtensionNames" optional="False">
         <pointer const="False">
            <pointer const="True">
               <type const="True">char</type>
            </pointer>
         </pointer>
      </member>
   </struct>
   <struct name="VkApplicationInfo">
      <member default_value="VK_STRUCTURE_TYPE_APPLICATION_INFO" name="sType" optional="False">
         <type const="False">VkStructureType</type>
      </member>
      <member name="pNext" optional="False">
         <pointer const="False">
            <type const="True">void</type>
         </pointer>
      </member>
      <member name="pApplicationName" optional="True">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="applicationVersion" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="pEngineName" optional="True">
         <pointer const="False">
            <type const="True">char</type>
         </pointer>
      </member>
      <member name="engineVersion" optional="False">
         <type const="False">uint32_t</type>
      </member>
      <member name="apiVersion" optional="False">
         <type const="False">uint32_t</type>
      </member>
   </struct>
   <union name="VkClearValue">
      <member name="color">
         <type const="False">VkClearColorValue</type>
      </member>
      <member name="depthStencil">
         <type const="False">VkClearDepthStencilValue</type>
      </member>
   </union>
   <union name="VkClearColorValue">
      <member name="float32">
         <array length="4">
            <type const="False">float</type>
         </array>
      </member>
      <member name="int32">
         <array length="4">
            <type const="False">int32_t</type>
         </array>
      </member>
      <member name="uint32">
         <array length="4">
            <type const="False">uint32_t</type>
         </array>
      </member>
   </union>
</vulkan>
